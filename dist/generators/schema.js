(function (scope) {
    "use strict";
    function F(arity, fun, wrapper) {
        wrapper.a = arity;
        wrapper.f = fun;
        return wrapper;
    }
    function F2(fun) {
        var curried = function (a) {
            return function (b) {
                return fun(a, b);
            };
        };
        curried.a2 = fun;
        return curried;
    }
    function F3(fun) {
        var curried = function (a) {
            return function (b) {
                return function (c) {
                    return fun(a, b, c);
                };
            };
        };
        curried.a3 =
            fun;
        return curried;
    }
    function F4(fun) {
        var curried = function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return fun(a, b, c, d);
                    };
                };
            };
        };
        curried.a4 = fun;
        return curried;
    }
    function F5(fun) {
        var curried = function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return fun(a, b, c, d, e);
                        };
                    };
                };
            };
        };
        curried.a5 = fun;
        return curried;
    }
    function F6(fun) {
        var curried = function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return fun(a, b, c, d, e, f);
                            };
                        };
                    };
                };
            };
        };
        curried.a6 = fun;
        return curried;
    }
    function F7(fun) {
        var curried = function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return function (g) { return fun(a, b, c, d, e, f, g); };
                            };
                        };
                    };
                };
            };
        };
        curried.
            a7 = fun;
        return curried;
    }
    function F8(fun) {
        var curried = function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return function (g) {
                                    return function (h) {
                                        return fun(a, b, c, d, e, f, g, h);
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
        curried.a8 = fun;
        return curried;
    }
    function F9(fun) {
        var curried = function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return function (f) {
                                return function (g) {
                                    return function (h) {
                                        return function (i) {
                                            return fun(a, b, c, d, e, f, g, h, i);
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
        curried
            .a9 = fun;
        return curried;
    }
    function A2(fun, a, b) {
        return fun.a2 ? fun.a2(a, b) : fun(a)(b);
    }
    function A3(fun, a, b, c) {
        return fun.a3 ? fun.a3(a, b, c) : fun(a)(b)(c);
    }
    function A4(fun, a, b, c, d) {
        return fun.a4 ? fun.a4(a, b, c, d) : fun(a)(b)(c)(d);
    }
    function A5(fun, a, b, c, d, e) {
        return fun.a5 ? fun.a5(a, b, c, d, e)
            : fun(a)(b)(c)(d)(e);
    }
    function A6(fun, a, b, c, d, e, f) {
        return fun.a6 ? fun.a6(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
    }
    function A7(fun, a, b, c, d, e, f, g) {
        return fun.a7 ? fun.a7(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
    }
    function A8(fun, a, b, c, d, e, f, g, h) {
        return fun.a8 ? fun.a8(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
    }
    function A9(fun, a, b, c, d, e, f, g, h, i) {
        return fun.a9 ? fun.a9(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
    }
    var _JsArray_empty = [];
    function _JsArray_singleton(value) {
        return [value];
    }
    function _JsArray_length(array) {
        return array.length;
    }
    var _JsArray_initialize_fn = function (size, offset, func) {
        var result = new Array(size);
        for (var i = 0; i < size; i++) {
            result[i] = func(offset + i);
        }
        return result;
    }, _JsArray_initialize = F3(_JsArray_initialize_fn);
    var _JsArray_initializeFromList_fn = function (max, ls) {
        var result = new Array(max);
        for (var i = 0; i < max && ls.b; i++) {
            result[i] = ls.a;
            ls = ls.b;
        }
        result.length = i;
        return _Utils_Tuple2(result, ls);
    }, _JsArray_initializeFromList = F2(_JsArray_initializeFromList_fn);
    var _JsArray_unsafeGet_fn = function (index, array) {
        return array[index];
    }, _JsArray_unsafeGet = F2(_JsArray_unsafeGet_fn);
    var _JsArray_unsafeSet_fn = function (index, value, array) {
        var length = array.length;
        var result = new Array(length);
        for (var i = 0; i < length; i++) {
            result[i] = array[i];
        }
        result[index] = value;
        return result;
    }, _JsArray_unsafeSet = F3(_JsArray_unsafeSet_fn);
    var _JsArray_push_fn = function (value, array) {
        var length = array.length;
        var result = new Array(length + 1);
        for (var i = 0; i < length; i++) {
            result[i] = array[i];
        }
        result[length] = value;
        return result;
    }, _JsArray_push = F2(_JsArray_push_fn);
    var _JsArray_foldl_fn = function (func, acc, array) {
        var length = array.length;
        for (var i = 0; i < length; i++) {
            acc = A2(func, array[i], acc);
        }
        return acc;
    }, _JsArray_foldl_fn_unwrapped = function (func, acc, array) {
        var length = array.length;
        for (var i = 0; i < length; i++) {
            acc = func(array[i], acc);
        }
        return acc;
    }, _JsArray_foldl = F3(_JsArray_foldl_fn);
    var _JsArray_foldr_fn = function (func, acc, array) {
        for (var i = array.length - 1; i >= 0; i--) {
            acc = A2(func, array[i], acc);
        }
        return acc;
    }, _JsArray_foldr_fn_unwrapped = function (func, acc, array) {
        for (var i = array.length - 1; i >= 0; i--) {
            acc = func(array[i], acc);
        }
        return acc;
    }, _JsArray_foldr = F3(_JsArray_foldr_fn);
    var _JsArray_map_fn = function (func, array) {
        var length = array.length;
        var result = new Array(length);
        for (var i = 0; i < length; i++) {
            result[i] = func(array[i]);
        }
        return result;
    }, _JsArray_map = F2(_JsArray_map_fn);
    var _JsArray_indexedMap_fn = function (func, offset, array) {
        var length = array.length;
        var result = new Array(length);
        for (var i = 0; i < length; i++) {
            result[i] = A2(func, offset + i, array[i]);
        }
        return result;
    }, _JsArray_indexedMap_fn_unwrapped = function (func, offset, array) {
        var length = array.length;
        var result = new Array(length);
        for (var i = 0; i < length; i++) {
            result[i] = func(offset + i, array[i]);
        }
        return result;
    }, _JsArray_indexedMap = F3(_JsArray_indexedMap_fn);
    var _JsArray_slice_fn = function (from, to, array) {
        return array.slice(from, to);
    }, _JsArray_slice = F3(_JsArray_slice_fn);
    var _JsArray_appendN_fn = function (n, dest, source) {
        var destLen = dest.length;
        var itemsToCopy = n - destLen;
        if (itemsToCopy > source.length) {
            itemsToCopy = source.length;
        }
        var size = destLen + itemsToCopy;
        var result = new Array(size);
        for (var i = 0; i < destLen; i++) {
            result[i] = dest[i];
        }
        for (var i = 0; i < itemsToCopy; i++) {
            result[i + destLen] = source[i];
        }
        return result;
    }, _JsArray_appendN = F3(_JsArray_appendN_fn);
    var _Debug_log_fn = function (tag, value) {
        return value;
    }, _Debug_log = F2(_Debug_log_fn);
    var _Debug_log_UNUSED_fn = function (tag, value) {
        console.log(tag + ": " + _Debug_toString(value));
        return value;
    }, _Debug_log_UNUSED = F2(_Debug_log_UNUSED_fn);
    function _Debug_todo(moduleName, region) {
        return function (message) {
            _Debug_crash(8, moduleName, region, message);
        };
    }
    function _Debug_todoCase(moduleName, region, value) {
        return function (message) {
            _Debug_crash(9, moduleName, region, value, message);
        };
    }
    function _Debug_toString(value) {
        return "<internals>";
    }
    function _Debug_toString_UNUSED(value) {
        return _Debug_toAnsiString(false, value);
    }
    function _Debug_toAnsiString(ansi, value) {
        if (typeof value === "function") {
            return _Debug_internalColor(ansi, "<function>");
        }
        if (typeof value === "boolean") {
            return _Debug_ctorColor(ansi, value ? "True" : "False");
        }
        if (typeof value === "number") {
            return _Debug_numberColor(ansi, value + "");
        }
        if (value instanceof String) {
            return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
        }
        if (typeof value === "string") {
            return _Debug_stringColor(ansi, "\"" + _Debug_addSlashes(value, false) + "\"");
        }
        if (typeof value === "object" && "$" in value) {
            var tag = value.$;
            if (typeof tag === "number") {
                return _Debug_internalColor(ansi, "<internals>");
            }
            if (tag[0] === "#") {
                var output = [];
                for (var k in value) {
                    if (k === "$")
                        continue;
                    output.push(_Debug_toAnsiString(ansi, value[k]));
                }
                return "(" + output.join(",") + ")";
            }
            if (tag === "Set_elm_builtin") {
                return _Debug_ctorColor(ansi, "Set")
                    + _Debug_fadeColor(ansi, ".fromList") + " "
                    + _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
            }
            if (tag === "RBNode_elm_builtin" || tag === "RBEmpty_elm_builtin") {
                return _Debug_ctorColor(ansi, "Dict")
                    + _Debug_fadeColor(ansi, ".fromList") + " "
                    + _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
            }
            if (tag === "Array_elm_builtin") {
                return _Debug_ctorColor(ansi, "Array")
                    + _Debug_fadeColor(ansi, ".fromList") + " "
                    + _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
            }
            if (tag === "::" || tag === "[]") {
                var output = "[";
                value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b);
                for (; value.b; value = value.b) {
                    output += "," + _Debug_toAnsiString(ansi, value.a);
                }
                return output + "]";
            }
            var output = "";
            for (var i in value) {
                if (i === "$")
                    continue;
                var str = _Debug_toAnsiString(ansi, value[i]);
                var c0 = str[0];
                var parenless = c0 === "{" || c0 === "(" || c0 === "[" || c0 === "<" || c0 === "\"" || str.indexOf(" ") < 0;
                output += " " + (parenless ? str : "(" + str + ")");
            }
            return _Debug_ctorColor(ansi, tag) + output;
        }
        if (typeof DataView === "function" && value instanceof DataView) {
            return _Debug_stringColor(ansi, "<" + value.byteLength + " bytes>");
        }
        if (typeof File !== "undefined" && value instanceof File) {
            return _Debug_internalColor(ansi, "<" + value.name + ">");
        }
        if (typeof value === "object") {
            var output = [];
            for (var key in value) {
                var field = key[0] === "_" ? key.slice(1) : key;
                output.push(_Debug_fadeColor(ansi, field) + " = " + _Debug_toAnsiString(ansi, value[key]));
            }
            if (output.length === 0) {
                return "{}";
            }
            return "{ " + output.join(", ") + " }";
        }
        return _Debug_internalColor(ansi, "<internals>");
    }
    function _Debug_addSlashes(str, isChar) {
        var s = str
            .replace(/\\/g, "\\\\")
            .replace(/\n/g, "\\n")
            .replace(/\t/g, "\\t")
            .replace(/\r/g, "\\r")
            .replace(/\v/g, "\\v")
            .replace(/\0/g, "\\0");
        if (isChar) {
            return s.replace(/\'/g, "\\'");
        }
        else {
            return s.replace(/\"/g, "\\\"");
        }
    }
    function _Debug_ctorColor(ansi, string) {
        return ansi ? "\u001B[96m" + string + "\u001B[0m" : string;
    }
    function _Debug_numberColor(ansi, string) {
        return ansi ? "\u001B[95m" + string + "\u001B[0m" : string;
    }
    function _Debug_stringColor(ansi, string) {
        return ansi ? "\u001B[93m" + string + "\u001B[0m" : string;
    }
    function _Debug_charColor(ansi, string) {
        return ansi ? "\u001B[92m" + string + "\u001B[0m" : string;
    }
    function _Debug_fadeColor(ansi, string) {
        return ansi ? "\u001B[37m" + string + "\u001B[0m" : string;
    }
    function _Debug_internalColor(ansi, string) {
        return ansi ? "\u001B[36m" + string + "\u001B[0m" : string;
    }
    function _Debug_toHexDigit(n) {
        return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
    }
    function _Debug_crash(identifier) {
        throw new Error("https://github.com/elm/core/blob/1.0.0/hints/" + identifier + ".md");
    }
    function _Debug_crash_UNUSED(identifier, fact1, fact2, fact3, fact4) {
        switch (identifier) {
            case 0:
                throw new Error("What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById(\"elm-node\")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.");
            case 1:
                throw new Error("Browser.application programs cannot handle URLs like this:\n\n    " + document.location.href + "\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.");
            case 2:
                var jsonErrorString = fact1;
                throw new Error("Problem with the flags given to your Elm program on initialization.\n\n" + jsonErrorString);
            case 3:
                var portName = fact1;
                throw new Error("There can only be one port named `" + portName + "`, but your program has multiple.");
            case 4:
                var portName = fact1;
                var problem = fact2;
                throw new Error("Trying to send an unexpected type of value through port `" + portName + "`:\n" + problem);
            case 5:
                throw new Error("Trying to use `(==)` on functions.\nThere is no way to know if functions are \"the same\" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.");
            case 6:
                var moduleName = fact1;
                throw new Error("Your page is loading multiple Elm scripts with a module named " + moduleName + ". Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!");
            case 8:
                var moduleName = fact1;
                var region = fact2;
                var message = fact3;
                throw new Error("TODO in module `" + moduleName + "` " + _Debug_regionToString(region) + "\n\n" + message);
            case 9:
                var moduleName = fact1;
                var region = fact2;
                var value = fact3;
                var message = fact4;
                throw new Error("TODO in module `" + moduleName + "` from the `case` expression "
                    + _Debug_regionToString(region) + "\n\nIt received the following value:\n\n    "
                    + _Debug_toString(value).replace("\n", "\n    ")
                    + "\n\nBut the branch that handles it says:\n\n    " + message.replace("\n", "\n    "));
            case 10:
                throw new Error("Bug in https://github.com/elm/virtual-dom/issues");
            case 11:
                throw new Error("Cannot perform mod 0. Division by zero error.");
        }
    }
    function _Debug_regionToString(region) {
        if (region.bF.ed === region.bg.ed) {
            return "on line " + region.bF.ed;
        }
        return "on lines " + region.bF.ed + " through " + region.bg.ed;
    }
    function _Utils_eq(x, y) {
        for (var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack); isEqual && (pair = stack.pop()); isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)) { }
        return isEqual;
    }
    function _Utils_eqHelp(x, y, depth, stack) {
        if (x === y) {
            return true;
        }
        if (typeof x !== "object" || x === null || y === null) {
            typeof x === "function" && _Debug_crash(5);
            return false;
        }
        if (depth > 100) {
            stack.push(_Utils_Tuple2(x, y));
            return true;
        }
        if (x.$ < 0) {
            x = $elm$core$Dict$toList(x);
            y = $elm$core$Dict$toList(y);
        }
        for (var key in x) {
            if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack)) {
                return false;
            }
        }
        return true;
    }
    var _Utils_equal = F2(_Utils_eq);
    var _Utils_notEqual_fn = function (a, b) { return !_Utils_eq(a, b); }, _Utils_notEqual = F2(_Utils_notEqual_fn);
    function _Utils_cmp(x, y, ord) {
        if (typeof x !== "object") {
            return x === y ? 0 : x < y ? -1 : 1;
        }
        if (typeof x.$ === "undefined") {
            return (ord = _Utils_cmp(x.a, y.a))
                ? ord
                : (ord = _Utils_cmp(x.b, y.b))
                    ? ord
                    : _Utils_cmp(x.c, y.c);
        }
        for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) { }
        return ord || (x.b ? 1 : y.b ? -1 : 0);
    }
    var _Utils_lt_fn = function (a, b) { return _Utils_cmp(a, b) < 0; }, _Utils_lt = F2(_Utils_lt_fn);
    var _Utils_le_fn = function (a, b) { return _Utils_cmp(a, b) < 1; }, _Utils_le = F2(_Utils_le_fn);
    var _Utils_gt_fn = function (a, b) { return _Utils_cmp(a, b) > 0; }, _Utils_gt = F2(_Utils_gt_fn);
    var _Utils_ge_fn = function (a, b) { return _Utils_cmp(a, b) >= 0; }, _Utils_ge = F2(_Utils_ge_fn);
    var _Utils_compare_fn = function (x, y) {
        var n = _Utils_cmp(x, y);
        return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
    }, _Utils_compare = F2(_Utils_compare_fn);
    var _Utils_Tuple0 = 0;
    var _Utils_Tuple0_UNUSED = { $: "#0" };
    function _Utils_Tuple2(a, b) { return { a: a, b: b }; }
    function _Utils_Tuple2_UNUSED(a, b) { return { $: "#2", a: a, b: b }; }
    function _Utils_Tuple3(a, b, c) { return { a: a, b: b, c: c }; }
    function _Utils_Tuple3_UNUSED(a, b, c) { return { $: "#3", a: a, b: b, c: c }; }
    function _Utils_chr(c) { return c; }
    function _Utils_chr_UNUSED(c) { return new String(c); }
    function _Utils_update(oldRecord, updatedFields) {
        var newRecord = {};
        for (var key in oldRecord) {
            newRecord[key] = oldRecord[key];
        }
        for (var key in updatedFields) {
            newRecord[key] = updatedFields[key];
        }
        return newRecord;
    }
    var _Utils_append = F2(_Utils_ap);
    function _Utils_ap(xs, ys) {
        if (typeof xs === "string") {
            return xs + ys;
        }
        if (!xs.b) {
            return ys;
        }
        var root = _List_Cons(xs.a, ys);
        xs = xs.b;
        for (var curr = root; xs.b; xs = xs.b) {
            curr = curr.b = _List_Cons(xs.a, ys);
        }
        return root;
    }
    var _List_Nil = { $: 0, a: null, b: null };
    var _List_Nil_UNUSED = { $: "[]" };
    function _List_Cons(hd, tl) { return { $: 1, a: hd, b: tl }; }
    function _List_Cons_UNUSED(hd, tl) { return { $: "::", a: hd, b: tl }; }
    var _List_cons = F2(_List_Cons);
    function _List_fromArray(arr) {
        var out = _List_Nil;
        for (var i = arr.length; i--;) {
            out = _List_Cons(arr[i], out);
        }
        return out;
    }
    function _List_toArray(xs) {
        for (var out = []; xs.b; xs = xs.b) {
            out.push(xs.a);
        }
        return out;
    }
    var _List_map2_fn = function (f, xs, ys) {
        for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) {
            arr.push(A2(f, xs.a, ys.a));
        }
        return _List_fromArray(arr);
    }, _List_map2_fn_unwrapped = function (f, xs, ys) {
        for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) {
            arr.push(f(xs.a, ys.a));
        }
        return _List_fromArray(arr);
    }, _List_map2 = F3(_List_map2_fn);
    var _List_map3_fn = function (f, xs, ys, zs) {
        for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) {
            arr.push(A3(f, xs.a, ys.a, zs.a));
        }
        return _List_fromArray(arr);
    }, _List_map3_fn_unwrapped = function (f, xs, ys, zs) {
        for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) {
            arr.push(f(xs.a, ys.a, zs.a));
        }
        return _List_fromArray(arr);
    }, _List_map3 = F4(_List_map3_fn);
    var _List_map4_fn = function (f, ws, xs, ys, zs) {
        for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) {
            arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
        }
        return _List_fromArray(arr);
    }, _List_map4_fn_unwrapped = function (f, ws, xs, ys, zs) {
        for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) {
            arr.push(f(ws.a, xs.a, ys.a, zs.a));
        }
        return _List_fromArray(arr);
    }, _List_map4 = F5(_List_map4_fn);
    var _List_map5_fn = function (f, vs, ws, xs, ys, zs) {
        for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) {
            arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
        }
        return _List_fromArray(arr);
    }, _List_map5_fn_unwrapped = function (f, vs, ws, xs, ys, zs) {
        for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) {
            arr.push(f(vs.a, ws.a, xs.a, ys.a, zs.a));
        }
        return _List_fromArray(arr);
    }, _List_map5 = F6(_List_map5_fn);
    var _List_sortBy_fn = function (f, xs) {
        return _List_fromArray(_List_toArray(xs).sort(function (a, b) {
            return _Utils_cmp(f(a), f(b));
        }));
    }, _List_sortBy = F2(_List_sortBy_fn);
    var _List_sortWith_fn = function (f, xs) {
        return _List_fromArray(_List_toArray(xs).sort(function (a, b) {
            var ord = A2(f, a, b);
            return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
        }));
    }, _List_sortWith_fn_unwrapped = function (f, xs) {
        return _List_fromArray(_List_toArray(xs).sort(function (a, b) {
            var ord = f(a, b);
            return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
        }));
    }, _List_sortWith = F2(_List_sortWith_fn);
    var _Basics_add_fn = function (a, b) { return a + b; }, _Basics_add = F2(_Basics_add_fn);
    var _Basics_sub_fn = function (a, b) { return a - b; }, _Basics_sub = F2(_Basics_sub_fn);
    var _Basics_mul_fn = function (a, b) { return a * b; }, _Basics_mul = F2(_Basics_mul_fn);
    var _Basics_fdiv_fn = function (a, b) { return a / b; }, _Basics_fdiv = F2(_Basics_fdiv_fn);
    var _Basics_idiv_fn = function (a, b) { return (a / b) | 0; }, _Basics_idiv = F2(_Basics_idiv_fn);
    var _Basics_pow_fn = Math.pow, _Basics_pow = F2(_Basics_pow_fn);
    var _Basics_remainderBy_fn = function (b, a) { return a % b; }, _Basics_remainderBy = F2(_Basics_remainderBy_fn);
    var _Basics_modBy_fn = function (modulus, x) {
        var answer = x % modulus;
        return modulus === 0
            ? _Debug_crash(11)
            :
                ((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
                    ? answer + modulus
                    : answer;
    }, _Basics_modBy = F2(_Basics_modBy_fn);
    var _Basics_pi = Math.PI;
    var _Basics_e = Math.E;
    var _Basics_cos = Math.cos;
    var _Basics_sin = Math.sin;
    var _Basics_tan = Math.tan;
    var _Basics_acos = Math.acos;
    var _Basics_asin = Math.asin;
    var _Basics_atan = Math.atan;
    var _Basics_atan2_fn = Math.atan2, _Basics_atan2 = F2(_Basics_atan2_fn);
    function _Basics_toFloat(x) { return x; }
    function _Basics_truncate(n) { return n | 0; }
    function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }
    var _Basics_ceiling = Math.ceil;
    var _Basics_floor = Math.floor;
    var _Basics_round = Math.round;
    var _Basics_sqrt = Math.sqrt;
    var _Basics_log = Math.log;
    var _Basics_isNaN = isNaN;
    function _Basics_not(bool) { return !bool; }
    var _Basics_and_fn = function (a, b) { return a && b; }, _Basics_and = F2(_Basics_and_fn);
    var _Basics_or_fn = function (a, b) { return a || b; }, _Basics_or = F2(_Basics_or_fn);
    var _Basics_xor_fn = function (a, b) { return a !== b; }, _Basics_xor = F2(_Basics_xor_fn);
    var _String_cons_fn = function (chr, str) {
        return chr + str;
    }, _String_cons = F2(_String_cons_fn);
    function _String_uncons(string) {
        var word = string.charCodeAt(0);
        return !isNaN(word)
            ? $elm$core$Maybe$Just(55296 <= word && word <= 56319
                ? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
                : _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1)))
            : $elm$core$Maybe$Nothing;
    }
    var _String_append_fn = function (a, b) {
        return a + b;
    }, _String_append = F2(_String_append_fn);
    function _String_length(str) {
        return str.length;
    }
    var _String_map_fn = function (func, string) {
        var len = string.length;
        var array = new Array(len);
        var i = 0;
        while (i < len) {
            var word = string.charCodeAt(i);
            if (55296 <= word && word <= 56319) {
                array[i] = func(_Utils_chr(string[i] + string[i + 1]));
                i += 2;
                continue;
            }
            array[i] = func(_Utils_chr(string[i]));
            i++;
        }
        return array.join("");
    }, _String_map = F2(_String_map_fn);
    var _String_filter_fn = function (isGood, str) {
        var arr = [];
        var len = str.length;
        var i = 0;
        while (i < len) {
            var char = str[i];
            var word = str.charCodeAt(i);
            i++;
            if (55296 <= word && word <= 56319) {
                char += str[i];
                i++;
            }
            if (isGood(_Utils_chr(char))) {
                arr.push(char);
            }
        }
        return arr.join("");
    }, _String_filter = F2(_String_filter_fn);
    function _String_reverse(str) {
        var len = str.length;
        var arr = new Array(len);
        var i = 0;
        while (i < len) {
            var word = str.charCodeAt(i);
            if (55296 <= word && word <= 56319) {
                arr[len - i] = str[i + 1];
                i++;
                arr[len - i] = str[i - 1];
                i++;
            }
            else {
                arr[len - i] = str[i];
                i++;
            }
        }
        return arr.join("");
    }
    var _String_foldl_fn = function (func, state, string) {
        var len = string.length;
        var i = 0;
        while (i < len) {
            var char = string[i];
            var word = string.charCodeAt(i);
            i++;
            if (55296 <= word && word <= 56319) {
                char += string[i];
                i++;
            }
            state = A2(func, _Utils_chr(char), state);
        }
        return state;
    }, _String_foldl_fn_unwrapped = function (func, state, string) {
        var len = string.length;
        var i = 0;
        while (i < len) {
            var char = string[i];
            var word = string.charCodeAt(i);
            i++;
            if (55296 <= word && word <= 56319) {
                char += string[i];
                i++;
            }
            state = func(_Utils_chr(char), state);
        }
        return state;
    }, _String_foldl = F3(_String_foldl_fn);
    var _String_foldr_fn = function (func, state, string) {
        var i = string.length;
        while (i--) {
            var char = string[i];
            var word = string.charCodeAt(i);
            if (56320 <= word && word <= 57343) {
                i--;
                char = string[i] + char;
            }
            state = A2(func, _Utils_chr(char), state);
        }
        return state;
    }, _String_foldr_fn_unwrapped = function (func, state, string) {
        var i = string.length;
        while (i--) {
            var char = string[i];
            var word = string.charCodeAt(i);
            if (56320 <= word && word <= 57343) {
                i--;
                char = string[i] + char;
            }
            state = func(_Utils_chr(char), state);
        }
        return state;
    }, _String_foldr = F3(_String_foldr_fn);
    var _String_split_fn = function (sep, str) {
        return str.split(sep);
    }, _String_split = F2(_String_split_fn);
    var _String_join_fn = function (sep, strs) {
        return strs.join(sep);
    }, _String_join = F2(_String_join_fn);
    var _String_slice_fn = function (start, end, str) {
        return str.slice(start, end);
    }, _String_slice = F3(_String_slice_fn);
    function _String_trim(str) {
        return str.trim();
    }
    function _String_trimLeft(str) {
        return str.replace(/^\s+/, "");
    }
    function _String_trimRight(str) {
        return str.replace(/\s+$/, "");
    }
    function _String_words(str) {
        return _List_fromArray(str.trim().split(/\s+/g));
    }
    function _String_lines(str) {
        return _List_fromArray(str.split(/\r\n|\r|\n/g));
    }
    function _String_toUpper(str) {
        return str.toUpperCase();
    }
    function _String_toLower(str) {
        return str.toLowerCase();
    }
    var _String_any_fn = function (isGood, string) {
        var i = string.length;
        while (i--) {
            var char = string[i];
            var word = string.charCodeAt(i);
            if (56320 <= word && word <= 57343) {
                i--;
                char = string[i] + char;
            }
            if (isGood(_Utils_chr(char))) {
                return true;
            }
        }
        return false;
    }, _String_any = F2(_String_any_fn);
    var _String_all_fn = function (isGood, string) {
        var i = string.length;
        while (i--) {
            var char = string[i];
            var word = string.charCodeAt(i);
            if (56320 <= word && word <= 57343) {
                i--;
                char = string[i] + char;
            }
            if (!isGood(_Utils_chr(char))) {
                return false;
            }
        }
        return true;
    }, _String_all = F2(_String_all_fn);
    var _String_contains_fn = function (sub, str) {
        return str.indexOf(sub) > -1;
    }, _String_contains = F2(_String_contains_fn);
    var _String_startsWith_fn = function (sub, str) {
        return str.indexOf(sub) === 0;
    }, _String_startsWith = F2(_String_startsWith_fn);
    var _String_endsWith_fn = function (sub, str) {
        return str.length >= sub.length &&
            str.lastIndexOf(sub) === str.length - sub.length;
    }, _String_endsWith = F2(_String_endsWith_fn);
    var _String_indexes_fn = function (sub, str) {
        var subLen = sub.length;
        if (subLen < 1) {
            return _List_Nil;
        }
        var i = 0;
        var is = [];
        while ((i = str.indexOf(sub, i)) > -1) {
            is.push(i);
            i = i + subLen;
        }
        return _List_fromArray(is);
    }, _String_indexes = F2(_String_indexes_fn);
    function _String_fromNumber(number) {
        return number + "";
    }
    function _String_toInt(str) {
        var total = 0;
        var code0 = str.charCodeAt(0);
        var start = code0 == 43 || code0 == 45 ? 1 : 0;
        for (var i = start; i < str.length; ++i) {
            var code = str.charCodeAt(i);
            if (code < 48 || 57 < code) {
                return $elm$core$Maybe$Nothing;
            }
            total = 10 * total + code - 48;
        }
        return i == start
            ? $elm$core$Maybe$Nothing
            : $elm$core$Maybe$Just(code0 == 45 ? -total : total);
    }
    function _String_toFloat(s) {
        if (s.length === 0 || /[\sxbo]/.test(s)) {
            return $elm$core$Maybe$Nothing;
        }
        var n = +s;
        return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
    }
    function _String_fromList(chars) {
        return _List_toArray(chars).join("");
    }
    function _Char_toCode(char) {
        var code = char.charCodeAt(0);
        if (55296 <= code && code <= 56319) {
            return (code - 55296) * 1024 + char.charCodeAt(1) - 56320 + 65536;
        }
        return code;
    }
    function _Char_fromCode(code) {
        return _Utils_chr((code < 0 || 1114111 < code)
            ? "\uFFFD"
            :
                (code <= 65535)
                    ? String.fromCharCode(code)
                    :
                        (code -= 65536,
                            String.fromCharCode(Math.floor(code / 1024) + 55296, code % 1024 + 56320)));
    }
    function _Char_toUpper(char) {
        return _Utils_chr(char.toUpperCase());
    }
    function _Char_toLower(char) {
        return _Utils_chr(char.toLowerCase());
    }
    function _Char_toLocaleUpper(char) {
        return _Utils_chr(char.toLocaleUpperCase());
    }
    function _Char_toLocaleLower(char) {
        return _Utils_chr(char.toLocaleLowerCase());
    }
    function _Json_succeed(msg) {
        return {
            $: 0,
            a: msg
        };
    }
    function _Json_fail(msg) {
        return {
            $: 1,
            a: msg
        };
    }
    function _Json_decodePrim(decoder) {
        return { $: 2, b: decoder };
    }
    var _Json_decodeInt = _Json_decodePrim(function (value) {
        return (typeof value !== "number")
            ? _Json_expecting("an INT", value)
            :
                (-2147483647 < value && value < 2147483647 && (value | 0) === value)
                    ? $elm$core$Result$Ok(value)
                    :
                        (isFinite(value) && !(value % 1))
                            ? $elm$core$Result$Ok(value)
                            : _Json_expecting("an INT", value);
    });
    var _Json_decodeBool = _Json_decodePrim(function (value) {
        return (typeof value === "boolean")
            ? $elm$core$Result$Ok(value)
            : _Json_expecting("a BOOL", value);
    });
    var _Json_decodeFloat = _Json_decodePrim(function (value) {
        return (typeof value === "number")
            ? $elm$core$Result$Ok(value)
            : _Json_expecting("a FLOAT", value);
    });
    var _Json_decodeValue = _Json_decodePrim(function (value) {
        return $elm$core$Result$Ok(_Json_wrap(value));
    });
    var _Json_decodeString = _Json_decodePrim(function (value) {
        return (typeof value === "string")
            ? $elm$core$Result$Ok(value)
            : (value instanceof String)
                ? $elm$core$Result$Ok(value + "")
                : _Json_expecting("a STRING", value);
    });
    function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
    function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }
    function _Json_decodeNull(value) { return { $: 5, c: value }; }
    var _Json_decodeField_fn = function (field, decoder) {
        return {
            $: 6,
            d: field,
            b: decoder
        };
    }, _Json_decodeField = F2(_Json_decodeField_fn);
    var _Json_decodeIndex_fn = function (index, decoder) {
        return {
            $: 7,
            e: index,
            b: decoder
        };
    }, _Json_decodeIndex = F2(_Json_decodeIndex_fn);
    function _Json_decodeKeyValuePairs(decoder) {
        return {
            $: 8,
            b: decoder
        };
    }
    function _Json_mapMany(f, decoders) {
        return {
            $: 9,
            f: f,
            g: decoders
        };
    }
    var _Json_andThen_fn = function (callback, decoder) {
        return {
            $: 10,
            b: decoder,
            h: callback
        };
    }, _Json_andThen = F2(_Json_andThen_fn);
    function _Json_oneOf(decoders) {
        return {
            $: 11,
            g: decoders
        };
    }
    var _Json_map1_fn = function (f, d1) {
        return _Json_mapMany(f, [d1]);
    }, _Json_map1 = F2(_Json_map1_fn);
    var _Json_map2_fn = function (f, d1, d2) {
        return _Json_mapMany(f, [d1, d2]);
    }, _Json_map2 = F3(_Json_map2_fn);
    var _Json_map3_fn = function (f, d1, d2, d3) {
        return _Json_mapMany(f, [d1, d2, d3]);
    }, _Json_map3 = F4(_Json_map3_fn);
    var _Json_map4_fn = function (f, d1, d2, d3, d4) {
        return _Json_mapMany(f, [d1, d2, d3, d4]);
    }, _Json_map4 = F5(_Json_map4_fn);
    var _Json_map5_fn = function (f, d1, d2, d3, d4, d5) {
        return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
    }, _Json_map5 = F6(_Json_map5_fn);
    var _Json_map6_fn = function (f, d1, d2, d3, d4, d5, d6) {
        return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
    }, _Json_map6 = F7(_Json_map6_fn);
    var _Json_map7_fn = function (f, d1, d2, d3, d4, d5, d6, d7) {
        return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
    }, _Json_map7 = F8(_Json_map7_fn);
    var _Json_map8_fn = function (f, d1, d2, d3, d4, d5, d6, d7, d8) {
        return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
    }, _Json_map8 = F9(_Json_map8_fn);
    var _Json_runOnString_fn = function (decoder, string) {
        try {
            var value = JSON.parse(string);
            return _Json_runHelp(decoder, value);
        }
        catch (e) {
            return $elm$core$Result$Err($elm$json$Json$Decode$Failure_fn("This is not valid JSON! " + e.message, _Json_wrap(string)));
        }
    }, _Json_runOnString = F2(_Json_runOnString_fn);
    var _Json_run_fn = function (decoder, value) {
        return _Json_runHelp(decoder, _Json_unwrap(value));
    }, _Json_run = F2(_Json_run_fn);
    function _Json_runHelp(decoder, value) {
        switch (decoder.$) {
            case 2:
                return decoder.b(value);
            case 5:
                return (value === null)
                    ? $elm$core$Result$Ok(decoder.c)
                    : _Json_expecting("null", value);
            case 3:
                if (!_Json_isArray(value)) {
                    return _Json_expecting("a LIST", value);
                }
                return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);
            case 4:
                if (!_Json_isArray(value)) {
                    return _Json_expecting("an ARRAY", value);
                }
                return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);
            case 6:
                var field = decoder.d;
                if (typeof value !== "object" || value === null || !(field in value)) {
                    return _Json_expecting("an OBJECT with a field named `" + field + "`", value);
                }
                var result = _Json_runHelp(decoder.b, value[field]);
                return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err($elm$json$Json$Decode$Field_fn(field, result.a));
            case 7:
                var index = decoder.e;
                if (!_Json_isArray(value)) {
                    return _Json_expecting("an ARRAY", value);
                }
                if (index >= value.length) {
                    return _Json_expecting("a LONGER array. Need index " + index + " but only see " + value.length + " entries", value);
                }
                var result = _Json_runHelp(decoder.b, value[index]);
                return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err($elm$json$Json$Decode$Index_fn(index, result.a));
            case 8:
                if (typeof value !== "object" || value === null || _Json_isArray(value)) {
                    return _Json_expecting("an OBJECT", value);
                }
                var keyValuePairs = _List_Nil;
                for (var key in value) {
                    if (value.hasOwnProperty(key)) {
                        var result = _Json_runHelp(decoder.b, value[key]);
                        if (!$elm$core$Result$isOk(result)) {
                            return $elm$core$Result$Err($elm$json$Json$Decode$Field_fn(key, result.a));
                        }
                        keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
                    }
                }
                return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));
            case 9:
                var answer = decoder.f;
                var decoders = decoder.g;
                for (var i = 0; i < decoders.length; i++) {
                    var result = _Json_runHelp(decoders[i], value);
                    if (!$elm$core$Result$isOk(result)) {
                        return result;
                    }
                    answer = answer(result.a);
                }
                return $elm$core$Result$Ok(answer);
            case 10:
                var result = _Json_runHelp(decoder.b, value);
                return (!$elm$core$Result$isOk(result))
                    ? result
                    : _Json_runHelp(decoder.h(result.a), value);
            case 11:
                var errors = _List_Nil;
                for (var temp = decoder.g; temp.b; temp = temp.b) {
                    var result = _Json_runHelp(temp.a, value);
                    if ($elm$core$Result$isOk(result)) {
                        return result;
                    }
                    errors = _List_Cons(result.a, errors);
                }
                return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));
            case 1:
                return $elm$core$Result$Err($elm$json$Json$Decode$Failure_fn(decoder.a, _Json_wrap(value)));
            case 0:
                return $elm$core$Result$Ok(decoder.a);
        }
    }
    function _Json_runArrayDecoder(decoder, value, toElmValue) {
        var len = value.length;
        var array = new Array(len);
        for (var i = 0; i < len; i++) {
            var result = _Json_runHelp(decoder, value[i]);
            if (!$elm$core$Result$isOk(result)) {
                return $elm$core$Result$Err($elm$json$Json$Decode$Index_fn(i, result.a));
            }
            array[i] = result.a;
        }
        return $elm$core$Result$Ok(toElmValue(array));
    }
    function _Json_isArray(value) {
        return Array.isArray(value) || (typeof FileList !== "undefined" && value instanceof FileList);
    }
    function _Json_toElmArray(array) {
        return $elm$core$Array$initialize_fn(array.length, function (i) { return array[i]; });
    }
    function _Json_expecting(type, value) {
        return $elm$core$Result$Err($elm$json$Json$Decode$Failure_fn("Expecting " + type, _Json_wrap(value)));
    }
    function _Json_equality(x, y) {
        if (x === y) {
            return true;
        }
        if (x.$ !== y.$) {
            return false;
        }
        switch (x.$) {
            case 0:
            case 1:
                return x.a === y.a;
            case 2:
                return x.b === y.b;
            case 5:
                return x.c === y.c;
            case 3:
            case 4:
            case 8:
                return _Json_equality(x.b, y.b);
            case 6:
                return x.d === y.d && _Json_equality(x.b, y.b);
            case 7:
                return x.e === y.e && _Json_equality(x.b, y.b);
            case 9:
                return x.f === y.f && _Json_listEquality(x.g, y.g);
            case 10:
                return x.h === y.h && _Json_equality(x.b, y.b);
            case 11:
                return _Json_listEquality(x.g, y.g);
        }
    }
    function _Json_listEquality(aDecoders, bDecoders) {
        var len = aDecoders.length;
        if (len !== bDecoders.length) {
            return false;
        }
        for (var i = 0; i < len; i++) {
            if (!_Json_equality(aDecoders[i], bDecoders[i])) {
                return false;
            }
        }
        return true;
    }
    var _Json_encode_fn = function (indentLevel, value) {
        return JSON.stringify(_Json_unwrap(value), null, indentLevel) + "";
    }, _Json_encode = F2(_Json_encode_fn);
    function _Json_wrap_UNUSED(value) { return { $: 0, a: value }; }
    function _Json_unwrap_UNUSED(value) { return value.a; }
    function _Json_wrap(value) { return value; }
    function _Json_unwrap(value) { return value; }
    function _Json_emptyArray() { return []; }
    function _Json_emptyObject() { return {}; }
    var _Json_addField_fn = function (key, value, object) {
        object[key] = _Json_unwrap(value);
        return object;
    }, _Json_addField = F3(_Json_addField_fn);
    function _Json_addEntry(func) {
        return F2(function (entry, array) {
            array.push(_Json_unwrap(func(entry)));
            return array;
        });
    }
    var _Json_encodeNull = _Json_wrap(null);
    var _Bitwise_and_fn = function (a, b) {
        return a & b;
    }, _Bitwise_and = F2(_Bitwise_and_fn);
    var _Bitwise_or_fn = function (a, b) {
        return a | b;
    }, _Bitwise_or = F2(_Bitwise_or_fn);
    var _Bitwise_xor_fn = function (a, b) {
        return a ^ b;
    }, _Bitwise_xor = F2(_Bitwise_xor_fn);
    function _Bitwise_complement(a) {
        return ~a;
    }
    ;
    var _Bitwise_shiftLeftBy_fn = function (offset, a) {
        return a << offset;
    }, _Bitwise_shiftLeftBy = F2(_Bitwise_shiftLeftBy_fn);
    var _Bitwise_shiftRightBy_fn = function (offset, a) {
        return a >> offset;
    }, _Bitwise_shiftRightBy = F2(_Bitwise_shiftRightBy_fn);
    var _Bitwise_shiftRightZfBy_fn = function (offset, a) {
        return a >>> offset;
    }, _Bitwise_shiftRightZfBy = F2(_Bitwise_shiftRightZfBy_fn);
    var _Parser_isSubString_fn = function (smallString, offset, row, col, bigString) {
        var smallLength = smallString.length;
        var isGood = offset + smallLength <= bigString.length;
        for (var i = 0; isGood && i < smallLength;) {
            var code = bigString.charCodeAt(offset);
            isGood =
                smallString[i++] === bigString[offset++]
                    && (code === 10
                        ? (row++, col = 1)
                        : (col++, (code & 63488) === 55296 ? smallString[i++] === bigString[offset++] : 1));
        }
        return _Utils_Tuple3(isGood ? offset : -1, row, col);
    }, _Parser_isSubString = F5(_Parser_isSubString_fn);
    var _Parser_isSubChar_fn = function (predicate, offset, string) {
        return (string.length <= offset
            ? -1
            :
                (string.charCodeAt(offset) & 63488) === 55296
                    ? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
                    :
                        (predicate(_Utils_chr(string[offset]))
                            ? ((string[offset] === "\n") ? -2 : (offset + 1))
                            : -1));
    }, _Parser_isSubChar = F3(_Parser_isSubChar_fn);
    var _Parser_isAsciiCode_fn = function (code, offset, string) {
        return string.charCodeAt(offset) === code;
    }, _Parser_isAsciiCode = F3(_Parser_isAsciiCode_fn);
    var _Parser_chompBase10_fn = function (offset, string) {
        for (; offset < string.length; offset++) {
            var code = string.charCodeAt(offset);
            if (code < 48 || 57 < code) {
                return offset;
            }
        }
        return offset;
    }, _Parser_chompBase10 = F2(_Parser_chompBase10_fn);
    var _Parser_consumeBase_fn = function (base, offset, string) {
        for (var total = 0; offset < string.length; offset++) {
            var digit = string.charCodeAt(offset) - 48;
            if (digit < 0 || base <= digit)
                break;
            total = base * total + digit;
        }
        return _Utils_Tuple2(offset, total);
    }, _Parser_consumeBase = F3(_Parser_consumeBase_fn);
    var _Parser_consumeBase16_fn = function (offset, string) {
        for (var total = 0; offset < string.length; offset++) {
            var code = string.charCodeAt(offset);
            if (48 <= code && code <= 57) {
                total = 16 * total + code - 48;
            }
            else if (65 <= code && code <= 70) {
                total = 16 * total + code - 55;
            }
            else if (97 <= code && code <= 102) {
                total = 16 * total + code - 87;
            }
            else {
                break;
            }
        }
        return _Utils_Tuple2(offset, total);
    }, _Parser_consumeBase16 = F2(_Parser_consumeBase16_fn);
    var _Parser_findSubString_fn = function (smallString, offset, row, col, bigString) {
        var newOffset = bigString.indexOf(smallString, offset);
        var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;
        while (offset < target) {
            var code = bigString.charCodeAt(offset++);
            code === 10
                ? (col = 1, row++)
                : (col++, (code & 63488) === 55296 && offset++);
        }
        return _Utils_Tuple3(newOffset, row, col);
    }, _Parser_findSubString = F5(_Parser_findSubString_fn);
    function _Scheduler_succeed(value) {
        return {
            $: 0,
            a: value
        };
    }
    function _Scheduler_fail(error) {
        return {
            $: 1,
            a: error
        };
    }
    function _Scheduler_binding(callback) {
        return {
            $: 2,
            b: callback,
            c: null
        };
    }
    var _Scheduler_andThen_fn = function (callback, task) {
        return {
            $: 3,
            b: callback,
            d: task
        };
    }, _Scheduler_andThen = F2(_Scheduler_andThen_fn);
    var _Scheduler_onError_fn = function (callback, task) {
        return {
            $: 4,
            b: callback,
            d: task
        };
    }, _Scheduler_onError = F2(_Scheduler_onError_fn);
    function _Scheduler_receive(callback) {
        return {
            $: 5,
            b: callback
        };
    }
    var _Scheduler_guid = 0;
    function _Scheduler_rawSpawn(task) {
        var proc = {
            $: 0,
            e: _Scheduler_guid++,
            f: task,
            g: null,
            h: []
        };
        _Scheduler_enqueue(proc);
        return proc;
    }
    function _Scheduler_spawn(task) {
        return _Scheduler_binding(function (callback) {
            callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
        });
    }
    function _Scheduler_rawSend(proc, msg) {
        proc.h.push(msg);
        _Scheduler_enqueue(proc);
    }
    var _Scheduler_send_fn = function (proc, msg) {
        return _Scheduler_binding(function (callback) {
            _Scheduler_rawSend(proc, msg);
            callback(_Scheduler_succeed(_Utils_Tuple0));
        });
    }, _Scheduler_send = F2(_Scheduler_send_fn);
    function _Scheduler_kill(proc) {
        return _Scheduler_binding(function (callback) {
            var task = proc.f;
            if (task.$ === 2 && task.c) {
                task.c();
            }
            proc.f = null;
            callback(_Scheduler_succeed(_Utils_Tuple0));
        });
    }
    var _Scheduler_working = false;
    var _Scheduler_queue = [];
    function _Scheduler_enqueue(proc) {
        _Scheduler_queue.push(proc);
        if (_Scheduler_working) {
            return;
        }
        _Scheduler_working = true;
        while (proc = _Scheduler_queue.shift()) {
            _Scheduler_step(proc);
        }
        _Scheduler_working = false;
    }
    function _Scheduler_step(proc) {
        while (proc.f) {
            var rootTag = proc.f.$;
            if (rootTag === 0 || rootTag === 1) {
                while (proc.g && proc.g.$ !== rootTag) {
                    proc.g = proc.g.i;
                }
                if (!proc.g) {
                    return;
                }
                proc.f = proc.g.b(proc.f.a);
                proc.g = proc.g.i;
            }
            else if (rootTag === 2) {
                proc.f.c = proc.f.b(function (newRoot) {
                    proc.f = newRoot;
                    _Scheduler_enqueue(proc);
                });
                return;
            }
            else if (rootTag === 5) {
                if (proc.h.length === 0) {
                    return;
                }
                proc.f = proc.f.b(proc.h.shift());
            }
            else {
                proc.g = {
                    $: rootTag === 3 ? 0 : 1,
                    b: proc.f.b,
                    i: proc.g
                };
                proc.f = proc.f.d;
            }
        }
    }
    function _Process_sleep(time) {
        return _Scheduler_binding(function (callback) {
            var id = setTimeout(function () {
                callback(_Scheduler_succeed(_Utils_Tuple0));
            }, time);
            return function () { clearTimeout(id); };
        });
    }
    var _Platform_worker_fn = function (impl, flagDecoder, debugMetadata, args) {
        return _Platform_initialize(flagDecoder, args, impl.aQ, impl.a8, impl.a2, function () { return function () { }; });
    }, _Platform_worker = F4(_Platform_worker_fn);
    function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder) {
        var result = _Json_run_fn(flagDecoder, _Json_wrap(args ? args["flags"] : undefined));
        $elm$core$Result$isOk(result) || _Debug_crash(2);
        var managers = {};
        var initPair = init(result.a);
        var model = initPair.a;
        var stepper = stepperBuilder(sendToApp, model);
        var ports = _Platform_setupEffects(managers, sendToApp);
        function sendToApp(msg, viewMetadata) {
            var pair = A2(update, msg, model);
            stepper(model = pair.a, viewMetadata);
            _Platform_enqueueEffects(managers, pair.b, subscriptions(model));
        }
        _Platform_enqueueEffects(managers, initPair.b, subscriptions(model));
        return ports ? { ports: ports } : {};
    }
    var _Platform_preload;
    function _Platform_registerPreload(url) {
        _Platform_preload.add(url);
    }
    var _Platform_effectManagers = {};
    function _Platform_setupEffects(managers, sendToApp) {
        var ports;
        for (var key in _Platform_effectManagers) {
            var manager = _Platform_effectManagers[key];
            if (manager.a) {
                ports = ports || {};
                ports[key] = manager.a(key, sendToApp);
            }
            managers[key] = _Platform_instantiateManager(manager, sendToApp);
        }
        return ports;
    }
    function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap) {
        return {
            b: init,
            c: onEffects,
            d: onSelfMsg,
            e: cmdMap,
            f: subMap
        };
    }
    function _Platform_instantiateManager(info, sendToApp) {
        var router = {
            g: sendToApp,
            h: undefined
        };
        var onEffects = info.c;
        var onSelfMsg = info.d;
        var cmdMap = info.e;
        var subMap = info.f;
        function loop(state) {
            return _Scheduler_andThen_fn(loop, _Scheduler_receive(function (msg) {
                var value = msg.a;
                if (msg.$ === 0) {
                    return A3(onSelfMsg, router, value, state);
                }
                return cmdMap && subMap
                    ? A4(onEffects, router, value.i, value.j, state)
                    : A3(onEffects, router, cmdMap ? value.i : value.j, state);
            }));
        }
        return router.h = _Scheduler_rawSpawn(_Scheduler_andThen_fn(loop, info.b));
    }
    var _Platform_sendToApp_fn = function (router, msg) {
        return _Scheduler_binding(function (callback) {
            router.g(msg);
            callback(_Scheduler_succeed(_Utils_Tuple0));
        });
    }, _Platform_sendToApp = F2(_Platform_sendToApp_fn);
    var _Platform_sendToSelf_fn = function (router, msg) {
        return _Scheduler_send_fn(router.h, {
            $: 0,
            a: msg
        });
    }, _Platform_sendToSelf = F2(_Platform_sendToSelf_fn);
    function _Platform_leaf(home) {
        return function (value) {
            return {
                $: 1,
                k: home,
                l: value
            };
        };
    }
    function _Platform_batch(list) {
        return {
            $: 2,
            m: list
        };
    }
    var _Platform_map_fn = function (tagger, bag) {
        return {
            $: 3,
            n: tagger,
            o: bag
        };
    }, _Platform_map = F2(_Platform_map_fn);
    var _Platform_effectsQueue = [];
    var _Platform_effectsActive = false;
    function _Platform_enqueueEffects(managers, cmdBag, subBag) {
        _Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });
        if (_Platform_effectsActive)
            return;
        _Platform_effectsActive = true;
        for (var fx; fx = _Platform_effectsQueue.shift();) {
            _Platform_dispatchEffects(fx.p, fx.q, fx.r);
        }
        _Platform_effectsActive = false;
    }
    function _Platform_dispatchEffects(managers, cmdBag, subBag) {
        var effectsDict = {};
        _Platform_gatherEffects(true, cmdBag, effectsDict, null);
        _Platform_gatherEffects(false, subBag, effectsDict, null);
        for (var home in managers) {
            _Scheduler_rawSend(managers[home], {
                $: "fx",
                a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
            });
        }
    }
    function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers) {
        switch (bag.$) {
            case 1:
                var home = bag.k;
                var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
                effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
                return;
            case 2:
                for (var list = bag.m; list.b; list = list.b) {
                    _Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
                }
                return;
            case 3:
                _Platform_gatherEffects(isCmd, bag.o, effectsDict, {
                    s: bag.n,
                    t: taggers
                });
                return;
        }
    }
    function _Platform_toEffect(isCmd, home, taggers, value) {
        function applyTaggers(x) {
            for (var temp = taggers; temp; temp = temp.t) {
                x = temp.s(x);
            }
            return x;
        }
        var map = isCmd
            ? _Platform_effectManagers[home].e
            : _Platform_effectManagers[home].f;
        return A2(map, applyTaggers, value);
    }
    function _Platform_insert(isCmd, newEffect, effects) {
        effects = effects || { i: _List_Nil, j: _List_Nil };
        isCmd
            ? (effects.i = _List_Cons(newEffect, effects.i))
            : (effects.j = _List_Cons(newEffect, effects.j));
        return effects;
    }
    function _Platform_checkPortName(name) {
        if (_Platform_effectManagers[name]) {
            _Debug_crash(3, name);
        }
    }
    function _Platform_outgoingPort(name, converter) {
        _Platform_checkPortName(name);
        _Platform_effectManagers[name] = {
            e: _Platform_outgoingPortMap,
            u: converter,
            a: _Platform_setupOutgoingPort
        };
        return _Platform_leaf(name);
    }
    var _Platform_outgoingPortMap_fn = function (tagger, value) { return value; }, _Platform_outgoingPortMap = F2(_Platform_outgoingPortMap_fn);
    function _Platform_setupOutgoingPort(name) {
        var subs = [];
        var converter = _Platform_effectManagers[name].u;
        var init = _Process_sleep(0);
        _Platform_effectManagers[name].b = init;
        _Platform_effectManagers[name].c = F3(function (router, cmdList, state) {
            for (; cmdList.b; cmdList = cmdList.b) {
                var currentSubs = subs;
                var value = _Json_unwrap(converter(cmdList.a));
                for (var i = 0; i < currentSubs.length; i++) {
                    currentSubs[i](value);
                }
            }
            return init;
        });
        function subscribe(callback) {
            subs.push(callback);
        }
        function unsubscribe(callback) {
            subs = subs.slice();
            var index = subs.indexOf(callback);
            if (index >= 0) {
                subs.splice(index, 1);
            }
        }
        return {
            subscribe: subscribe,
            unsubscribe: unsubscribe
        };
    }
    function _Platform_incomingPort(name, converter) {
        _Platform_checkPortName(name);
        _Platform_effectManagers[name] = {
            f: _Platform_incomingPortMap,
            u: converter,
            a: _Platform_setupIncomingPort
        };
        return _Platform_leaf(name);
    }
    var _Platform_incomingPortMap_fn = function (tagger, finalTagger) {
        return function (value) {
            return tagger(finalTagger(value));
        };
    }, _Platform_incomingPortMap = F2(_Platform_incomingPortMap_fn);
    function _Platform_setupIncomingPort(name, sendToApp) {
        var subs = _List_Nil;
        var converter = _Platform_effectManagers[name].u;
        var init = _Scheduler_succeed(null);
        _Platform_effectManagers[name].b = init;
        _Platform_effectManagers[name].c = F3(function (router, subList, state) {
            subs = subList;
            return init;
        });
        function send(incomingValue) {
            var result = _Json_run_fn(converter, _Json_wrap(incomingValue));
            $elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);
            var value = result.a;
            for (var temp = subs; temp.b; temp = temp.b) {
                sendToApp(temp.a(value));
            }
        }
        return { send: send };
    }
    function _Platform_export(exports) {
        scope["Elm"]
            ? _Platform_mergeExportsProd(scope["Elm"], exports)
            : scope["Elm"] = exports;
    }
    function _Platform_mergeExportsProd(obj, exports) {
        for (var name in exports) {
            (name in obj)
                ? (name == "init")
                    ? _Debug_crash(6)
                    : _Platform_mergeExportsProd(obj[name], exports[name])
                : (obj[name] = exports[name]);
        }
    }
    function _Platform_export_UNUSED(exports) {
        scope["Elm"]
            ? _Platform_mergeExportsDebug("Elm", scope["Elm"], exports)
            : scope["Elm"] = exports;
    }
    function _Platform_mergeExportsDebug(moduleName, obj, exports) {
        for (var name in exports) {
            (name in obj)
                ? (name == "init")
                    ? _Debug_crash(6, moduleName)
                    : _Platform_mergeExportsDebug(moduleName + "." + name, obj[name], exports[name])
                : (obj[name] = exports[name]);
        }
    }
    var _Http_toTask_fn = function (router, toTask, request) {
        return _Scheduler_binding(function (callback) {
            function done(response) {
                callback(toTask(request.g8.a(response)));
            }
            var xhr = new XMLHttpRequest();
            xhr.addEventListener("error", function () { done($elm$http$Http$NetworkError_); });
            xhr.addEventListener("timeout", function () { done($elm$http$Http$Timeout_); });
            xhr.addEventListener("load", function () { done(_Http_toResponse(request.g8.b, xhr)); });
            $elm$core$Maybe$isJust(request.a4) && _Http_track(router, xhr, request.a4.a);
            try {
                xhr.open(request.ht, request.V, true);
            }
            catch (e) {
                return done($elm$http$Http$BadUrl_(request.V));
            }
            _Http_configureRequest(xhr, request);
            request.gM.a && xhr.setRequestHeader("Content-Type", request.gM.a);
            xhr.send(request.gM.b);
            return function () { xhr.c = true; xhr.abort(); };
        });
    }, _Http_toTask = F3(_Http_toTask_fn);
    function _Http_configureRequest(xhr, request) {
        for (var headers = request.U; headers.b; headers = headers.b) {
            xhr.setRequestHeader(headers.a.a, headers.a.b);
        }
        xhr.timeout = request.R.a || 0;
        xhr.responseType = request.g8.d;
        xhr.withCredentials = request.gK;
    }
    function _Http_toResponse(toBody, xhr) {
        return A2(200 <= xhr.status && xhr.status < 300 ? $elm$http$Http$GoodStatus_ : $elm$http$Http$BadStatus_, _Http_toMetadata(xhr), toBody(xhr.response));
    }
    function _Http_toMetadata(xhr) {
        return {
            V: xhr.responseURL,
            hX: xhr.status,
            hY: xhr.statusText,
            U: _Http_parseHeaders(xhr.getAllResponseHeaders())
        };
    }
    function _Http_parseHeaders(rawHeaders) {
        if (!rawHeaders) {
            return $elm$core$Dict$empty;
        }
        var headers = $elm$core$Dict$empty;
        var headerPairs = rawHeaders.split("\r\n");
        for (var i = headerPairs.length; i--;) {
            var headerPair = headerPairs[i];
            var index = headerPair.indexOf(": ");
            if (index > 0) {
                var key = headerPair.substring(0, index);
                var value = headerPair.substring(index + 2);
                headers = $elm$core$Dict$update_fn(key, function (oldValue) {
                    return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue)
                        ? value + ", " + oldValue.a
                        : value);
                }, headers);
            }
        }
        return headers;
    }
    var _Http_expect_fn = function (type, toBody, toValue) {
        return {
            $: 0,
            d: type,
            b: toBody,
            a: toValue
        };
    }, _Http_expect = F3(_Http_expect_fn);
    var _Http_mapExpect_fn = function (func, expect) {
        return {
            $: 0,
            d: expect.d,
            b: expect.b,
            a: function (x) { return func(expect.a(x)); }
        };
    }, _Http_mapExpect = F2(_Http_mapExpect_fn);
    function _Http_toDataView(arrayBuffer) {
        return new DataView(arrayBuffer);
    }
    var _Http_emptyBody = { $: 0 };
    var _Http_pair_fn = function (a, b) { return { $: 0, a: a, b: b }; }, _Http_pair = F2(_Http_pair_fn);
    function _Http_toFormData(parts) {
        for (var formData = new FormData(); parts.b; parts = parts.b) {
            var part = parts.a;
            formData.append(part.a, part.b);
        }
        return formData;
    }
    var _Http_bytesToBlob_fn = function (mime, bytes) {
        return new Blob([bytes], { type: mime });
    }, _Http_bytesToBlob = F2(_Http_bytesToBlob_fn);
    function _Http_track(router, xhr, tracker) {
        xhr.upload.addEventListener("progress", function (event) {
            if (xhr.c) {
                return;
            }
            _Scheduler_rawSpawn(_Platform_sendToSelf_fn(router, _Utils_Tuple2(tracker, $elm$http$Http$Sending({
                hV: event.loaded,
                fM: event.total
            }))));
        });
        xhr.addEventListener("progress", function (event) {
            if (xhr.c) {
                return;
            }
            _Scheduler_rawSpawn(_Platform_sendToSelf_fn(router, _Utils_Tuple2(tracker, $elm$http$Http$Receiving({
                hL: event.loaded,
                fM: event.lengthComputable ? $elm$core$Maybe$Just(event.total) : $elm$core$Maybe$Nothing
            }))));
        });
    }
    var $elm$core$List$cons = _List_cons;
    var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
    var $elm$core$Array$foldr_fn = function (func, baseCase, _v0) {
        var tree = _v0.c;
        var tail = _v0.d;
        var helper = F2(function (node, acc) {
            if (!node.$) {
                var subTree = node.a;
                return _JsArray_foldr_fn(helper, acc, subTree);
            }
            else {
                var values = node.a;
                return _JsArray_foldr_fn(func, acc, values);
            }
        });
        return _JsArray_foldr_fn(helper, _JsArray_foldr_fn(func, baseCase, tail), tree);
    }, $elm$core$Array$foldr = F3($elm$core$Array$foldr_fn);
    var $elm$core$Array$toList = function (array) {
        return $elm$core$Array$foldr_fn($elm$core$List$cons, _List_Nil, array);
    };
    var $elm$core$Dict$foldr_fn = function (func, acc, t) {
        foldr: while (true) {
            if (t.$ === -2) {
                return acc;
            }
            else {
                var key = t.b;
                var value = t.c;
                var left = t.d;
                var right = t.e;
                var $temp$func = func, $temp$acc = A3(func, key, value, $elm$core$Dict$foldr_fn(func, acc, right)), $temp$t = left;
                func = $temp$func;
                acc = $temp$acc;
                t = $temp$t;
                continue foldr;
            }
        }
    }, $elm$core$Dict$foldr_fn_unwrapped = function (func, acc, t) {
        foldr: while (true) {
            if (t.$ === -2) {
                return acc;
            }
            else {
                var key = t.b;
                var value = t.c;
                var left = t.d;
                var right = t.e;
                var $temp$func = func, $temp$acc = func(key, value, $elm$core$Dict$foldr_fn_unwrapped(func, acc, right)), $temp$t = left;
                func = $temp$func;
                acc = $temp$acc;
                t = $temp$t;
                continue foldr;
            }
        }
    }, $elm$core$Dict$foldr = F3($elm$core$Dict$foldr_fn);
    var $elm$core$Dict$toList = function (dict) {
        return $elm$core$Dict$foldr_fn_unwrapped(function (key, value, list) {
            return _List_Cons(_Utils_Tuple2(key, value), list);
        }, _List_Nil, dict);
    };
    var $elm$core$Dict$keys = function (dict) {
        return $elm$core$Dict$foldr_fn_unwrapped(function (key, value, keyList) {
            return _List_Cons(key, keyList);
        }, _List_Nil, dict);
    };
    var $elm$core$Set$toList = function (_v0) {
        var dict = _v0;
        return $elm$core$Dict$keys(dict);
    };
    var $elm$core$Basics$EQ = 1;
    var $elm$core$Basics$GT = 2;
    var $elm$core$Basics$LT = 0;
    var $author$project$Generate$InputError = { $: 1 };
    var $author$project$Generate$SchemaReceived_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $author$project$Generate$SchemaReceived = F2($author$project$Generate$SchemaReceived_fn);
    var $elm$core$Basics$append = _Utils_append;
    var $elm$core$Result$Err = function (a) {
        return { $: 1, a: a };
    };
    var $elm$json$Json$Decode$Failure_fn = function (a, b) {
        return { $: 3, a: a, b: b };
    }, $elm$json$Json$Decode$Failure = F2($elm$json$Json$Decode$Failure_fn);
    var $elm$json$Json$Decode$Field_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $elm$json$Json$Decode$Field = F2($elm$json$Json$Decode$Field_fn);
    var $elm$json$Json$Decode$Index_fn = function (a, b) {
        return { $: 1, a: a, b: b };
    }, $elm$json$Json$Decode$Index = F2($elm$json$Json$Decode$Index_fn);
    var $elm$core$Result$Ok = function (a) {
        return { $: 0, a: a };
    };
    var $elm$json$Json$Decode$OneOf = function (a) {
        return { $: 2, a: a };
    };
    var $elm$core$Basics$False = 1;
    var $elm$core$Basics$add = _Basics_add;
    var $elm$core$Maybe$Just = function (a) { return { $: 0, a: a }; };
    var $elm$core$Maybe$Nothing = { $: 1, a: null };
    var $elm$core$String$all = _String_all;
    var $elm$core$Basics$and = _Basics_and;
    var $elm$json$Json$Encode$encode = _Json_encode;
    var $elm$core$String$fromInt = _String_fromNumber;
    var $elm$core$String$join_fn = function (sep, chunks) {
        return _String_join_fn(sep, _List_toArray(chunks));
    }, $elm$core$String$join = F2($elm$core$String$join_fn);
    var $elm$core$String$split_fn = function (sep, string) {
        return _List_fromArray(_String_split_fn(sep, string));
    }, $elm$core$String$split = F2($elm$core$String$split_fn);
    var $elm$json$Json$Decode$indent = function (str) {
        return $elm$core$String$join_fn("\n    ", $elm$core$String$split_fn("\n", str));
    };
    var $elm$core$List$foldl_fn = function (func, acc, list) {
        foldl: while (true) {
            if (!list.b) {
                return acc;
            }
            else {
                var x = list.a;
                var xs = list.b;
                var $temp$func = func, $temp$acc = A2(func, x, acc), $temp$list = xs;
                func = $temp$func;
                acc = $temp$acc;
                list = $temp$list;
                continue foldl;
            }
        }
    }, $elm$core$List$foldl_fn_unwrapped = function (func, acc, list) {
        foldl: while (true) {
            if (!list.b) {
                return acc;
            }
            else {
                var x = list.a;
                var xs = list.b;
                var $temp$func = func, $temp$acc = func(x, acc), $temp$list = xs;
                func = $temp$func;
                acc = $temp$acc;
                list = $temp$list;
                continue foldl;
            }
        }
    }, $elm$core$List$foldl = F3($elm$core$List$foldl_fn);
    var $elm$core$List$length = function (xs) {
        return $elm$core$List$foldl_fn_unwrapped(function (_v0, i) {
            return i + 1;
        }, 0, xs);
    };
    var $elm$core$List$map2 = _List_map2;
    var $elm$core$Basics$le = _Utils_le;
    var $elm$core$Basics$sub = _Basics_sub;
    var $elm$core$List$rangeHelp_fn = function (lo, hi, list) {
        rangeHelp: while (true) {
            if (_Utils_cmp(lo, hi) < 1) {
                var $temp$lo = lo, $temp$hi = hi - 1, $temp$list = _List_Cons(hi, list);
                lo = $temp$lo;
                hi = $temp$hi;
                list = $temp$list;
                continue rangeHelp;
            }
            else {
                return list;
            }
        }
    }, $elm$core$List$rangeHelp = F3($elm$core$List$rangeHelp_fn);
    var $elm$core$List$range_fn = function (lo, hi) {
        return $elm$core$List$rangeHelp_fn(lo, hi, _List_Nil);
    }, $elm$core$List$range = F2($elm$core$List$range_fn);
    var $elm$core$List$indexedMap_fn = function (f, xs) {
        var tmp = _List_Cons(undefined, _List_Nil);
        var end = tmp;
        for (var i = 0; xs.b; i++, xs = xs.b) {
            var next = _List_Cons(A2(f, i, xs.a), _List_Nil);
            end.b = next;
            end = next;
        }
        return tmp.b;
    }, $elm$core$List$indexedMap_fn_unwrapped = function (f, xs) {
        var tmp = _List_Cons(undefined, _List_Nil);
        var end = tmp;
        for (var i = 0; xs.b; i++, xs = xs.b) {
            var next = _List_Cons(f(i, xs.a), _List_Nil);
            end.b = next;
            end = next;
        }
        return tmp.b;
    }, $elm$core$List$indexedMap = F2($elm$core$List$indexedMap_fn);
    var $elm$core$Char$toCode = _Char_toCode;
    var $elm$core$Char$isLower = function (_char) {
        var code = $elm$core$Char$toCode(_char);
        return (97 <= code) && (code <= 122);
    };
    var $elm$core$Char$isUpper = function (_char) {
        var code = $elm$core$Char$toCode(_char);
        return (code <= 90) && (65 <= code);
    };
    var $elm$core$Basics$or = _Basics_or;
    var $elm$core$Char$isAlpha = function (_char) {
        return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
    };
    var $elm$core$Char$isDigit = function (_char) {
        var code = $elm$core$Char$toCode(_char);
        return (code <= 57) && (48 <= code);
    };
    var $elm$core$Char$isAlphaNum = function (_char) {
        return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
    };
    var $elm$core$List$reverse = function (list) {
        return $elm$core$List$foldl_fn($elm$core$List$cons, _List_Nil, list);
    };
    var $elm$core$String$uncons = _String_uncons;
    var $elm$json$Json$Decode$errorOneOf_fn = function (i, error) {
        return "\n\n(" + ($elm$core$String$fromInt(i + 1) + (") " + $elm$json$Json$Decode$indent($elm$json$Json$Decode$errorToString(error))));
    }, $elm$json$Json$Decode$errorOneOf = F2($elm$json$Json$Decode$errorOneOf_fn);
    var $elm$json$Json$Decode$errorToString = function (error) {
        return $elm$json$Json$Decode$errorToStringHelp_fn(error, _List_Nil);
    };
    var $elm$json$Json$Decode$errorToStringHelp_fn = function (error, context) {
        errorToStringHelp: while (true) {
            switch (error.$) {
                case 0:
                    var f = error.a;
                    var err = error.b;
                    var isSimple = function () {
                        var _v1 = $elm$core$String$uncons(f);
                        if (_v1.$ === 1) {
                            return false;
                        }
                        else {
                            var _v2 = _v1.a;
                            var _char = _v2.a;
                            var rest = _v2.b;
                            return $elm$core$Char$isAlpha(_char) && _String_all_fn($elm$core$Char$isAlphaNum, rest);
                        }
                    }();
                    var fieldName = isSimple ? ("." + f) : ("['" + (f + "']"));
                    var $temp$error = err, $temp$context = _List_Cons(fieldName, context);
                    error = $temp$error;
                    context = $temp$context;
                    continue errorToStringHelp;
                case 1:
                    var i = error.a;
                    var err = error.b;
                    var indexName = "[" + ($elm$core$String$fromInt(i) + "]");
                    var $temp$error = err, $temp$context = _List_Cons(indexName, context);
                    error = $temp$error;
                    context = $temp$context;
                    continue errorToStringHelp;
                case 2:
                    var errors = error.a;
                    if (!errors.b) {
                        return "Ran into a Json.Decode.oneOf with no possibilities" + function () {
                            if (!context.b) {
                                return "!";
                            }
                            else {
                                return " at json" + $elm$core$String$join_fn("", $elm$core$List$reverse(context));
                            }
                        }();
                    }
                    else {
                        if (!errors.b.b) {
                            var err = errors.a;
                            var $temp$error = err, $temp$context = context;
                            error = $temp$error;
                            context = $temp$context;
                            continue errorToStringHelp;
                        }
                        else {
                            var starter = function () {
                                if (!context.b) {
                                    return "Json.Decode.oneOf";
                                }
                                else {
                                    return "The Json.Decode.oneOf at json" + $elm$core$String$join_fn("", $elm$core$List$reverse(context));
                                }
                            }();
                            var introduction = starter + (" failed in the following " + ($elm$core$String$fromInt($elm$core$List$length(errors)) + " ways:"));
                            return $elm$core$String$join_fn("\n\n", _List_Cons(introduction, $elm$core$List$indexedMap_fn($elm$json$Json$Decode$errorOneOf, errors)));
                        }
                    }
                default:
                    var msg = error.a;
                    var json = error.b;
                    var introduction = function () {
                        if (!context.b) {
                            return "Problem with the given value:\n\n";
                        }
                        else {
                            return "Problem with the value at json" + ($elm$core$String$join_fn("", $elm$core$List$reverse(context)) + ":\n\n    ");
                        }
                    }();
                    return introduction + ($elm$json$Json$Decode$indent(_Json_encode_fn(4, json)) + ("\n\n" + msg));
            }
        }
    }, $elm$json$Json$Decode$errorToStringHelp = F2($elm$json$Json$Decode$errorToStringHelp_fn);
    var $elm$core$Array$branchFactor = 32;
    var $elm$core$Array$Array_elm_builtin_fn = function (a, b, c, d) {
        return { $: 0, a: a, b: b, c: c, d: d };
    }, $elm$core$Array$Array_elm_builtin = F4($elm$core$Array$Array_elm_builtin_fn);
    var $elm$core$Elm$JsArray$empty = _JsArray_empty;
    var $elm$core$Basics$ceiling = _Basics_ceiling;
    var $elm$core$Basics$fdiv = _Basics_fdiv;
    var $elm$core$Basics$logBase_fn = function (base, number) {
        return _Basics_log(number) / _Basics_log(base);
    }, $elm$core$Basics$logBase = F2($elm$core$Basics$logBase_fn);
    var $elm$core$Basics$toFloat = _Basics_toFloat;
    var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling($elm$core$Basics$logBase_fn(2, $elm$core$Array$branchFactor));
    var $elm$core$Array$empty = $elm$core$Array$Array_elm_builtin_fn(0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
    var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
    var $elm$core$Array$Leaf = function (a) {
        return { $: 1, a: a };
    };
    var $elm$core$Basics$apL_fn = function (f, x) {
        return f(x);
    }, $elm$core$Basics$apL = F2($elm$core$Basics$apL_fn);
    var $elm$core$Basics$apR_fn = function (x, f) {
        return f(x);
    }, $elm$core$Basics$apR = F2($elm$core$Basics$apR_fn);
    var $elm$core$Basics$eq = _Utils_equal;
    var $elm$core$Basics$floor = _Basics_floor;
    var $elm$core$Elm$JsArray$length = _JsArray_length;
    var $elm$core$Basics$gt = _Utils_gt;
    var $elm$core$Basics$max_fn = function (x, y) {
        return (_Utils_cmp(x, y) > 0) ? x : y;
    }, $elm$core$Basics$max = F2($elm$core$Basics$max_fn);
    var $elm$core$Basics$mul = _Basics_mul;
    var $elm$core$Array$SubTree = function (a) {
        return { $: 0, a: a };
    };
    var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
    var $elm$core$Array$compressNodes_fn = function (nodes, acc) {
        compressNodes: while (true) {
            var _v0 = _JsArray_initializeFromList_fn($elm$core$Array$branchFactor, nodes);
            var node = _v0.a;
            var remainingNodes = _v0.b;
            var newAcc = _List_Cons($elm$core$Array$SubTree(node), acc);
            if (!remainingNodes.b) {
                return $elm$core$List$reverse(newAcc);
            }
            else {
                var $temp$nodes = remainingNodes, $temp$acc = newAcc;
                nodes = $temp$nodes;
                acc = $temp$acc;
                continue compressNodes;
            }
        }
    }, $elm$core$Array$compressNodes = F2($elm$core$Array$compressNodes_fn);
    var $elm$core$Tuple$first = function (_v0) {
        var x = _v0.a;
        return x;
    };
    var $elm$core$Array$treeFromBuilder_fn = function (nodeList, nodeListSize) {
        treeFromBuilder: while (true) {
            var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
            if (newNodeSize === 1) {
                return _JsArray_initializeFromList_fn($elm$core$Array$branchFactor, nodeList).a;
            }
            else {
                var $temp$nodeList = $elm$core$Array$compressNodes_fn(nodeList, _List_Nil), $temp$nodeListSize = newNodeSize;
                nodeList = $temp$nodeList;
                nodeListSize = $temp$nodeListSize;
                continue treeFromBuilder;
            }
        }
    }, $elm$core$Array$treeFromBuilder = F2($elm$core$Array$treeFromBuilder_fn);
    var $elm$core$Array$builderToArray_fn = function (reverseNodeList, builder) {
        if (!builder.q) {
            return $elm$core$Array$Array_elm_builtin_fn($elm$core$Elm$JsArray$length(builder.fZ), $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, builder.fZ);
        }
        else {
            var treeLen = builder.q * $elm$core$Array$branchFactor;
            var depth = $elm$core$Basics$floor($elm$core$Basics$logBase_fn($elm$core$Array$branchFactor, treeLen - 1));
            var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.s) : builder.s;
            var tree = $elm$core$Array$treeFromBuilder_fn(correctNodeList, builder.q);
            return $elm$core$Array$Array_elm_builtin_fn($elm$core$Elm$JsArray$length(builder.fZ) + treeLen, $elm$core$Basics$max_fn(5, depth * $elm$core$Array$shiftStep), tree, builder.fZ);
        }
    }, $elm$core$Array$builderToArray = F2($elm$core$Array$builderToArray_fn);
    var $elm$core$Basics$idiv = _Basics_idiv;
    var $elm$core$Basics$lt = _Utils_lt;
    var $elm$core$Array$initializeHelp_fn = function (fn, fromIndex, len, nodeList, tail) {
        initializeHelp: while (true) {
            if (fromIndex < 0) {
                return $elm$core$Array$builderToArray_fn(false, { s: nodeList, q: (len / $elm$core$Array$branchFactor) | 0, fZ: tail });
            }
            else {
                var leaf = $elm$core$Array$Leaf(_JsArray_initialize_fn($elm$core$Array$branchFactor, fromIndex, fn));
                var $temp$fn = fn, $temp$fromIndex = fromIndex - $elm$core$Array$branchFactor, $temp$len = len, $temp$nodeList = _List_Cons(leaf, nodeList), $temp$tail = tail;
                fn = $temp$fn;
                fromIndex = $temp$fromIndex;
                len = $temp$len;
                nodeList = $temp$nodeList;
                tail = $temp$tail;
                continue initializeHelp;
            }
        }
    }, $elm$core$Array$initializeHelp = F5($elm$core$Array$initializeHelp_fn);
    var $elm$core$Basics$remainderBy = _Basics_remainderBy;
    var $elm$core$Array$initialize_fn = function (len, fn) {
        if (len <= 0) {
            return $elm$core$Array$empty;
        }
        else {
            var tailLen = len % $elm$core$Array$branchFactor;
            var tail = _JsArray_initialize_fn(tailLen, len - tailLen, fn);
            var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
            return $elm$core$Array$initializeHelp_fn(fn, initialFromIndex, len, _List_Nil, tail);
        }
    }, $elm$core$Array$initialize = F2($elm$core$Array$initialize_fn);
    var $elm$core$Basics$True = 0;
    var $elm$core$Result$isOk = function (result) {
        if (!result.$) {
            return true;
        }
        else {
            return false;
        }
    };
    var $elm$json$Json$Decode$decodeValue = _Json_run;
    var $elm$json$Json$Decode$andThen = _Json_andThen;
    var $elm$json$Json$Decode$field = _Json_decodeField;
    var $elm$core$List$foldrHelper_fn = function (fn, acc, ctr, ls) {
        if (!ls.b) {
            return acc;
        }
        else {
            var a = ls.a;
            var r1 = ls.b;
            if (!r1.b) {
                return A2(fn, a, acc);
            }
            else {
                var b = r1.a;
                var r2 = r1.b;
                if (!r2.b) {
                    return A2(fn, a, A2(fn, b, acc));
                }
                else {
                    var c = r2.a;
                    var r3 = r2.b;
                    if (!r3.b) {
                        return A2(fn, a, A2(fn, b, A2(fn, c, acc)));
                    }
                    else {
                        var d = r3.a;
                        var r4 = r3.b;
                        var res = (ctr > 500) ? $elm$core$List$foldl_fn(fn, acc, $elm$core$List$reverse(r4)) : $elm$core$List$foldrHelper_fn(fn, acc, ctr + 1, r4);
                        return A2(fn, a, A2(fn, b, A2(fn, c, A2(fn, d, res))));
                    }
                }
            }
        }
    }, $elm$core$List$foldrHelper_fn_unwrapped = function (fn, acc, ctr, ls) {
        if (!ls.b) {
            return acc;
        }
        else {
            var a = ls.a;
            var r1 = ls.b;
            if (!r1.b) {
                return fn(a, acc);
            }
            else {
                var b = r1.a;
                var r2 = r1.b;
                if (!r2.b) {
                    return fn(a, fn(b, acc));
                }
                else {
                    var c = r2.a;
                    var r3 = r2.b;
                    if (!r3.b) {
                        return fn(a, fn(b, fn(c, acc)));
                    }
                    else {
                        var d = r3.a;
                        var r4 = r3.b;
                        var res = (ctr > 500) ? $elm$core$List$foldl_fn_unwrapped(fn, acc, $elm$core$List$reverse(r4)) : $elm$core$List$foldrHelper_fn_unwrapped(fn, acc, ctr + 1, r4);
                        return fn(a, fn(b, fn(c, fn(d, res))));
                    }
                }
            }
        }
    }, $elm$core$List$foldrHelper = F4($elm$core$List$foldrHelper_fn);
    var $elm$core$List$foldr_fn = function (fn, acc, ls) {
        return $elm$core$List$foldrHelper_fn(fn, acc, 0, ls);
    }, $elm$core$List$foldr = F3($elm$core$List$foldr_fn);
    var $elm$json$Json$Decode$at_fn = function (fields, decoder) {
        return $elm$core$List$foldr_fn($elm$json$Json$Decode$field, decoder, fields);
    }, $elm$json$Json$Decode$at = F2($elm$json$Json$Decode$at_fn);
    var $elm$core$Dict$RBEmpty_elm_builtin = { $: -2 };
    var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
    var $author$project$GraphQL$Schema$empty = { cQ: $elm$core$Dict$empty, hn: $elm$core$Dict$empty, d_: $elm$core$Dict$empty, hv: $elm$core$Dict$empty, hF: $elm$core$Dict$empty, hK: $elm$core$Dict$empty, hP: $elm$core$Dict$empty, h8: $elm$core$Dict$empty };
    var $elm$core$Dict$Black = 1;
    var $elm$core$Dict$RBNode_elm_builtin_fn = function (a, b, c, d, e) {
        return { $: -1, a: a, b: b, c: c, d: d, e: e };
    }, $elm$core$Dict$RBNode_elm_builtin = F5($elm$core$Dict$RBNode_elm_builtin_fn);
    var $elm$core$Dict$Red = 0;
    var $elm$core$Dict$balance_fn = function (color, key, value, left, right) {
        if ((right.$ === -1) && (!right.a)) {
            var _v1 = right.a;
            var rK = right.b;
            var rV = right.c;
            var rLeft = right.d;
            var rRight = right.e;
            if ((left.$ === -1) && (!left.a)) {
                var _v3 = left.a;
                var lK = left.b;
                var lV = left.c;
                var lLeft = left.d;
                var lRight = left.e;
                return $elm$core$Dict$RBNode_elm_builtin_fn(0, key, value, $elm$core$Dict$RBNode_elm_builtin_fn(1, lK, lV, lLeft, lRight), $elm$core$Dict$RBNode_elm_builtin_fn(1, rK, rV, rLeft, rRight));
            }
            else {
                return $elm$core$Dict$RBNode_elm_builtin_fn(color, rK, rV, $elm$core$Dict$RBNode_elm_builtin_fn(0, key, value, left, rLeft), rRight);
            }
        }
        else {
            if ((((left.$ === -1) && (!left.a)) && (left.d.$ === -1)) && (!left.d.a)) {
                var _v5 = left.a;
                var lK = left.b;
                var lV = left.c;
                var _v6 = left.d;
                var _v7 = _v6.a;
                var llK = _v6.b;
                var llV = _v6.c;
                var llLeft = _v6.d;
                var llRight = _v6.e;
                var lRight = left.e;
                return $elm$core$Dict$RBNode_elm_builtin_fn(0, lK, lV, $elm$core$Dict$RBNode_elm_builtin_fn(1, llK, llV, llLeft, llRight), $elm$core$Dict$RBNode_elm_builtin_fn(1, key, value, lRight, right));
            }
            else {
                return $elm$core$Dict$RBNode_elm_builtin_fn(color, key, value, left, right);
            }
        }
    }, $elm$core$Dict$balance = F5($elm$core$Dict$balance_fn);
    var $elm$core$Basics$compare = _Utils_compare;
    var $elm$core$Dict$insertHelp_fn = function (key, value, dict) {
        if (dict.$ === -2) {
            return $elm$core$Dict$RBNode_elm_builtin_fn(0, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
        }
        else {
            var nColor = dict.a;
            var nKey = dict.b;
            var nValue = dict.c;
            var nLeft = dict.d;
            var nRight = dict.e;
            var _v1 = _Utils_compare_fn(key, nKey);
            switch (_v1) {
                case 0:
                    return $elm$core$Dict$balance_fn(nColor, nKey, nValue, $elm$core$Dict$insertHelp_fn(key, value, nLeft), nRight);
                case 1:
                    return $elm$core$Dict$RBNode_elm_builtin_fn(nColor, nKey, value, nLeft, nRight);
                default:
                    return $elm$core$Dict$balance_fn(nColor, nKey, nValue, nLeft, $elm$core$Dict$insertHelp_fn(key, value, nRight));
            }
        }
    }, $elm$core$Dict$insertHelp = F3($elm$core$Dict$insertHelp_fn);
    var $elm$core$Dict$insert_fn = function (key, value, dict) {
        var _v0 = $elm$core$Dict$insertHelp_fn(key, value, dict);
        if ((_v0.$ === -1) && (!_v0.a)) {
            var _v1 = _v0.a;
            var k = _v0.b;
            var v = _v0.c;
            var l = _v0.d;
            var r = _v0.e;
            return $elm$core$Dict$RBNode_elm_builtin_fn(1, k, v, l, r);
        }
        else {
            var x = _v0;
            return x;
        }
    }, $elm$core$Dict$insert = F3($elm$core$Dict$insert_fn);
    var $author$project$GraphQL$Schema$Enum_Group = function (a) {
        return { $: 5, a: a };
    };
    var $author$project$GraphQL$Schema$InputObject_Group = function (a) {
        return { $: 4, a: a };
    };
    var $author$project$GraphQL$Schema$Interface_Group = function (a) {
        return { $: 7, a: a };
    };
    var $author$project$GraphQL$Schema$Mutation_Group = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$GraphQL$Schema$Object_Group = function (a) {
        return { $: 2, a: a };
    };
    var $author$project$GraphQL$Schema$Query_Group = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GraphQL$Schema$Scalar_Group = function (a) {
        return { $: 3, a: a };
    };
    var $author$project$GraphQL$Schema$Union_Group = function (a) {
        return { $: 6, a: a };
    };
    var $author$project$GraphQL$Schema$EnumDetails_fn = function (name, description, values) {
        return { bd: description, c: name, ia: values };
    }, $author$project$GraphQL$Schema$EnumDetails = F3($author$project$GraphQL$Schema$EnumDetails_fn);
    var $author$project$GraphQL$Schema$Value_fn = function (name, description) {
        return { bd: description, c: name };
    }, $author$project$GraphQL$Schema$Value = F2($author$project$GraphQL$Schema$Value_fn);
    var $elm$json$Json$Decode$map2 = _Json_map2;
    var $elm$json$Json$Decode$map = _Json_map1;
    var $elm$json$Json$Decode$oneOf = _Json_oneOf;
    var $elm$json$Json$Decode$succeed = _Json_succeed;
    var $elm$json$Json$Decode$maybe = function (decoder) {
        return $elm$json$Json$Decode$oneOf(_List_fromArray([
            _Json_map1_fn($elm$core$Maybe$Just, decoder),
            $elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
        ]));
    };
    var $elm$json$Json$Decode$fail = _Json_fail;
    var $elm$core$String$isEmpty = function (string) {
        return string === "";
    };
    var $elm$json$Json$Decode$string = _Json_decodeString;
    var $elm$core$String$trim = _String_trim;
    var $author$project$GraphQL$Schema$nonEmptyString = _Json_andThen_fn(function (str) {
        return $elm$core$String$isEmpty($elm$core$String$trim(str)) ? $elm$json$Json$Decode$fail("String was empty.") : $elm$json$Json$Decode$succeed(str);
    }, $elm$json$Json$Decode$string);
    var $author$project$GraphQL$Schema$decodeValue = _Json_map2_fn($author$project$GraphQL$Schema$Value, _Json_decodeField_fn("name", $elm$json$Json$Decode$string), _Json_decodeField_fn("description", $elm$json$Json$Decode$maybe($author$project$GraphQL$Schema$nonEmptyString)));
    var $elm$json$Json$Decode$list = _Json_decodeList;
    var $elm$json$Json$Decode$map3 = _Json_map3;
    var $author$project$GraphQL$Schema$decodeEnum = _Json_map3_fn($author$project$GraphQL$Schema$EnumDetails, _Json_decodeField_fn("name", $elm$json$Json$Decode$string), _Json_decodeField_fn("description", $elm$json$Json$Decode$maybe($author$project$GraphQL$Schema$nonEmptyString)), _Json_decodeField_fn("enumValues", $elm$json$Json$Decode$list($author$project$GraphQL$Schema$decodeValue)));
    var $author$project$GraphQL$Schema$InputObjectDetails_fn = function (name, description, fields, isOneOf) {
        return { bd: description, hc: fields, hq: isOneOf, c: name };
    }, $author$project$GraphQL$Schema$InputObjectDetails = F4($author$project$GraphQL$Schema$InputObjectDetails_fn);
    var $elm$json$Json$Decode$bool = _Json_decodeBool;
    var $author$project$GraphQL$Schema$Active = { $: 1 };
    var $author$project$GraphQL$Schema$Field_fn = function (name, deprecation, description, _arguments, type_, permissions) {
        return { b6: _arguments, g$: deprecation, bd: description, c: name, hI: permissions, aK: type_ };
    }, $author$project$GraphQL$Schema$Field = F6($author$project$GraphQL$Schema$Field_fn);
    var $author$project$GraphQL$Schema$Argument_fn = function (name, description, type_) {
        return { bd: description, c: name, aK: type_ };
    }, $author$project$GraphQL$Schema$Argument = F3($author$project$GraphQL$Schema$Argument_fn);
    var $author$project$GraphQL$Schema$Inner_Enum = function (a) {
        return { $: 3, a: a };
    };
    var $author$project$GraphQL$Schema$Inner_InputObject = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$GraphQL$Schema$Inner_Interface = function (a) {
        return { $: 5, a: a };
    };
    var $author$project$GraphQL$Schema$Inner_List_ = function (a) {
        return { $: 6, a: a };
    };
    var $author$project$GraphQL$Schema$Inner_Non_Null = function (a) {
        return { $: 7, a: a };
    };
    var $author$project$GraphQL$Schema$Inner_Object = function (a) {
        return { $: 2, a: a };
    };
    var $author$project$GraphQL$Schema$Inner_Scalar = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GraphQL$Schema$Inner_Union = function (a) {
        return { $: 4, a: a };
    };
    var $elm$json$Json$Decode$lazy = function (thunk) {
        return _Json_andThen_fn(thunk, $elm$json$Json$Decode$succeed(0));
    };
    var $author$project$GraphQL$Schema$nameDecoder = _Json_decodeField_fn("name", $elm$json$Json$Decode$string);
    var $author$project$GraphQL$Schema$fromKind = function (kind) {
        switch (kind) {
            case "SCALAR":
                return _Json_map1_fn($author$project$GraphQL$Schema$Inner_Scalar, $author$project$GraphQL$Schema$nameDecoder);
            case "INPUT_OBJECT":
                return _Json_map1_fn($author$project$GraphQL$Schema$Inner_InputObject, $author$project$GraphQL$Schema$nameDecoder);
            case "OBJECT":
                return _Json_map1_fn($author$project$GraphQL$Schema$Inner_Object, $author$project$GraphQL$Schema$nameDecoder);
            case "ENUM":
                return _Json_map1_fn($author$project$GraphQL$Schema$Inner_Enum, $author$project$GraphQL$Schema$nameDecoder);
            case "UNION":
                return _Json_map1_fn($author$project$GraphQL$Schema$Inner_Union, $author$project$GraphQL$Schema$nameDecoder);
            case "INTERFACE":
                return _Json_map1_fn($author$project$GraphQL$Schema$Inner_Interface, $author$project$GraphQL$Schema$nameDecoder);
            case "LIST":
                return _Json_map1_fn($author$project$GraphQL$Schema$Inner_List_, _Json_decodeField_fn("ofType", $author$project$GraphQL$Schema$cyclic$lazyDecoder()));
            case "NON_NULL":
                return _Json_map1_fn($author$project$GraphQL$Schema$Inner_Non_Null, _Json_decodeField_fn("ofType", $author$project$GraphQL$Schema$cyclic$lazyDecoder()));
            default:
                return $elm$json$Json$Decode$fail("Unrecognized kind: " + kind);
        }
    };
    function $author$project$GraphQL$Schema$cyclic$innerDecoder() {
        return _Json_andThen_fn($author$project$GraphQL$Schema$fromKind, _Json_decodeField_fn("kind", $elm$json$Json$Decode$string));
    }
    function $author$project$GraphQL$Schema$cyclic$lazyDecoder() {
        return $elm$json$Json$Decode$lazy(function (_v0) {
            return $author$project$GraphQL$Schema$cyclic$innerDecoder();
        });
    }
    var $author$project$GraphQL$Schema$innerDecoder = $author$project$GraphQL$Schema$cyclic$innerDecoder();
    $author$project$GraphQL$Schema$cyclic$innerDecoder = function () {
        return $author$project$GraphQL$Schema$innerDecoder;
    };
    var $author$project$GraphQL$Schema$lazyDecoder = $author$project$GraphQL$Schema$cyclic$lazyDecoder();
    $author$project$GraphQL$Schema$cyclic$lazyDecoder = function () {
        return $author$project$GraphQL$Schema$lazyDecoder;
    };
    var $author$project$GraphQL$Schema$Enum = function (a) {
        return { $: 3, a: a };
    };
    var $author$project$GraphQL$Schema$InputObject = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$GraphQL$Schema$Interface = function (a) {
        return { $: 5, a: a };
    };
    var $author$project$GraphQL$Schema$List_ = function (a) {
        return { $: 6, a: a };
    };
    var $author$project$GraphQL$Schema$Nullable = function (a) {
        return { $: 7, a: a };
    };
    var $author$project$GraphQL$Schema$Object = function (a) {
        return { $: 2, a: a };
    };
    var $author$project$GraphQL$Schema$Scalar = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GraphQL$Schema$Union = function (a) {
        return { $: 4, a: a };
    };
    var $author$project$GraphQL$Schema$invert__fn = function (wrappedInNull, inner) {
        invert_: while (true) {
            var nullable = function (type_) {
                return wrappedInNull ? $author$project$GraphQL$Schema$Nullable(type_) : type_;
            };
            switch (inner.$) {
                case 7:
                    var inner_ = inner.a;
                    var $temp$wrappedInNull = false, $temp$inner = inner_;
                    wrappedInNull = $temp$wrappedInNull;
                    inner = $temp$inner;
                    continue invert_;
                case 6:
                    var inner_ = inner.a;
                    return nullable($author$project$GraphQL$Schema$List_($author$project$GraphQL$Schema$invert__fn(true, inner_)));
                case 0:
                    var value = inner.a;
                    return nullable($author$project$GraphQL$Schema$Scalar(value));
                case 1:
                    var value = inner.a;
                    return nullable($author$project$GraphQL$Schema$InputObject(value));
                case 2:
                    var value = inner.a;
                    return nullable($author$project$GraphQL$Schema$Object(value));
                case 3:
                    var value = inner.a;
                    return nullable($author$project$GraphQL$Schema$Enum(value));
                case 4:
                    var value = inner.a;
                    return nullable($author$project$GraphQL$Schema$Union(value));
                default:
                    var value = inner.a;
                    return nullable($author$project$GraphQL$Schema$Interface(value));
            }
        }
    }, $author$project$GraphQL$Schema$invert_ = F2($author$project$GraphQL$Schema$invert__fn);
    var $author$project$GraphQL$Schema$invert_a0 = true, $author$project$GraphQL$Schema$invert = $author$project$GraphQL$Schema$invert_($author$project$GraphQL$Schema$invert_a0);
    var $author$project$GraphQL$Schema$decodeType = _Json_map1_fn($author$project$GraphQL$Schema$invert, $author$project$GraphQL$Schema$innerDecoder);
    var $author$project$GraphQL$Schema$decodeArgument = _Json_map3_fn($author$project$GraphQL$Schema$Argument, _Json_decodeField_fn("name", $elm$json$Json$Decode$string), _Json_decodeField_fn("description", $elm$json$Json$Decode$maybe($author$project$GraphQL$Schema$nonEmptyString)), _Json_decodeField_fn("type", $author$project$GraphQL$Schema$decodeType));
    var $author$project$GraphQL$Schema$Deprecated = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GraphQL$Schema$decodeDeprecation = function () {
        var fromBoolean = function (isDeprecated_) {
            return isDeprecated_ ? _Json_map1_fn($author$project$GraphQL$Schema$Deprecated, $elm$json$Json$Decode$maybe(_Json_decodeField_fn("deprecationReason", $elm$json$Json$Decode$string))) : $elm$json$Json$Decode$succeed($author$project$GraphQL$Schema$Active);
        };
        return _Json_andThen_fn(fromBoolean, _Json_decodeField_fn("isDeprecated", $elm$json$Json$Decode$bool));
    }();
    var $elm$core$Maybe$withDefault_fn = function (_default, maybe) {
        if (!maybe.$) {
            var value = maybe.a;
            return value;
        }
        else {
            return _default;
        }
    }, $elm$core$Maybe$withDefault = F2($elm$core$Maybe$withDefault_fn);
    var $author$project$GraphQL$Schema$decodePermission = _Json_map1_fn($elm$core$Maybe$withDefault(_List_Nil), $elm$json$Json$Decode$maybe($elm$json$Json$Decode$at_fn(_List_fromArray(["directives", "requires", "permissions"]), $elm$json$Json$Decode$list($elm$json$Json$Decode$string))));
    var $elm$json$Json$Decode$map6 = _Json_map6;
    var $author$project$GraphQL$Schema$decodeField = _Json_map6_fn($author$project$GraphQL$Schema$Field, _Json_decodeField_fn("name", $elm$json$Json$Decode$string), _Json_map1_fn(function (maybeDeprecated) {
        if (maybeDeprecated.$ === 1) {
            return $author$project$GraphQL$Schema$Active;
        }
        else {
            var dep = maybeDeprecated.a;
            return dep;
        }
    }, $elm$json$Json$Decode$maybe($author$project$GraphQL$Schema$decodeDeprecation)), _Json_decodeField_fn("description", $elm$json$Json$Decode$maybe($author$project$GraphQL$Schema$nonEmptyString)), $elm$json$Json$Decode$oneOf(_List_fromArray([
        _Json_decodeField_fn("args", $elm$json$Json$Decode$list($author$project$GraphQL$Schema$decodeArgument)),
        $elm$json$Json$Decode$succeed(_List_Nil)
    ])), _Json_decodeField_fn("type", $author$project$GraphQL$Schema$decodeType), $author$project$GraphQL$Schema$decodePermission);
    var $elm$json$Json$Decode$map4 = _Json_map4;
    var $author$project$GraphQL$Schema$decodeInputObject = _Json_map4_fn($author$project$GraphQL$Schema$InputObjectDetails, _Json_decodeField_fn("name", $elm$json$Json$Decode$string), _Json_decodeField_fn("description", $elm$json$Json$Decode$maybe($author$project$GraphQL$Schema$nonEmptyString)), _Json_decodeField_fn("inputFields", $elm$json$Json$Decode$list($author$project$GraphQL$Schema$decodeField)), _Json_map1_fn($elm$core$Maybe$withDefault(false), $elm$json$Json$Decode$maybe(_Json_decodeField_fn("oneField", $elm$json$Json$Decode$bool))));
    var $author$project$GraphQL$Schema$InterfaceDetails_fn = function (name, description, fields, implementedBy) {
        return { bd: description, hc: fields, hk: implementedBy, c: name };
    }, $author$project$GraphQL$Schema$InterfaceDetails = F4($author$project$GraphQL$Schema$InterfaceDetails_fn);
    var $author$project$GraphQL$Schema$EnumKind = function (a) {
        return { $: 3, a: a };
    };
    var $author$project$GraphQL$Schema$InputObjectKind = function (a) {
        return { $: 2, a: a };
    };
    var $author$project$GraphQL$Schema$InterfaceKind = function (a) {
        return { $: 5, a: a };
    };
    var $author$project$GraphQL$Schema$ObjectKind = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GraphQL$Schema$ScalarKind = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$GraphQL$Schema$UnionKind = function (a) {
        return { $: 4, a: a };
    };
    var $author$project$GraphQL$Schema$kindFromNameAndString_fn = function (name_, kind) {
        switch (kind) {
            case "OBJECT":
                return $elm$json$Json$Decode$succeed($author$project$GraphQL$Schema$ObjectKind(name_));
            case "SCALAR":
                return $elm$json$Json$Decode$succeed($author$project$GraphQL$Schema$ScalarKind(name_));
            case "INTERFACE":
                return $elm$json$Json$Decode$succeed($author$project$GraphQL$Schema$InterfaceKind(name_));
            case "INPUT_OBJECT":
                return $elm$json$Json$Decode$succeed($author$project$GraphQL$Schema$InputObjectKind(name_));
            case "ENUM":
                return $elm$json$Json$Decode$succeed($author$project$GraphQL$Schema$EnumKind(name_));
            case "UNION":
                return $elm$json$Json$Decode$succeed($author$project$GraphQL$Schema$UnionKind(name_));
            default:
                return $elm$json$Json$Decode$fail("Didn't recognize variant kind: " + kind);
        }
    }, $author$project$GraphQL$Schema$kindFromNameAndString = F2($author$project$GraphQL$Schema$kindFromNameAndString_fn);
    var $author$project$GraphQL$Schema$decodeKind = _Json_andThen_fn(function (n) {
        return _Json_andThen_fn($author$project$GraphQL$Schema$kindFromNameAndString(n), _Json_decodeField_fn("kind", $elm$json$Json$Decode$string));
    }, _Json_decodeField_fn("name", $elm$json$Json$Decode$string));
    var $author$project$GraphQL$Schema$decodeInterface = _Json_map4_fn($author$project$GraphQL$Schema$InterfaceDetails, _Json_decodeField_fn("name", $elm$json$Json$Decode$string), _Json_decodeField_fn("description", $elm$json$Json$Decode$maybe($elm$json$Json$Decode$string)), _Json_decodeField_fn("fields", $elm$json$Json$Decode$list($author$project$GraphQL$Schema$decodeField)), _Json_decodeField_fn("possibleTypes", $elm$json$Json$Decode$list($author$project$GraphQL$Schema$decodeKind)));
    var $author$project$GraphQL$Schema$ObjectDetails_fn = function (name, description, fields, interfaces) {
        return { bd: description, hc: fields, d_: interfaces, c: name };
    }, $author$project$GraphQL$Schema$ObjectDetails = F4($author$project$GraphQL$Schema$ObjectDetails_fn);
    var $author$project$GraphQL$Schema$decodeInterfaceKind = _Json_map1_fn($author$project$GraphQL$Schema$InterfaceKind, _Json_decodeField_fn("name", $elm$json$Json$Decode$string));
    var $author$project$GraphQL$Schema$decodeObject = _Json_map4_fn($author$project$GraphQL$Schema$ObjectDetails, _Json_decodeField_fn("name", $elm$json$Json$Decode$string), _Json_decodeField_fn("description", $elm$json$Json$Decode$maybe($author$project$GraphQL$Schema$nonEmptyString)), _Json_decodeField_fn("fields", $elm$json$Json$Decode$list($author$project$GraphQL$Schema$decodeField)), _Json_decodeField_fn("interfaces", $elm$json$Json$Decode$list($author$project$GraphQL$Schema$decodeInterfaceKind)));
    var $elm$core$Dict$fromList = function (assocs) {
        return $elm$core$List$foldl_fn_unwrapped(function (_v0, dict) {
            var key = _v0.a;
            var value = _v0.b;
            return $elm$core$Dict$insert_fn(key, value, dict);
        }, $elm$core$Dict$empty, assocs);
    };
    var $elm$core$Tuple$pair_fn = function (a, b) {
        return _Utils_Tuple2(a, b);
    }, $elm$core$Tuple$pair = F2($elm$core$Tuple$pair_fn);
    var $author$project$GraphQL$Schema$decodeOperation = function () {
        var tupleDecoder = _Json_map2_fn($elm$core$Tuple$pair, _Json_decodeField_fn("name", $elm$json$Json$Decode$string), $author$project$GraphQL$Schema$decodeField);
        return _Json_map1_fn($elm$core$Dict$fromList, _Json_decodeField_fn("fields", $elm$json$Json$Decode$list(tupleDecoder)));
    }();
    var $author$project$GraphQL$Schema$ScalarDetails_fn = function (name, description) {
        return { bd: description, c: name };
    }, $author$project$GraphQL$Schema$ScalarDetails = F2($author$project$GraphQL$Schema$ScalarDetails_fn);
    var $author$project$GraphQL$Schema$decodeScalar = _Json_map2_fn($author$project$GraphQL$Schema$ScalarDetails, _Json_decodeField_fn("name", $elm$json$Json$Decode$string), _Json_decodeField_fn("description", $elm$json$Json$Decode$maybe($author$project$GraphQL$Schema$nonEmptyString)));
    var $author$project$GraphQL$Schema$UnionDetails_fn = function (name, description, variants) {
        return { bd: description, c: name, gw: variants };
    }, $author$project$GraphQL$Schema$UnionDetails = F3($author$project$GraphQL$Schema$UnionDetails_fn);
    var $author$project$GraphQL$Schema$Variant = function (kind) {
        return { bq: kind };
    };
    var $author$project$GraphQL$Schema$decodeVariant = _Json_map1_fn($author$project$GraphQL$Schema$Variant, $author$project$GraphQL$Schema$decodeKind);
    var $author$project$GraphQL$Schema$decodeUnion = _Json_map3_fn($author$project$GraphQL$Schema$UnionDetails, _Json_decodeField_fn("name", $elm$json$Json$Decode$string), _Json_decodeField_fn("description", $elm$json$Json$Decode$maybe($author$project$GraphQL$Schema$nonEmptyString)), _Json_decodeField_fn("possibleTypes", $elm$json$Json$Decode$list($author$project$GraphQL$Schema$decodeVariant)));
    var $elm$core$List$any_fn = function (isOkay, list) {
        any: while (true) {
            if (!list.b) {
                return false;
            }
            else {
                var x = list.a;
                var xs = list.b;
                if (isOkay(x)) {
                    return true;
                }
                else {
                    var $temp$isOkay = isOkay, $temp$list = xs;
                    isOkay = $temp$isOkay;
                    list = $temp$list;
                    continue any;
                }
            }
        }
    }, $elm$core$List$any = F2($elm$core$List$any_fn);
    var $elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
    var $elm$json$Json$Decode$dict = function (decoder) {
        return _Json_map1_fn($elm$core$Dict$fromList, $elm$json$Json$Decode$keyValuePairs(decoder));
    };
    var $elm$core$Dict$get_fn = function (targetKey, dict) {
        get: while (true) {
            if (dict.$ === -2) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var key = dict.b;
                var value = dict.c;
                var left = dict.d;
                var right = dict.e;
                var _v1 = _Utils_compare_fn(targetKey, key);
                switch (_v1) {
                    case 0:
                        var $temp$targetKey = targetKey, $temp$dict = left;
                        targetKey = $temp$targetKey;
                        dict = $temp$dict;
                        continue get;
                    case 1:
                        return $elm$core$Maybe$Just(value);
                    default:
                        var $temp$targetKey = targetKey, $temp$dict = right;
                        targetKey = $temp$targetKey;
                        dict = $temp$dict;
                        continue get;
                }
            }
        }
    }, $elm$core$Dict$get = F2($elm$core$Dict$get_fn);
    var $elm$core$Dict$member_fn = function (key, dict) {
        var _v0 = $elm$core$Dict$get_fn(key, dict);
        if (!_v0.$) {
            return true;
        }
        else {
            return false;
        }
    }, $elm$core$Dict$member = F2($elm$core$Dict$member_fn);
    var $elm$json$Json$Decode$value = _Json_decodeValue;
    var $author$project$GraphQL$Schema$filterHidden = function (decoder_) {
        var filterByDirectives = function (directives) {
            return $elm$core$List$any_fn(function (d) {
                return $elm$core$Dict$member_fn(d, directives);
            }, _List_fromArray(["NoDocs", "Unimplemented"])) ? $elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing) : _Json_map1_fn($elm$core$Maybe$Just, decoder_);
        };
        return $elm$json$Json$Decode$oneOf(_List_fromArray([
            _Json_andThen_fn(filterByDirectives, _Json_decodeField_fn("directives", $elm$json$Json$Decode$dict($elm$json$Json$Decode$value))),
            _Json_map1_fn($elm$core$Maybe$Just, decoder_)
        ]));
    };
    var $elm$core$List$maybeCons_fn = function (f, mx, xs) {
        var _v0 = f(mx);
        if (!_v0.$) {
            var x = _v0.a;
            return _List_Cons(x, xs);
        }
        else {
            return xs;
        }
    }, $elm$core$List$maybeCons = F3($elm$core$List$maybeCons_fn);
    var $elm$core$List$filterMap_fn = function (f, xs) {
        return $elm$core$List$foldr_fn($elm$core$List$maybeCons(f), _List_Nil, xs);
    }, $elm$core$List$filterMap = F2($elm$core$List$filterMap_fn);
    var $elm$core$Basics$identity = function (x) {
        return x;
    };
    var $elm$core$Maybe$map_fn = function (f, maybe) {
        if (!maybe.$) {
            var value = maybe.a;
            return $elm$core$Maybe$Just(f(value));
        }
        else {
            return $elm$core$Maybe$Nothing;
        }
    }, $elm$core$Maybe$map = F2($elm$core$Maybe$map_fn);
    var $author$project$GraphQL$Schema$kinds = function (names) {
        var fromNameAndKind = F2(function (name_, k) {
            switch (k) {
                case "OBJECT":
                    return _Utils_eq(name_, names.e8) ? _Json_map1_fn($elm$core$Maybe$Just, _Json_map1_fn($author$project$GraphQL$Schema$Query_Group, $author$project$GraphQL$Schema$decodeOperation)) : (_Utils_eq($elm$core$Maybe$Just(name_), names.eD) ? _Json_map1_fn($elm$core$Maybe$Just, _Json_map1_fn($author$project$GraphQL$Schema$Mutation_Group, $author$project$GraphQL$Schema$decodeOperation)) : $author$project$GraphQL$Schema$filterHidden(_Json_map1_fn($author$project$GraphQL$Schema$Object_Group, $author$project$GraphQL$Schema$decodeObject)));
                case "SCALAR":
                    return $author$project$GraphQL$Schema$filterHidden(_Json_map1_fn($author$project$GraphQL$Schema$Scalar_Group, $author$project$GraphQL$Schema$decodeScalar));
                case "INTERFACE":
                    return $author$project$GraphQL$Schema$filterHidden(_Json_map1_fn($author$project$GraphQL$Schema$Interface_Group, $author$project$GraphQL$Schema$decodeInterface));
                case "INPUT_OBJECT":
                    return $author$project$GraphQL$Schema$filterHidden(_Json_map1_fn($author$project$GraphQL$Schema$InputObject_Group, $author$project$GraphQL$Schema$decodeInputObject));
                case "ENUM":
                    return $author$project$GraphQL$Schema$filterHidden(_Json_map1_fn($author$project$GraphQL$Schema$Enum_Group, $author$project$GraphQL$Schema$decodeEnum));
                case "UNION":
                    return $author$project$GraphQL$Schema$filterHidden(_Json_map1_fn($author$project$GraphQL$Schema$Union_Group, $author$project$GraphQL$Schema$decodeUnion));
                default:
                    return $elm$json$Json$Decode$fail("Didnt recognize kind: " + k);
            }
        });
        var kind = _Json_andThen_fn(function (name) {
            return _Json_map1_fn(function (kind_) {
                return $elm$core$Maybe$map_fn($elm$core$Tuple$pair(name), kind_);
            }, _Json_andThen_fn(fromNameAndKind(name), _Json_decodeField_fn("kind", $elm$json$Json$Decode$string)));
        }, _Json_decodeField_fn("name", $elm$json$Json$Decode$string));
        return _Json_decodeField_fn("types", _Json_map1_fn($elm$core$List$filterMap($elm$core$Basics$identity), $elm$json$Json$Decode$list(kind)));
    };
    var $elm$core$String$startsWith = _String_startsWith;
    var $author$project$GraphQL$Schema$grabTypes = function (names) {
        var loop = F2(function (_v1, schema) {
            var name = _v1.a;
            var kind = _v1.b;
            switch (kind.$) {
                case 0:
                    var queries = kind.a;
                    return _Utils_update(schema, { hK: queries });
                case 1:
                    var mutations = kind.a;
                    return _Utils_update(schema, { hv: mutations });
                case 2:
                    var object = kind.a;
                    return _Utils_update(schema, {
                        hF: _String_startsWith_fn("__", name) ? schema.hF : $elm$core$Dict$insert_fn(name, object, schema.hF)
                    });
                case 3:
                    var scalar = kind.a;
                    return _Utils_update(schema, {
                        hP: $elm$core$Dict$insert_fn(name, scalar, schema.hP)
                    });
                case 4:
                    var inputObject = kind.a;
                    return _Utils_update(schema, {
                        hn: $elm$core$Dict$insert_fn(name, inputObject, schema.hn)
                    });
                case 5:
                    var _enum = kind.a;
                    return _Utils_update(schema, {
                        cQ: $elm$core$Dict$insert_fn(name, _enum, schema.cQ)
                    });
                case 6:
                    var union = kind.a;
                    return _Utils_update(schema, {
                        h8: $elm$core$Dict$insert_fn(name, union, schema.h8)
                    });
                default:
                    var _interface = kind.a;
                    return _Utils_update(schema, {
                        d_: $elm$core$Dict$insert_fn(name, _interface, schema.d_)
                    });
            }
        });
        return _Json_map1_fn(A2($elm$core$List$foldl, loop, $author$project$GraphQL$Schema$empty), $author$project$GraphQL$Schema$kinds(names));
    };
    var $author$project$GraphQL$Schema$Names_fn = function (queryName, mutationName) {
        return { eD: mutationName, e8: queryName };
    }, $author$project$GraphQL$Schema$Names = F2($author$project$GraphQL$Schema$Names_fn);
    var $author$project$GraphQL$Schema$apply_a0 = $elm$core$Basics$apR, $author$project$GraphQL$Schema$apply = $elm$json$Json$Decode$map2($author$project$GraphQL$Schema$apply_a0);
    var $elm$json$Json$Decode$null = _Json_decodeNull;
    var $author$project$GraphQL$Schema$namesDecoder = _Json_map2_fn($author$project$GraphQL$Schema$apply_a0, _Json_decodeField_fn("mutationType", $elm$json$Json$Decode$oneOf(_List_fromArray([
        _Json_map1_fn($elm$core$Maybe$Just, _Json_decodeField_fn("name", $elm$json$Json$Decode$string)),
        $elm$json$Json$Decode$null($elm$core$Maybe$Nothing)
    ]))), _Json_map2_fn($author$project$GraphQL$Schema$apply_a0, $elm$json$Json$Decode$at_fn(_List_fromArray(["queryType", "name"]), $elm$json$Json$Decode$string), $elm$json$Json$Decode$succeed($author$project$GraphQL$Schema$Names)));
    var $author$project$GraphQL$Schema$decoder = $elm$json$Json$Decode$oneOf(_List_fromArray([
        _Json_decodeField_fn("__schema", _Json_andThen_fn($author$project$GraphQL$Schema$grabTypes, $author$project$GraphQL$Schema$namesDecoder)),
        $elm$json$Json$Decode$at_fn(_List_fromArray(["data", "__schema"]), _Json_andThen_fn($author$project$GraphQL$Schema$grabTypes, $author$project$GraphQL$Schema$namesDecoder))
    ]));
    var $elm$json$Json$Encode$list_fn = function (func, entries) {
        return _Json_wrap($elm$core$List$foldl_fn(_Json_addEntry(func), _Json_emptyArray(0), entries));
    }, $elm$json$Json$Encode$list = F2($elm$json$Json$Encode$list_fn);
    var $elm$json$Json$Encode$object = function (pairs) {
        return _Json_wrap($elm$core$List$foldl_fn_unwrapped(function (_v0, obj) {
            var k = _v0.a;
            var v = _v0.b;
            return _Json_addField_fn(k, v, obj);
        }, _Json_emptyObject(0), pairs));
    };
    var $elm$json$Json$Encode$string = _Json_wrap;
    var $author$project$Gen$onFailureSend = _Platform_outgoingPort("onFailureSend", $elm$json$Json$Encode$list(function ($) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("description", $elm$json$Json$Encode$string($.bd)),
            _Utils_Tuple2("title", $elm$json$Json$Encode$string($.bI))
        ]));
    }));
    var $author$project$Gen$error = function (errs) {
        return $author$project$Gen$onFailureSend(errs);
    };
    var $author$project$Generate$Flags = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$Generate$Schema_fn = function (a, b) {
        return { $: 1, a: a, b: b };
    }, $author$project$Generate$Schema = F2($author$project$Generate$Schema_fn);
    var $author$project$Generate$SchemaUrl = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$Generate$andField_fn = function (name, fieldDecoder, baseDecoder) {
        return _Json_map2_fn(F2(function (a, fn) {
            return fn(a);
        }), _Json_decodeField_fn(name, fieldDecoder), baseDecoder);
    }, $author$project$Generate$andField = F3($author$project$Generate$andField_fn);
    var $author$project$Generate$flagsDecoder = $author$project$Generate$andField_fn("existingEnumDefinitions", $elm$json$Json$Decode$maybe($elm$json$Json$Decode$string), $author$project$Generate$andField_fn("generatePlatform", $elm$json$Json$Decode$bool, $author$project$Generate$andField_fn("schema", $elm$json$Json$Decode$oneOf(_List_fromArray([
        _Json_map1_fn($author$project$Generate$SchemaUrl, _Json_andThen_fn(function (str) {
            return _String_startsWith_fn("http", str) ? $elm$json$Json$Decode$succeed(str) : $elm$json$Json$Decode$fail("Schema Url lacks http-based protocol");
        }, $elm$json$Json$Decode$string)),
        _Json_map2_fn($author$project$Generate$Schema, $elm$json$Json$Decode$value, $author$project$GraphQL$Schema$decoder)
    ])), $author$project$Generate$andField_fn("gql", $elm$json$Json$Decode$list(_Json_map2_fn(F2(function (path, src) {
        return { hH: path, bE: src };
    }), _Json_decodeField_fn("path", $elm$json$Json$Decode$string), _Json_decodeField_fn("src", $elm$json$Json$Decode$string))), $author$project$Generate$andField_fn("init", $elm$json$Json$Decode$bool, $author$project$Generate$andField_fn("header", $elm$json$Json$Decode$list($elm$json$Json$Decode$string), $author$project$Generate$andField_fn("namespace", $elm$json$Json$Decode$string, $author$project$Generate$andField_fn("elmBaseSchema", $elm$json$Json$Decode$list($elm$json$Json$Decode$string), $author$project$Generate$andField_fn("gqlDir", $elm$json$Json$Decode$list($elm$json$Json$Decode$string), $elm$json$Json$Decode$succeed(F9(function (gqlDir, elmBaseSchema, namespace, header, isInit, gql, schemaUrl, genPlatform, existingEnums) {
        return $author$project$Generate$Flags({ bf: elmBaseSchema, bh: existingEnums, bl: genPlatform, bm: gql, al: gqlDir, bn: header, bp: isInit, bv: namespace, hQ: schemaUrl });
    })))))))))));
    var $author$project$Generate$addOutputDir_fn = function (pieces, file) {
        return _Utils_update(file, {
            hH: $elm$core$String$join_fn("/", pieces) + ("/" + file.hH)
        });
    }, $author$project$Generate$addOutputDir = F2($author$project$Generate$addOutputDir_fn);
    var $author$project$Gen$onSuccessSend = _Platform_outgoingPort("onSuccessSend", $elm$json$Json$Encode$list(function ($) {
        return $elm$json$Json$Encode$object(_List_fromArray([
            _Utils_Tuple2("contents", $elm$json$Json$Encode$string($.gW)),
            _Utils_Tuple2("path", $elm$json$Json$Encode$string($.hH)),
            _Utils_Tuple2("warnings", $elm$json$Json$Encode$list(function ($) {
                return $elm$json$Json$Encode$object(_List_fromArray([
                    _Utils_Tuple2("declaration", $elm$json$Json$Encode$string($.gX)),
                    _Utils_Tuple2("warning", $elm$json$Json$Encode$string($.id))
                ]));
            })($.ie))
        ]));
    }));
    var $author$project$Gen$files = function (list) {
        return $author$project$Gen$onSuccessSend(list);
    };
    var $stil4m$elm_syntax$Elm$Syntax$Declaration$AliasDeclaration = function (a) {
        return { $: 1, a: a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$Declaration = function (a) {
        return { $: 0, a: a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$NotExposed = { $: 0 };
    var $elm$core$String$length = _String_length;
    var $elm$core$String$slice = _String_slice;
    var $elm$core$String$dropLeft_fn = function (n, string) {
        return (n < 1) ? string : _String_slice_fn(n, $elm$core$String$length(string), string);
    }, $elm$core$String$dropLeft = F2($elm$core$String$dropLeft_fn);
    var $elm$core$String$left_fn = function (n, string) {
        return (n < 1) ? "" : _String_slice_fn(0, n, string);
    }, $elm$core$String$left = F2($elm$core$String$left_fn);
    var $elm$core$String$toUpper = _String_toUpper;
    var $mdgriffith$elm_codegen$Internal$Format$formatType = function (str) {
        return _Utils_ap($elm$core$String$toUpper($elm$core$String$left_fn(1, str)), $elm$core$String$dropLeft_fn(1, str));
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports = function (_v0) {
        var details = _v0;
        return details.d;
    };
    var $elm$core$Basics$composeL_fn = function (g, f, x) {
        return g(f(x));
    }, $elm$core$Basics$composeL = F3($elm$core$Basics$composeL_fn);
    var $elm$core$List$append_fn = function (xs, ys) {
        var tmp = _List_Cons(undefined, _List_Nil);
        var end = tmp;
        for (; xs.b; xs = xs.b) {
            var next = _List_Cons(xs.a, _List_Nil);
            end.b = next;
            end = next;
        }
        end.b = ys;
        return tmp.b;
    }, $elm$core$List$append = F2($elm$core$List$append_fn);
    var $elm$core$List$concat = function (lists) {
        if (!lists.b) {
            return _List_Nil;
        }
        var tmp = _List_Cons(undefined, _List_Nil);
        var end = tmp;
        for (; lists.b.b; lists = lists.b) {
            var xs = lists.a;
            for (; xs.b; xs = xs.b) {
                var next = _List_Cons(xs.a, _List_Nil);
                end.b = next;
                end = next;
            }
        }
        end.b = lists.a;
        return tmp.b;
    };
    var $elm$core$List$map_fn = function (f, xs) {
        var tmp = _List_Cons(undefined, _List_Nil);
        var end = tmp;
        for (; xs.b; xs
            = xs.b) {
            var next = _List_Cons(f(xs.a), _List_Nil);
            end.b = next;
            end = next;
        }
        return tmp.b;
    }, $elm$core$List$map = F2($elm$core$List$map_fn);
    var $elm$core$List$concatMap_fn = function (f, lists) {
        if (!lists.b) {
            return _List_Nil;
        }
        var tmp = _List_Cons(undefined, _List_Nil);
        var end = tmp;
        for (; lists.b.
            b; lists = lists.b) {
            var xs = f(lists.a);
            for (; xs.b; xs = xs.b) {
                var next = _List_Cons(xs.a, _List_Nil);
                end.b = next;
                end = next;
            }
        }
        end.b = f(lists.a);
        return tmp.b;
    }, $elm$core$List$concatMap = F2($elm$core$List$concatMap_fn);
    var $stil4m$elm_syntax$Elm$Syntax$Node$value = function (_v0) {
        var v = _v0.b;
        return v;
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$denode = $stil4m$elm_syntax$Elm$Syntax$Node$value;
    var $mdgriffith$elm_codegen$Internal$Compiler$getGenericsHelper = function (ann) {
        switch (ann.$) {
            case 0:
                var str = ann.a;
                return _List_fromArray([str]);
            case 1:
                var modName = ann.a;
                var anns = ann.b;
                return $elm$core$List$concatMap_fn(A2($elm$core$Basics$composeL, $mdgriffith$elm_codegen$Internal$Compiler$getGenericsHelper, $mdgriffith$elm_codegen$Internal$Compiler$denode), anns);
            case 2:
                return _List_Nil;
            case 3:
                var tupled = ann.a;
                return $elm$core$List$concatMap_fn(A2($elm$core$Basics$composeL, $mdgriffith$elm_codegen$Internal$Compiler$getGenericsHelper, $mdgriffith$elm_codegen$Internal$Compiler$denode), tupled);
            case 4:
                var recordDefinition = ann.a;
                return $elm$core$List$concatMap_fn(function (nodedField) {
                    var _v1 = $mdgriffith$elm_codegen$Internal$Compiler$denode(nodedField);
                    var name = _v1.a;
                    var field = _v1.b;
                    return $mdgriffith$elm_codegen$Internal$Compiler$getGenericsHelper($mdgriffith$elm_codegen$Internal$Compiler$denode(field));
                }, recordDefinition);
            case 5:
                var recordName = ann.a;
                var recordDefinition = ann.b;
                return $elm$core$List$concatMap_fn(function (nodedField) {
                    var _v2 = $mdgriffith$elm_codegen$Internal$Compiler$denode(nodedField);
                    var name = _v2.a;
                    var field = _v2.b;
                    return $mdgriffith$elm_codegen$Internal$Compiler$getGenericsHelper($mdgriffith$elm_codegen$Internal$Compiler$denode(field));
                }, $mdgriffith$elm_codegen$Internal$Compiler$denode(recordDefinition));
            default:
                var one = ann.a;
                var two = ann.b;
                return $elm$core$List$concatMap_fn($mdgriffith$elm_codegen$Internal$Compiler$getGenericsHelper, _List_fromArray([
                    $mdgriffith$elm_codegen$Internal$Compiler$denode(one),
                    $mdgriffith$elm_codegen$Internal$Compiler$denode(two)
                ]));
        }
    };
    var $elm$core$List$member_fn = function (x, xs) {
        return $elm$core$List$any_fn(function (a) {
            return _Utils_eq(a, x);
        }, xs);
    }, $elm$core$List$member = F2($elm$core$List$member_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$uniqueHelp_fn = function (f, existing, remaining, accumulator) {
        uniqueHelp: while (true) {
            if (!remaining.b) {
                return $elm$core$List$reverse(accumulator);
            }
            else {
                var first = remaining.a;
                var rest = remaining.b;
                var computedFirst = f(first);
                if ($elm$core$List$member_fn(computedFirst, existing)) {
                    var $temp$f = f, $temp$existing = existing, $temp$remaining = rest, $temp$accumulator = accumulator;
                    f = $temp$f;
                    existing = $temp$existing;
                    remaining = $temp$remaining;
                    accumulator = $temp$accumulator;
                    continue uniqueHelp;
                }
                else {
                    var $temp$f = f, $temp$existing = _List_Cons(computedFirst, existing), $temp$remaining = rest, $temp$accumulator = _List_Cons(first, accumulator);
                    f = $temp$f;
                    existing = $temp$existing;
                    remaining = $temp$remaining;
                    accumulator = $temp$accumulator;
                    continue uniqueHelp;
                }
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$uniqueHelp = F4($mdgriffith$elm_codegen$Internal$Compiler$uniqueHelp_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$unique = function (list) {
        return $mdgriffith$elm_codegen$Internal$Compiler$uniqueHelp_fn($elm$core$Basics$identity, _List_Nil, list, _List_Nil);
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$getGenerics = function (_v0) {
        var details = _v0;
        return $mdgriffith$elm_codegen$Internal$Compiler$unique($mdgriffith$elm_codegen$Internal$Compiler$getGenericsHelper(details.a));
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation = function (_v0) {
        var details = _v0;
        return details.a;
    };
    var $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $stil4m$elm_syntax$Elm$Syntax$Node$Node = F2($stil4m$elm_syntax$Elm$Syntax$Node$Node_fn);
    var $stil4m$elm_syntax$Elm$Syntax$Range$emptyRange = {
        bg: { ay: 0, fv: 0 },
        bF: { ay: 0, fv: 0 }
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$nodify = function (exp) {
        return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, exp);
    };
    var $mdgriffith$elm_codegen$Elm$alias_fn = function (name, innerAnnotation) {
        return $mdgriffith$elm_codegen$Internal$Compiler$Declaration({
            g1: $elm$core$Maybe$Nothing,
            ah: $mdgriffith$elm_codegen$Internal$Compiler$NotExposed,
            d: $mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports(innerAnnotation),
            c: name,
            h2: function (index) {
                return {
                    ag: _List_Nil,
                    gX: $stil4m$elm_syntax$Elm$Syntax$Declaration$AliasDeclaration({
                        be: $elm$core$Maybe$Nothing,
                        dz: $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$nodify, $mdgriffith$elm_codegen$Internal$Compiler$getGenerics(innerAnnotation)),
                        c: $mdgriffith$elm_codegen$Internal$Compiler$nodify($mdgriffith$elm_codegen$Internal$Format$formatType(name)),
                        a6: $mdgriffith$elm_codegen$Internal$Compiler$nodify($mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation(innerAnnotation))
                    }),
                    id: $elm$core$Maybe$Nothing
                };
            }
        });
    }, $mdgriffith$elm_codegen$Elm$alias = F2($mdgriffith$elm_codegen$Elm$alias_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$Annotation = $elm$core$Basics$identity;
    var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed_fn = function (a, b) {
        return { $: 1, a: a, b: b };
    }, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed = F2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases = $elm$core$Dict$empty;
    var $mdgriffith$elm_codegen$Elm$Annotation$getAliases = function (_v0) {
        var ann = _v0;
        return ann.gJ;
    };
    var $elm$core$Dict$foldl_fn = function (func, acc, dict) {
        foldl: while (true) {
            if (dict.$ === -2) {
                return acc;
            }
            else {
                var key = dict.b;
                var value = dict.c;
                var left = dict.d;
                var right = dict.e;
                var $temp$func = func, $temp$acc = A3(func, key, value, $elm$core$Dict$foldl_fn(func, acc, left)), $temp$dict = right;
                func = $temp$func;
                acc = $temp$acc;
                dict = $temp$dict;
                continue foldl;
            }
        }
    }, $elm$core$Dict$foldl_fn_unwrapped = function (func, acc, dict) {
        foldl: while (true) {
            if (dict.$ === -2) {
                return acc;
            }
            else {
                var key = dict.b;
                var value = dict.c;
                var left = dict.d;
                var right = dict.e;
                var $temp$func = func, $temp$acc = func(key, value, $elm$core$Dict$foldl_fn_unwrapped(func, acc, left)), $temp$dict = right;
                func = $temp$func;
                acc = $temp$acc;
                dict = $temp$dict;
                continue foldl;
            }
        }
    }, $elm$core$Dict$foldl = F3($elm$core$Dict$foldl_fn);
    var $elm$core$Dict$union_fn = function (t1, t2) {
        return $elm$core$Dict$foldl_fn($elm$core$Dict$insert, t2, t1);
    }, $elm$core$Dict$union = F2($elm$core$Dict$union_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$mergeAliases = $elm$core$Dict$union;
    var $mdgriffith$elm_codegen$Internal$Compiler$nodifyAll_a0 = $mdgriffith$elm_codegen$Internal$Compiler$nodify, $mdgriffith$elm_codegen$Internal$Compiler$nodifyAll = $elm$core$List$map($mdgriffith$elm_codegen$Internal$Compiler$nodifyAll_a0);
    var $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn = function (mod, name, args) {
        return {
            gJ: $elm$core$List$foldl_fn_unwrapped(function (ann, aliases) {
                return $elm$core$Dict$union_fn($mdgriffith$elm_codegen$Elm$Annotation$getAliases(ann), aliases);
            }, $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, args),
            a: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed_fn($mdgriffith$elm_codegen$Internal$Compiler$nodify(_Utils_Tuple2(mod, $mdgriffith$elm_codegen$Internal$Format$formatType(name))), $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$nodifyAll_a0, $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation, args))),
            d: _List_Cons(mod, $elm$core$List$concatMap_fn($mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports, args))
        };
    }, $mdgriffith$elm_codegen$Elm$Annotation$namedWith = F3($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn);
    var $author$project$Gen$GraphQL$Engine$annotation_ = {
        b5: function (argumentArg0) {
            return $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["GraphQL", "Engine"]), "Argument", _List_fromArray([argumentArg0]));
        },
        cT: $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["GraphQL", "Engine"]), "Error", _List_Nil),
        bo: function (inputObjectArg0) {
            return $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["GraphQL", "Engine"]), "InputObject", _List_fromArray([inputObjectArg0]));
        },
        bu: $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["GraphQL", "Engine"]), "Mutation", _List_Nil),
        e$: function (optionArg0) {
            return $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["GraphQL", "Engine"]), "Option", _List_fromArray([optionArg0]));
        },
        bz: function (optionalArg0) {
            return $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["GraphQL", "Engine"]), "Optional", _List_fromArray([optionalArg0]));
        },
        bC: $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["GraphQL", "Engine"]), "Query", _List_Nil),
        hN: function (requestArg0) {
            return $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["GraphQL", "Engine"]), "Request", _List_fromArray([requestArg0]));
        },
        hT: F2(function (selectionArg0, selectionArg1) {
            return $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["GraphQL", "Engine"]), "Selection", _List_fromArray([selectionArg0, selectionArg1]));
        })
    };
    var $author$project$Gen$Platform$Cmd$annotation_ = {
        gR: function (cmdArg0) {
            return $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Cmd", _List_fromArray([cmdArg0]));
        }
    };
    var $author$project$Gen$Result$annotation_ = {
        fs: F2(function (resultArg0, resultArg1) {
            return $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Result", _List_fromArray([resultArg0, resultArg1]));
        })
    };
    var $stil4m$elm_syntax$Elm$Syntax$Expression$Application = function (a) {
        return { $: 1, a: a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$FunctionAppliedToTooManyArgs_fn = function (a, b) {
        return { $: 3, a: a, b: b };
    }, $mdgriffith$elm_codegen$Internal$Compiler$FunctionAppliedToTooManyArgs = F2($mdgriffith$elm_codegen$Internal$Compiler$FunctionAppliedToTooManyArgs_fn);
    var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType = function (a) {
        return { $: 0, a: a };
    };
    var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord_fn = function (a, b) {
        return { $: 5, a: a, b: b };
    }, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord = F2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$containsFieldByName_fn = function (_v0, _v2) {
        var _v1 = _v0.a;
        var oneName = _v1.b;
        var _v3 = _v2.a;
        var twoName = _v3.b;
        return _Utils_eq(oneName, twoName);
    }, $mdgriffith$elm_codegen$Internal$Compiler$containsFieldByName = F2($mdgriffith$elm_codegen$Internal$Compiler$containsFieldByName_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$mergeFieldLists_fn = function (fieldOne, fieldTwo) {
        return $elm$core$List$foldl_fn_unwrapped(function (_new, existing) {
            var newField = _new.b;
            return $elm$core$List$any_fn(A2($elm$core$Basics$composeL, $mdgriffith$elm_codegen$Internal$Compiler$containsFieldByName(newField), $mdgriffith$elm_codegen$Internal$Compiler$denode), existing) ? existing : _List_Cons(_new, existing);
        }, fieldOne, fieldTwo);
    }, $mdgriffith$elm_codegen$Internal$Compiler$mergeFieldLists = F2($mdgriffith$elm_codegen$Internal$Compiler$mergeFieldLists_fn);
    var $elm$core$Dict$getMin = function (dict) {
        getMin: while (true) {
            if ((dict.$ === -1) && (dict.d.$ === -1)) {
                var left = dict.d;
                var $temp$dict = left;
                dict = $temp$dict;
                continue getMin;
            }
            else {
                return dict;
            }
        }
    };
    var $elm$core$Dict$moveRedLeft = function (dict) {
        if (((dict.$ === -1) && (dict.d.$ === -1)) && (dict.e.$ === -1)) {
            if ((dict.e.d.$ === -1) && (!dict.e.d.a)) {
                var clr = dict.a;
                var k = dict.b;
                var v = dict.c;
                var _v1 = dict.d;
                var lClr = _v1.a;
                var lK = _v1.b;
                var lV = _v1.c;
                var lLeft = _v1.d;
                var lRight = _v1.e;
                var _v2 = dict.e;
                var rClr = _v2.a;
                var rK = _v2.b;
                var rV = _v2.c;
                var rLeft = _v2.d;
                var _v3 = rLeft.a;
                var rlK = rLeft.b;
                var rlV = rLeft.c;
                var rlL = rLeft.d;
                var rlR = rLeft.e;
                var rRight = _v2.e;
                return $elm$core$Dict$RBNode_elm_builtin_fn(0, rlK, rlV, $elm$core$Dict$RBNode_elm_builtin_fn(1, k, v, $elm$core$Dict$RBNode_elm_builtin_fn(0, lK, lV, lLeft, lRight), rlL), $elm$core$Dict$RBNode_elm_builtin_fn(1, rK, rV, rlR, rRight));
            }
            else {
                var clr = dict.a;
                var k = dict.b;
                var v = dict.c;
                var _v4 = dict.d;
                var lClr = _v4.a;
                var lK = _v4.b;
                var lV = _v4.c;
                var lLeft = _v4.d;
                var lRight = _v4.e;
                var _v5 = dict.e;
                var rClr = _v5.a;
                var rK = _v5.b;
                var rV = _v5.c;
                var rLeft = _v5.d;
                var rRight = _v5.e;
                if (clr === 1) {
                    return $elm$core$Dict$RBNode_elm_builtin_fn(1, k, v, $elm$core$Dict$RBNode_elm_builtin_fn(0, lK, lV, lLeft, lRight), $elm$core$Dict$RBNode_elm_builtin_fn(0, rK, rV, rLeft, rRight));
                }
                else {
                    return $elm$core$Dict$RBNode_elm_builtin_fn(1, k, v, $elm$core$Dict$RBNode_elm_builtin_fn(0, lK, lV, lLeft, lRight), $elm$core$Dict$RBNode_elm_builtin_fn(0, rK, rV, rLeft, rRight));
                }
            }
        }
        else {
            return dict;
        }
    };
    var $elm$core$Dict$moveRedRight = function (dict) {
        if (((dict.$ === -1) && (dict.d.$ === -1)) && (dict.e.$ === -1)) {
            if ((dict.d.d.$ === -1) && (!dict.d.d.a)) {
                var clr = dict.a;
                var k = dict.b;
                var v = dict.c;
                var _v1 = dict.d;
                var lClr = _v1.a;
                var lK = _v1.b;
                var lV = _v1.c;
                var _v2 = _v1.d;
                var _v3 = _v2.a;
                var llK = _v2.b;
                var llV = _v2.c;
                var llLeft = _v2.d;
                var llRight = _v2.e;
                var lRight = _v1.e;
                var _v4 = dict.e;
                var rClr = _v4.a;
                var rK = _v4.b;
                var rV = _v4.c;
                var rLeft = _v4.d;
                var rRight = _v4.e;
                return $elm$core$Dict$RBNode_elm_builtin_fn(0, lK, lV, $elm$core$Dict$RBNode_elm_builtin_fn(1, llK, llV, llLeft, llRight), $elm$core$Dict$RBNode_elm_builtin_fn(1, k, v, lRight, $elm$core$Dict$RBNode_elm_builtin_fn(0, rK, rV, rLeft, rRight)));
            }
            else {
                var clr = dict.a;
                var k = dict.b;
                var v = dict.c;
                var _v5 = dict.d;
                var lClr = _v5.a;
                var lK = _v5.b;
                var lV = _v5.c;
                var lLeft = _v5.d;
                var lRight = _v5.e;
                var _v6 = dict.e;
                var rClr = _v6.a;
                var rK = _v6.b;
                var rV = _v6.c;
                var rLeft = _v6.d;
                var rRight = _v6.e;
                if (clr === 1) {
                    return $elm$core$Dict$RBNode_elm_builtin_fn(1, k, v, $elm$core$Dict$RBNode_elm_builtin_fn(0, lK, lV, lLeft, lRight), $elm$core$Dict$RBNode_elm_builtin_fn(0, rK, rV, rLeft, rRight));
                }
                else {
                    return $elm$core$Dict$RBNode_elm_builtin_fn(1, k, v, $elm$core$Dict$RBNode_elm_builtin_fn(0, lK, lV, lLeft, lRight), $elm$core$Dict$RBNode_elm_builtin_fn(0, rK, rV, rLeft, rRight));
                }
            }
        }
        else {
            return dict;
        }
    };
    var $elm$core$Dict$removeHelpPrepEQGT_fn = function (targetKey, dict, color, key, value, left, right) {
        if ((left.$ === -1) && (!left.a)) {
            var _v1 = left.a;
            var lK = left.b;
            var lV = left.c;
            var lLeft = left.d;
            var lRight = left.e;
            return $elm$core$Dict$RBNode_elm_builtin_fn(color, lK, lV, lLeft, $elm$core$Dict$RBNode_elm_builtin_fn(0, key, value, lRight, right));
        }
        else {
            _v2$2: while (true) {
                if ((right.$ === -1) && (right.a === 1)) {
                    if (right.d.$ === -1) {
                        if (right.d.a === 1) {
                            var _v3 = right.a;
                            var _v4 = right.d;
                            var _v5 = _v4.a;
                            return $elm$core$Dict$moveRedRight(dict);
                        }
                        else {
                            break _v2$2;
                        }
                    }
                    else {
                        var _v6 = right.a;
                        var _v7 = right.d;
                        return $elm$core$Dict$moveRedRight(dict);
                    }
                }
                else {
                    break _v2$2;
                }
            }
            return dict;
        }
    }, $elm$core$Dict$removeHelpPrepEQGT = F7($elm$core$Dict$removeHelpPrepEQGT_fn);
    var $elm$core$Dict$removeMin = function (dict) {
        if ((dict.$ === -1) && (dict.d.$ === -1)) {
            var color = dict.a;
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var lColor = left.a;
            var lLeft = left.d;
            var right = dict.e;
            if (lColor === 1) {
                if ((lLeft.$ === -1) && (!lLeft.a)) {
                    var _v3 = lLeft.a;
                    return $elm$core$Dict$RBNode_elm_builtin_fn(color, key, value, $elm$core$Dict$removeMin(left), right);
                }
                else {
                    var _v4 = $elm$core$Dict$moveRedLeft(dict);
                    if (_v4.$ === -1) {
                        var nColor = _v4.a;
                        var nKey = _v4.b;
                        var nValue = _v4.c;
                        var nLeft = _v4.d;
                        var nRight = _v4.e;
                        return $elm$core$Dict$balance_fn(nColor, nKey, nValue, $elm$core$Dict$removeMin(nLeft), nRight);
                    }
                    else {
                        return $elm$core$Dict$RBEmpty_elm_builtin;
                    }
                }
            }
            else {
                return $elm$core$Dict$RBNode_elm_builtin_fn(color, key, value, $elm$core$Dict$removeMin(left), right);
            }
        }
        else {
            return $elm$core$Dict$RBEmpty_elm_builtin;
        }
    };
    var $elm$core$Dict$removeHelp_fn = function (targetKey, dict) {
        if (dict.$ === -2) {
            return $elm$core$Dict$RBEmpty_elm_builtin;
        }
        else {
            var color = dict.a;
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            if (_Utils_cmp(targetKey, key) < 0) {
                if ((left.$ === -1) && (left.a === 1)) {
                    var _v4 = left.a;
                    var lLeft = left.d;
                    if ((lLeft.$ === -1) && (!lLeft.a)) {
                        var _v6 = lLeft.a;
                        return $elm$core$Dict$RBNode_elm_builtin_fn(color, key, value, $elm$core$Dict$removeHelp_fn(targetKey, left), right);
                    }
                    else {
                        var _v7 = $elm$core$Dict$moveRedLeft(dict);
                        if (_v7.$ === -1) {
                            var nColor = _v7.a;
                            var nKey = _v7.b;
                            var nValue = _v7.c;
                            var nLeft = _v7.d;
                            var nRight = _v7.e;
                            return $elm$core$Dict$balance_fn(nColor, nKey, nValue, $elm$core$Dict$removeHelp_fn(targetKey, nLeft), nRight);
                        }
                        else {
                            return $elm$core$Dict$RBEmpty_elm_builtin;
                        }
                    }
                }
                else {
                    return $elm$core$Dict$RBNode_elm_builtin_fn(color, key, value, $elm$core$Dict$removeHelp_fn(targetKey, left), right);
                }
            }
            else {
                return $elm$core$Dict$removeHelpEQGT_fn(targetKey, $elm$core$Dict$removeHelpPrepEQGT_fn(targetKey, dict, color, key, value, left, right));
            }
        }
    }, $elm$core$Dict$removeHelp = F2($elm$core$Dict$removeHelp_fn);
    var $elm$core$Dict$removeHelpEQGT_fn = function (targetKey, dict) {
        if (dict.$ === -1) {
            var color = dict.a;
            var key = dict.b;
            var value = dict.c;
            var left = dict.d;
            var right = dict.e;
            if (_Utils_eq(targetKey, key)) {
                var _v1 = $elm$core$Dict$getMin(right);
                if (_v1.$ === -1) {
                    var minKey = _v1.b;
                    var minValue = _v1.c;
                    return $elm$core$Dict$balance_fn(color, minKey, minValue, left, $elm$core$Dict$removeMin(right));
                }
                else {
                    return $elm$core$Dict$RBEmpty_elm_builtin;
                }
            }
            else {
                return $elm$core$Dict$balance_fn(color, key, value, left, $elm$core$Dict$removeHelp_fn(targetKey, right));
            }
        }
        else {
            return $elm$core$Dict$RBEmpty_elm_builtin;
        }
    }, $elm$core$Dict$removeHelpEQGT = F2($elm$core$Dict$removeHelpEQGT_fn);
    var $elm$core$Dict$remove_fn = function (key, dict) {
        var _v0 = $elm$core$Dict$removeHelp_fn(key, dict);
        if ((_v0.$ === -1) && (!_v0.a)) {
            var _v1 = _v0.a;
            var k = _v0.b;
            var v = _v0.c;
            var l = _v0.d;
            var r = _v0.e;
            return $elm$core$Dict$RBNode_elm_builtin_fn(1, k, v, l, r);
        }
        else {
            var x = _v0;
            return x;
        }
    }, $elm$core$Dict$remove = F2($elm$core$Dict$remove_fn);
    var $elm$core$Dict$update_fn = function (targetKey, alter, dictionary) {
        var _v0 = alter($elm$core$Dict$get_fn(targetKey, dictionary));
        if (!_v0.$) {
            var value = _v0.a;
            return $elm$core$Dict$insert_fn(targetKey, value, dictionary);
        }
        else {
            return $elm$core$Dict$remove_fn(targetKey, dictionary);
        }
    }, $elm$core$Dict$update = F3($elm$core$Dict$update_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$addInference_fn = function (key, value, infs) {
        return $elm$core$Dict$update_fn(key, function (maybeValue) {
            if (maybeValue.$ === 1) {
                return $elm$core$Maybe$Just(value);
            }
            else {
                if (maybeValue.a.$ === 5) {
                    var _v1 = maybeValue.a;
                    var _v2 = _v1.a;
                    var range = _v2.a;
                    var recordName = _v2.b;
                    var _v3 = _v1.b;
                    var fieldRange = _v3.a;
                    var fields = _v3.b;
                    if (value.$ === 5) {
                        var _v5 = value.a;
                        var existingRange = _v5.a;
                        var existingRecordName = _v5.b;
                        var _v6 = value.b;
                        var existingFieldRange = _v6.a;
                        var existingFields = _v6.b;
                        return $elm$core$Maybe$Just($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord_fn($stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, recordName), $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(fieldRange, $mdgriffith$elm_codegen$Internal$Compiler$mergeFieldLists_fn(fields, existingFields))));
                    }
                    else {
                        return maybeValue;
                    }
                }
                else {
                    var existing = maybeValue.a;
                    return $elm$core$Maybe$Just(existing);
                }
            }
        }, infs);
    }, $mdgriffith$elm_codegen$Internal$Compiler$addInference = F3($mdgriffith$elm_codegen$Internal$Compiler$addInference_fn);
    var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation_fn = function (a, b) {
        return { $: 6, a: a, b: b };
    }, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation = F2($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$makeFunctionReversedHelper_fn = function (last, reversedArgs) {
        makeFunctionReversedHelper: while (true) {
            if (!reversedArgs.b) {
                return last;
            }
            else {
                if (!reversedArgs.b.b) {
                    var penUlt = reversedArgs.a;
                    return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation_fn($stil4m$elm_syntax$Elm$Syntax$Node$Node_fn($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, penUlt), $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, last));
                }
                else {
                    var penUlt = reversedArgs.a;
                    var remain = reversedArgs.b;
                    var $temp$last = $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation_fn($stil4m$elm_syntax$Elm$Syntax$Node$Node_fn($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, penUlt), $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, last)), $temp$reversedArgs = remain;
                    last = $temp$last;
                    reversedArgs = $temp$reversedArgs;
                    continue makeFunctionReversedHelper;
                }
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$makeFunctionReversedHelper = F2($mdgriffith$elm_codegen$Internal$Compiler$makeFunctionReversedHelper_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$makeFunction_fn = function (result, args) {
        return $mdgriffith$elm_codegen$Internal$Compiler$makeFunctionReversedHelper_fn(result, $elm$core$List$reverse(args));
    }, $mdgriffith$elm_codegen$Internal$Compiler$makeFunction = F2($mdgriffith$elm_codegen$Internal$Compiler$makeFunction_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$MismatchedTypeVariables = { $: 4 };
    var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record = function (a) {
        return { $: 4, a: a };
    };
    var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled = function (a) {
        return { $: 3, a: a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$UnableToUnify_fn = function (a, b) {
        return { $: 14, a: a, b: b };
    }, $mdgriffith$elm_codegen$Internal$Compiler$UnableToUnify = F2($mdgriffith$elm_codegen$Internal$Compiler$UnableToUnify_fn);
    var $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit = { $: 2 };
    var $elm$core$Set$Set_elm_builtin = $elm$core$Basics$identity;
    var $elm$core$Set$empty = $elm$core$Dict$empty;
    var $mdgriffith$elm_codegen$Internal$Compiler$formatAliasKey_fn = function (mod, name) {
        return $elm$core$String$join_fn(".", mod) + ("." + name);
    }, $mdgriffith$elm_codegen$Internal$Compiler$formatAliasKey = F2($mdgriffith$elm_codegen$Internal$Compiler$formatAliasKey_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$getAlias_fn = function (_v0, cache) {
        var _v1 = _v0.b;
        var modName = _v1.a;
        var name = _v1.b;
        return $elm$core$Dict$get_fn($mdgriffith$elm_codegen$Internal$Compiler$formatAliasKey_fn(modName, name), cache);
    }, $mdgriffith$elm_codegen$Internal$Compiler$getAlias = F2($mdgriffith$elm_codegen$Internal$Compiler$getAlias_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$CouldNotFindField = function (a) {
        return { $: 7, a: a };
    };
    var $elm$core$Basics$composeR_fn = function (f, g, x) {
        return g(f(x));
    }, $elm$core$Basics$composeR = F3($elm$core$Basics$composeR_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$getField_fn = function (name, val, fields, captured) {
        getField: while (true) {
            if (!fields.b) {
                return $elm$core$Result$Err($mdgriffith$elm_codegen$Internal$Compiler$CouldNotFindField({
                    g6: $elm$core$List$map_fn(A2($elm$core$Basics$composeR, $mdgriffith$elm_codegen$Internal$Compiler$denode, A2($elm$core$Basics$composeR, $elm$core$Tuple$first, $mdgriffith$elm_codegen$Internal$Compiler$denode)), captured),
                    c_: name
                }));
            }
            else {
                var top = fields.a;
                var remain = fields.b;
                var _v1 = $mdgriffith$elm_codegen$Internal$Compiler$denode(top);
                var topFieldName = _v1.a;
                var topFieldVal = _v1.b;
                var topName = $mdgriffith$elm_codegen$Internal$Compiler$denode(topFieldName);
                var topVal = $mdgriffith$elm_codegen$Internal$Compiler$denode(topFieldVal);
                if (_Utils_eq(topName, name)) {
                    return $elm$core$Result$Ok(_Utils_Tuple2(topVal, _Utils_ap(captured, remain)));
                }
                else {
                    var $temp$name = name, $temp$val = val, $temp$fields = remain, $temp$captured = _List_Cons(top, captured);
                    name = $temp$name;
                    val = $temp$val;
                    fields = $temp$fields;
                    captured = $temp$captured;
                    continue getField;
                }
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$getField = F4($mdgriffith$elm_codegen$Internal$Compiler$getField_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$isAppendable = function (annotation) {
        _v0$2: while (true) {
            if ((annotation.$ === 1) && (!annotation.a.b.a.b)) {
                switch (annotation.a.b.b) {
                    case "String":
                        var _v1 = annotation.a;
                        var _v2 = _v1.b;
                        return true;
                    case "List":
                        if (annotation.b.b && (!annotation.b.b.b)) {
                            var _v3 = annotation.a;
                            var _v4 = _v3.b;
                            var _v5 = annotation.b;
                            var _v6 = _v5.a;
                            var inner = _v6.b;
                            return true;
                        }
                        else {
                            break _v0$2;
                        }
                    default:
                        break _v0$2;
                }
            }
            else {
                break _v0$2;
            }
        }
        return false;
    };
    var $elm$core$Basics$not = _Basics_not;
    var $elm$core$List$all_fn = function (isOkay, list) {
        all: while (true) {
            if (!list.b) {
                return true;
            }
            else {
                var x = list.a;
                if (!isOkay(x)) {
                    return false;
                }
                list = list.b;
                continue all;
            }
        }
    }, $elm$core$List$all = F2($elm$core$List$all_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$isComparable = function (annotation) {
        isComparable: while (true) {
            _v0$6: while (true) {
                switch (annotation.$) {
                    case 1:
                        if (annotation.a.b.a.b) {
                            if (((annotation.a.b.a.a === "Char") && (!annotation.a.b.a.b.b)) && (annotation.a.b.b === "Char")) {
                                var _v5 = annotation.a;
                                var _v6 = _v5.b;
                                var _v7 = _v6.a;
                                return true;
                            }
                            else {
                                break _v0$6;
                            }
                        }
                        else {
                            switch (annotation.a.b.b) {
                                case "Int":
                                    var _v1 = annotation.a;
                                    var _v2 = _v1.b;
                                    return true;
                                case "Float":
                                    var _v3 = annotation.a;
                                    var _v4 = _v3.b;
                                    return true;
                                case "String":
                                    var _v8 = annotation.a;
                                    var _v9 = _v8.b;
                                    return true;
                                case "List":
                                    if (annotation.b.b && (!annotation.b.b.b)) {
                                        var _v10 = annotation.a;
                                        var _v11 = _v10.b;
                                        var _v12 = annotation.b;
                                        var _v13 = _v12.a;
                                        var inner = _v13.b;
                                        var $temp$annotation = inner;
                                        annotation = $temp$annotation;
                                        continue isComparable;
                                    }
                                    else {
                                        break _v0$6;
                                    }
                                default:
                                    break _v0$6;
                            }
                        }
                    case 3:
                        var innerList = annotation.a;
                        return $elm$core$List$all_fn(A2($elm$core$Basics$composeL, $mdgriffith$elm_codegen$Internal$Compiler$isComparable, $mdgriffith$elm_codegen$Internal$Compiler$denode), innerList);
                    default:
                        break _v0$6;
                }
            }
            return false;
        }
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$isNumber = function (annotation) {
        _v0$2: while (true) {
            if ((annotation.$ === 1) && (!annotation.a.b.a.b)) {
                switch (annotation.a.b.b) {
                    case "Int":
                        var _v1 = annotation.a;
                        var _v2 = _v1.b;
                        return true;
                    case "Float":
                        var _v3 = annotation.a;
                        var _v4 = _v3.b;
                        return true;
                    default:
                        break _v0$2;
                }
            }
            else {
                break _v0$2;
            }
        }
        return false;
    };
    var $elm$core$Bitwise$and = _Bitwise_and;
    var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
    var $elm$core$String$repeatHelp_fn = function (n, chunk, result) {
        return (n <= 0) ? result : $elm$core$String$repeatHelp_fn(n >> 1, _Utils_ap(chunk, chunk), (!(n & 1)) ? result : _Utils_ap(result, chunk));
    }, $elm$core$String$repeatHelp = F3($elm$core$String$repeatHelp_fn);
    var $elm$core$String$repeat_fn = function (n, chunk) {
        return $elm$core$String$repeatHelp_fn(n, chunk, "");
    }, $elm$core$String$repeat = F2($elm$core$String$repeat_fn);
    var $stil4m$structured_writer$StructuredWriter$asIndent = function (amount) {
        return $elm$core$String$repeat_fn(amount, " ");
    };
    var $elm$core$String$concat = function (strings) {
        return $elm$core$String$join_fn("", strings);
    };
    var $stil4m$structured_writer$StructuredWriter$writeIndented_fn = function (indent_, w) {
        switch (w.$) {
            case 0:
                var _v1 = w.a;
                var pre = _v1.a;
                var sep = _v1.b;
                var post = _v1.c;
                var differentLines = w.b;
                var items = w.c;
                var seperator = differentLines ? ("\n" + ($stil4m$structured_writer$StructuredWriter$asIndent(indent_) + sep)) : sep;
                return $elm$core$String$concat(_List_fromArray([
                    pre,
                    $elm$core$String$join_fn(seperator, $elm$core$List$map_fn(A2($elm$core$Basics$composeR, $elm$core$Basics$identity, $stil4m$structured_writer$StructuredWriter$writeIndented(indent_)), items)),
                    post
                ]));
            case 1:
                var items = w.a;
                return $elm$core$String$join_fn("\n" + $stil4m$structured_writer$StructuredWriter$asIndent(indent_), $elm$core$List$concatMap_fn(A2($elm$core$Basics$composeR, $stil4m$structured_writer$StructuredWriter$writeIndented(0), $elm$core$String$split("\n")), items));
            case 2:
                var s = w.a;
                return s;
            case 4:
                var n = w.a;
                var next = w.b;
                return _Utils_ap($stil4m$structured_writer$StructuredWriter$asIndent(n + indent_), $stil4m$structured_writer$StructuredWriter$writeIndented_fn(n + indent_, next));
            case 5:
                var items = w.a;
                return $elm$core$String$join_fn(" ", $elm$core$List$map_fn($stil4m$structured_writer$StructuredWriter$writeIndented(indent_), items));
            case 6:
                var items = w.a;
                return $elm$core$String$concat($elm$core$List$map_fn($stil4m$structured_writer$StructuredWriter$writeIndented(indent_), items));
            default:
                var x = w.a;
                var y = w.b;
                return _Utils_ap($stil4m$structured_writer$StructuredWriter$writeIndented_fn(indent_, x), $stil4m$structured_writer$StructuredWriter$writeIndented_fn(indent_, y));
        }
    }, $stil4m$structured_writer$StructuredWriter$writeIndented = F2($stil4m$structured_writer$StructuredWriter$writeIndented_fn);
    var $stil4m$structured_writer$StructuredWriter$write_a0 = 0, $stil4m$structured_writer$StructuredWriter$write = $stil4m$structured_writer$StructuredWriter$writeIndented($stil4m$structured_writer$StructuredWriter$write_a0);
    var $stil4m$elm_syntax$Elm$Writer$write = $stil4m$structured_writer$StructuredWriter$write;
    var $stil4m$structured_writer$StructuredWriter$Sep_fn = function (a, b, c) {
        return { $: 0, a: a, b: b, c: c };
    }, $stil4m$structured_writer$StructuredWriter$Sep = F3($stil4m$structured_writer$StructuredWriter$Sep_fn);
    var $stil4m$structured_writer$StructuredWriter$bracesComma_a0 = _Utils_Tuple3("{", ", ", "}"), $stil4m$structured_writer$StructuredWriter$bracesComma = $stil4m$structured_writer$StructuredWriter$Sep($stil4m$structured_writer$StructuredWriter$bracesComma_a0);
    var $stil4m$structured_writer$StructuredWriter$Joined = function (a) {
        return { $: 6, a: a };
    };
    var $stil4m$structured_writer$StructuredWriter$join = $stil4m$structured_writer$StructuredWriter$Joined;
    var $stil4m$structured_writer$StructuredWriter$parensComma_a0 = _Utils_Tuple3("(", ", ", ")"), $stil4m$structured_writer$StructuredWriter$parensComma = $stil4m$structured_writer$StructuredWriter$Sep($stil4m$structured_writer$StructuredWriter$parensComma_a0);
    var $elm$core$String$contains = _String_contains;
    var $stil4m$structured_writer$StructuredWriter$Str = function (a) {
        return { $: 2, a: a };
    };
    var $stil4m$structured_writer$StructuredWriter$string = $stil4m$structured_writer$StructuredWriter$Str;
    var $stil4m$elm_syntax$Elm$Writer$parensIfContainsSpaces = function (w) {
        return _String_contains_fn(" ", $stil4m$structured_writer$StructuredWriter$writeIndented_fn($stil4m$structured_writer$StructuredWriter$write_a0, w)) ? $stil4m$structured_writer$StructuredWriter$join(_List_fromArray([
            $stil4m$structured_writer$StructuredWriter$string("("),
            w,
            $stil4m$structured_writer$StructuredWriter$string(")")
        ])) : w;
    };
    var $elm$core$Tuple$second = function (_v0) {
        var y = _v0.b;
        return y;
    };
    var $stil4m$structured_writer$StructuredWriter$sepByComma_a0 = _Utils_Tuple3("", ", ", ""), $stil4m$structured_writer$StructuredWriter$sepByComma = $stil4m$structured_writer$StructuredWriter$Sep($stil4m$structured_writer$StructuredWriter$sepByComma_a0);
    var $stil4m$structured_writer$StructuredWriter$Spaced = function (a) {
        return { $: 5, a: a };
    };
    var $stil4m$structured_writer$StructuredWriter$spaced = $stil4m$structured_writer$StructuredWriter$Spaced;
    var $stil4m$elm_syntax$Elm$Writer$writeRecordField = function (_v4) {
        var _v5 = _v4.b;
        var name = _v5.a;
        var ref = _v5.b;
        return $stil4m$structured_writer$StructuredWriter$spaced(_List_fromArray([
            $stil4m$structured_writer$StructuredWriter$string($stil4m$elm_syntax$Elm$Syntax$Node$value(name)),
            $stil4m$structured_writer$StructuredWriter$string(":"),
            $stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation(ref)
        ]));
    };
    var $stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation = function (_v0) {
        var typeAnnotation = _v0.b;
        switch (typeAnnotation.$) {
            case 0:
                var s = typeAnnotation.a;
                return $stil4m$structured_writer$StructuredWriter$string(s);
            case 1:
                var moduleNameAndName = typeAnnotation.a;
                var args = typeAnnotation.b;
                var moduleName = $stil4m$elm_syntax$Elm$Syntax$Node$value(moduleNameAndName).a;
                var k = $stil4m$elm_syntax$Elm$Syntax$Node$value(moduleNameAndName).b;
                return $stil4m$structured_writer$StructuredWriter$spaced(_List_Cons($stil4m$structured_writer$StructuredWriter$string($elm$core$String$join_fn(".", _Utils_ap(moduleName, _List_fromArray([k])))), $elm$core$List$map_fn(A2($elm$core$Basics$composeR, $stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation, $stil4m$elm_syntax$Elm$Writer$parensIfContainsSpaces), args)));
            case 2:
                return $stil4m$structured_writer$StructuredWriter$string("()");
            case 3:
                var xs = typeAnnotation.a;
                return $stil4m$structured_writer$StructuredWriter$Sep_fn($stil4m$structured_writer$StructuredWriter$parensComma_a0, false, $elm$core$List$map_fn($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation, xs));
            case 4:
                var xs = typeAnnotation.a;
                return $stil4m$structured_writer$StructuredWriter$Sep_fn($stil4m$structured_writer$StructuredWriter$bracesComma_a0, false, $elm$core$List$map_fn($stil4m$elm_syntax$Elm$Writer$writeRecordField, xs));
            case 5:
                var name = typeAnnotation.a;
                var fields = typeAnnotation.b;
                return $stil4m$structured_writer$StructuredWriter$spaced(_List_fromArray([
                    $stil4m$structured_writer$StructuredWriter$string("{"),
                    $stil4m$structured_writer$StructuredWriter$string($stil4m$elm_syntax$Elm$Syntax$Node$value(name)),
                    $stil4m$structured_writer$StructuredWriter$string("|"),
                    $stil4m$structured_writer$StructuredWriter$Sep_fn($stil4m$structured_writer$StructuredWriter$sepByComma_a0, false, $elm$core$List$map_fn($stil4m$elm_syntax$Elm$Writer$writeRecordField, $stil4m$elm_syntax$Elm$Syntax$Node$value(fields))),
                    $stil4m$structured_writer$StructuredWriter$string("}")
                ]));
            default:
                var left = typeAnnotation.a;
                var right = typeAnnotation.b;
                var addParensForSubTypeAnnotation = function (type_) {
                    if (type_.b.$ === 6) {
                        var _v3 = type_.b;
                        return $stil4m$structured_writer$StructuredWriter$join(_List_fromArray([
                            $stil4m$structured_writer$StructuredWriter$string("("),
                            $stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation(type_),
                            $stil4m$structured_writer$StructuredWriter$string(")")
                        ]));
                    }
                    else {
                        return $stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation(type_);
                    }
                };
                return $stil4m$structured_writer$StructuredWriter$spaced(_List_fromArray([
                    addParensForSubTypeAnnotation(left),
                    $stil4m$structured_writer$StructuredWriter$string("->"),
                    addParensForSubTypeAnnotation(right)
                ]));
        }
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$checkRestrictions_fn = function (restrictions, type_) {
        switch (restrictions.$) {
            case 0:
                return $elm$core$Result$Ok(type_);
            case 5:
                var constraints = restrictions.a;
                return $elm$core$Result$Err($stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(type_))) + (" needs to be: " + ($elm$core$String$join_fn(", ", $elm$core$List$concatMap_fn(function (constraint) {
                    switch (constraint.$) {
                        case 0:
                            return _List_Nil;
                        case 5:
                            return _List_Nil;
                        case 1:
                            return _List_fromArray(["a number"]);
                        case 3:
                            return _List_fromArray(["comparable"]);
                        case 2:
                            return _List_fromArray(["appendable"]);
                        default:
                            return _List_fromArray(["appendable and comparable"]);
                    }
                }, constraints)) + "\n\nbut that's impossible!  Or Elm Codegen's s typechecker is off.")));
            case 1:
                return $mdgriffith$elm_codegen$Internal$Compiler$isNumber(type_) ? $elm$core$Result$Ok(type_) : $elm$core$Result$Err($stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(type_))) + " is not a number");
            case 3:
                return $mdgriffith$elm_codegen$Internal$Compiler$isComparable(type_) ? $elm$core$Result$Ok(type_) : $elm$core$Result$Err($stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(type_))) + " is not comparable.  Only Ints, Floats, Chars, Strings and Lists and Tuples of those things are comparable.");
            case 2:
                return $mdgriffith$elm_codegen$Internal$Compiler$isAppendable(type_) ? $elm$core$Result$Ok(type_) : $elm$core$Result$Err($stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(type_))) + " is not appendable.  Only Strings and Lists are appendable.");
            default:
                return ($mdgriffith$elm_codegen$Internal$Compiler$isComparable(type_) || $mdgriffith$elm_codegen$Internal$Compiler$isAppendable(type_)) ? $elm$core$Result$Ok(type_) : $elm$core$Result$Err($stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(type_))) + " is not appendable/comparable.  Only Strings and Lists are allowed here.");
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$checkRestrictions = F2($mdgriffith$elm_codegen$Internal$Compiler$checkRestrictions_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$NoRestrictions = { $: 0 };
    var $mdgriffith$elm_codegen$Internal$Compiler$IsAppendable = { $: 2 };
    var $mdgriffith$elm_codegen$Internal$Compiler$IsAppendableComparable = { $: 4 };
    var $mdgriffith$elm_codegen$Internal$Compiler$IsComparable = { $: 3 };
    var $mdgriffith$elm_codegen$Internal$Compiler$IsNumber = { $: 1 };
    var $mdgriffith$elm_codegen$Internal$Compiler$nameToRestrictions = function (name) {
        return _String_startsWith_fn("number", name) ? $mdgriffith$elm_codegen$Internal$Compiler$IsNumber : (_String_startsWith_fn("comparable", name) ? $mdgriffith$elm_codegen$Internal$Compiler$IsComparable : (_String_startsWith_fn("appendable", name) ? $mdgriffith$elm_codegen$Internal$Compiler$IsAppendable : (_String_startsWith_fn("compappend", name) ? $mdgriffith$elm_codegen$Internal$Compiler$IsAppendableComparable : $mdgriffith$elm_codegen$Internal$Compiler$NoRestrictions)));
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$Overconstrainted = function (a) {
        return { $: 5, a: a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$restrictFurther_fn = function (restriction, newRestriction) {
        switch (restriction.$) {
            case 0:
                return newRestriction;
            case 5:
                var constraints = restriction.a;
                switch (newRestriction.$) {
                    case 5:
                        var newConstraints = newRestriction.a;
                        return $mdgriffith$elm_codegen$Internal$Compiler$Overconstrainted(_Utils_ap(constraints, newConstraints));
                    case 0:
                        return restriction;
                    default:
                        return $mdgriffith$elm_codegen$Internal$Compiler$Overconstrainted(_List_Cons(newRestriction, constraints));
                }
            case 1:
                switch (newRestriction.$) {
                    case 1:
                        return newRestriction;
                    case 0:
                        return restriction;
                    case 5:
                        var constraints = newRestriction.a;
                        return $mdgriffith$elm_codegen$Internal$Compiler$Overconstrainted(_List_Cons(restriction, constraints));
                    default:
                        return $mdgriffith$elm_codegen$Internal$Compiler$Overconstrainted(_List_fromArray([restriction, newRestriction]));
                }
            case 3:
                switch (newRestriction.$) {
                    case 0:
                        return restriction;
                    case 4:
                        return newRestriction;
                    case 3:
                        return newRestriction;
                    case 5:
                        var constraints = newRestriction.a;
                        return $mdgriffith$elm_codegen$Internal$Compiler$Overconstrainted(_List_Cons(restriction, constraints));
                    default:
                        return $mdgriffith$elm_codegen$Internal$Compiler$Overconstrainted(_List_fromArray([restriction, newRestriction]));
                }
            case 2:
                switch (newRestriction.$) {
                    case 0:
                        return restriction;
                    case 4:
                        return newRestriction;
                    case 3:
                        return newRestriction;
                    case 5:
                        var constraints = newRestriction.a;
                        return $mdgriffith$elm_codegen$Internal$Compiler$Overconstrainted(_List_Cons(restriction, constraints));
                    default:
                        return $mdgriffith$elm_codegen$Internal$Compiler$Overconstrainted(_List_fromArray([restriction, newRestriction]));
                }
            default:
                switch (newRestriction.$) {
                    case 0:
                        return restriction;
                    case 4:
                        return newRestriction;
                    case 3:
                        return newRestriction;
                    case 2:
                        return newRestriction;
                    case 5:
                        var constraints = newRestriction.a;
                        return $mdgriffith$elm_codegen$Internal$Compiler$Overconstrainted(_List_Cons(restriction, constraints));
                    default:
                        return $mdgriffith$elm_codegen$Internal$Compiler$Overconstrainted(_List_fromArray([restriction, newRestriction]));
                }
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$restrictFurther = F2($mdgriffith$elm_codegen$Internal$Compiler$restrictFurther_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$getRestrictionsHelper_fn = function (existingRestrictions, notation, cache) {
        getRestrictionsHelper: while (true) {
            switch (notation.$) {
                case 6:
                    var _v1 = notation.a;
                    var oneCoords = _v1.a;
                    var one = _v1.b;
                    var _v2 = notation.b;
                    var twoCoords = _v2.a;
                    var two = _v2.b;
                    return existingRestrictions;
                case 0:
                    var name = notation.a;
                    var $temp$existingRestrictions = $mdgriffith$elm_codegen$Internal$Compiler$restrictFurther_fn(existingRestrictions, $mdgriffith$elm_codegen$Internal$Compiler$nameToRestrictions(name)), $temp$notation = $elm$core$Maybe$withDefault_fn($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit, $elm$core$Dict$get_fn(name, cache)), $temp$cache = cache;
                    existingRestrictions = $temp$existingRestrictions;
                    notation = $temp$notation;
                    cache = $temp$cache;
                    continue getRestrictionsHelper;
                case 1:
                    var nodedModuleName = notation.a;
                    var vars = notation.b;
                    return existingRestrictions;
                case 2:
                    return existingRestrictions;
                case 3:
                    var nodes = notation.a;
                    return existingRestrictions;
                case 4:
                    var fields = notation.a;
                    return existingRestrictions;
                default:
                    var baseName = notation.a;
                    var _v3 = notation.b;
                    var recordNode = _v3.a;
                    var fields = _v3.b;
                    return existingRestrictions;
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$getRestrictionsHelper = F3($mdgriffith$elm_codegen$Internal$Compiler$getRestrictionsHelper_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$getRestrictions_fn = function (notation, cache) {
        return $mdgriffith$elm_codegen$Internal$Compiler$getRestrictionsHelper_fn($mdgriffith$elm_codegen$Internal$Compiler$NoRestrictions, notation, cache);
    }, $mdgriffith$elm_codegen$Internal$Compiler$getRestrictions = F2($mdgriffith$elm_codegen$Internal$Compiler$getRestrictions_fn);
    var $elm$core$Set$insert_fn = function (key, _v0) {
        var dict = _v0;
        return $elm$core$Dict$insert_fn(key, 0, dict);
    }, $elm$core$Set$insert = F2($elm$core$Set$insert_fn);
    var $elm$core$Result$map_fn = function (func, ra) {
        if (!ra.$) {
            var a = ra.a;
            return $elm$core$Result$Ok(func(a));
        }
        else {
            var e = ra.a;
            return $elm$core$Result$Err(e);
        }
    }, $elm$core$Result$map = F2($elm$core$Result$map_fn);
    var $elm$core$Result$map2_fn = function (func, ra, rb) {
        if (ra.$ === 1) {
            var x = ra.a;
            return $elm$core$Result$Err(x);
        }
        else {
            var a = ra.a;
            if (rb.$ === 1) {
                var x = rb.a;
                return $elm$core$Result$Err(x);
            }
            else {
                var b = rb.a;
                return $elm$core$Result$Ok(A2(func, a, b));
            }
        }
    }, $elm$core$Result$map2_fn_unwrapped = function (func, ra, rb) {
        if (ra.$ === 1) {
            var x = ra.a;
            return $elm$core$Result$Err(x);
        }
        else {
            var a = ra.a;
            if (rb.$ === 1) {
                var x = rb.a;
                return $elm$core$Result$Err(x);
            }
            else {
                var b = rb.a;
                return $elm$core$Result$Ok(func(a, b));
            }
        }
    }, $elm$core$Result$map2 = F3($elm$core$Result$map2_fn);
    var $elm$core$Set$member_fn = function (key, _v0) {
        var dict = _v0;
        return $elm$core$Dict$member_fn(key, dict);
    }, $elm$core$Set$member = F2($elm$core$Set$member_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$resolveVariableList_fn = function (visited, cache, nodes, processed) {
        resolveVariableList: while (true) {
            if (!nodes.b) {
                return $elm$core$Result$Ok($elm$core$List$reverse(processed));
            }
            else {
                var _v17 = nodes.a;
                var coords = _v17.a;
                var top = _v17.b;
                var remain = nodes.b;
                var _v18 = $mdgriffith$elm_codegen$Internal$Compiler$resolveVariables_fn(visited, cache, top);
                if (!_v18.$) {
                    var resolved = _v18.a;
                    var $temp$visited = visited, $temp$cache = cache, $temp$nodes = remain, $temp$processed = _List_Cons($stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(coords, resolved), processed);
                    visited = $temp$visited;
                    cache = $temp$cache;
                    nodes = $temp$nodes;
                    processed = $temp$processed;
                    continue resolveVariableList;
                }
                else {
                    var err = _v18.a;
                    return $elm$core$Result$Err(err);
                }
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$resolveVariableList = F4($mdgriffith$elm_codegen$Internal$Compiler$resolveVariableList_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$resolveVariables_fn = function (visited, cache, annotation) {
        resolveVariables: while (true) {
            switch (annotation.$) {
                case 6:
                    var _v1 = annotation.a;
                    var oneCoords = _v1.a;
                    var one = _v1.b;
                    var _v2 = annotation.b;
                    var twoCoords = _v2.a;
                    var two = _v2.b;
                    return $elm$core$Result$map2_fn_unwrapped(function (oneResolved, twoResolved) {
                        return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation_fn($stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(oneCoords, oneResolved), $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(twoCoords, twoResolved));
                    }, $mdgriffith$elm_codegen$Internal$Compiler$resolveVariables_fn(visited, cache, one), $mdgriffith$elm_codegen$Internal$Compiler$resolveVariables_fn(visited, cache, two));
                case 0:
                    var name = annotation.a;
                    if ($elm$core$Set$member_fn(name, visited)) {
                        return $elm$core$Result$Err("Infinite type inference loop!  Whoops.  This is an issue with elm-codegen.  If you can report this to the elm-codegen repo, that would be appreciated!");
                    }
                    else {
                        var _v3 = $elm$core$Dict$get_fn(name, cache);
                        if (_v3.$ === 1) {
                            return $elm$core$Result$Ok(annotation);
                        }
                        else {
                            var newType = _v3.a;
                            var $temp$visited = $elm$core$Set$insert_fn(name, visited), $temp$cache = cache, $temp$annotation = newType;
                            visited = $temp$visited;
                            cache = $temp$cache;
                            annotation = $temp$annotation;
                            continue resolveVariables;
                        }
                    }
                case 1:
                    var nodedModuleName = annotation.a;
                    var vars = annotation.b;
                    return $elm$core$Result$map_fn($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed(nodedModuleName), $mdgriffith$elm_codegen$Internal$Compiler$resolveVariableList_fn(visited, cache, vars, _List_Nil));
                case 2:
                    return $elm$core$Result$Ok($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit);
                case 3:
                    var nodes = annotation.a;
                    return $elm$core$Result$map_fn($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled, $mdgriffith$elm_codegen$Internal$Compiler$resolveVariableList_fn(visited, cache, nodes, _List_Nil));
                case 4:
                    var fields = annotation.a;
                    return $elm$core$Result$map_fn(A2($elm$core$Basics$composeL, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record, $elm$core$List$reverse), $elm$core$List$foldl_fn_unwrapped(function (_v4, found) {
                        var fieldRange = _v4.a;
                        var _v5 = _v4.b;
                        var name = _v5.a;
                        var _v6 = _v5.b;
                        var fieldTypeRange = _v6.a;
                        var fieldType = _v6.b;
                        if (found.$ === 1) {
                            var err = found.a;
                            return $elm$core$Result$Err(err);
                        }
                        else {
                            var processedFields = found.a;
                            var _v8 = $mdgriffith$elm_codegen$Internal$Compiler$resolveVariables_fn(visited, cache, fieldType);
                            if (_v8.$ === 1) {
                                var err = _v8.a;
                                return $elm$core$Result$Err(err);
                            }
                            else {
                                var resolvedField = _v8.a;
                                var restrictions = $mdgriffith$elm_codegen$Internal$Compiler$getRestrictions_fn(annotation, cache);
                                var _v9 = $mdgriffith$elm_codegen$Internal$Compiler$checkRestrictions_fn(restrictions, resolvedField);
                                if (!_v9.$) {
                                    return $elm$core$Result$Ok(_List_Cons($stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(fieldRange, _Utils_Tuple2(name, $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(fieldTypeRange, resolvedField))), processedFields));
                                }
                                else {
                                    var err = _v9.a;
                                    return $elm$core$Result$Err(err);
                                }
                            }
                        }
                    }, $elm$core$Result$Ok(_List_Nil), fields));
                default:
                    var baseName = annotation.a;
                    var _v10 = annotation.b;
                    var recordNode = _v10.a;
                    var fields = _v10.b;
                    var newFieldResult = $elm$core$List$foldl_fn_unwrapped(function (_v11, found) {
                        var fieldRange = _v11.a;
                        var _v12 = _v11.b;
                        var name = _v12.a;
                        var _v13 = _v12.b;
                        var fieldTypeRange = _v13.a;
                        var fieldType = _v13.b;
                        if (found.$ === 1) {
                            var err = found.a;
                            return $elm$core$Result$Err(err);
                        }
                        else {
                            var processedFields = found.a;
                            var _v15 = $mdgriffith$elm_codegen$Internal$Compiler$resolveVariables_fn(visited, cache, fieldType);
                            if (_v15.$ === 1) {
                                var err = _v15.a;
                                return $elm$core$Result$Err(err);
                            }
                            else {
                                var resolvedField = _v15.a;
                                var restrictions = $mdgriffith$elm_codegen$Internal$Compiler$getRestrictions_fn(annotation, cache);
                                return $elm$core$Result$Ok(_List_Cons($stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(fieldRange, _Utils_Tuple2(name, $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(fieldTypeRange, resolvedField))), processedFields));
                            }
                        }
                    }, $elm$core$Result$Ok(_List_Nil), fields);
                    return $elm$core$Result$map_fn(function (newFields) {
                        return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord_fn(baseName, $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(recordNode, $elm$core$List$reverse(newFields)));
                    }, newFieldResult);
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$resolveVariables = F3($mdgriffith$elm_codegen$Internal$Compiler$resolveVariables_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$unifiable_fn = function (aliases, vars, one, two) {
        unifiable: while (true) {
            switch (one.$) {
                case 0:
                    var varName = one.a;
                    var _v21 = $elm$core$Dict$get_fn(varName, vars);
                    if (_v21.$ === 1) {
                        if (!two.$) {
                            var varNameB = two.a;
                            return _Utils_eq(varNameB, varName) ? _Utils_Tuple2(vars, $elm$core$Result$Ok(one)) : _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$addInference_fn(varName, two, vars), $elm$core$Result$Ok(two));
                        }
                        else {
                            return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$addInference_fn(varName, two, vars), $elm$core$Result$Ok(two));
                        }
                    }
                    else {
                        var found = _v21.a;
                        if (!two.$) {
                            var varNameB = two.a;
                            if (_Utils_eq(varNameB, varName)) {
                                return _Utils_Tuple2(vars, $elm$core$Result$Ok(one));
                            }
                            else {
                                var _v24 = $elm$core$Dict$get_fn(varNameB, vars);
                                if (_v24.$ === 1) {
                                    return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$addInference_fn(varNameB, found, vars), $elm$core$Result$Ok(two));
                                }
                                else {
                                    var foundTwo = _v24.a;
                                    var $temp$aliases = aliases, $temp$vars = vars, $temp$one = found, $temp$two = foundTwo;
                                    aliases = $temp$aliases;
                                    vars = $temp$vars;
                                    one = $temp$one;
                                    two = $temp$two;
                                    continue unifiable;
                                }
                            }
                        }
                        else {
                            var $temp$aliases = aliases, $temp$vars = vars, $temp$one = found, $temp$two = two;
                            aliases = $temp$aliases;
                            vars = $temp$vars;
                            one = $temp$one;
                            two = $temp$two;
                            continue unifiable;
                        }
                    }
                case 1:
                    var oneName = one.a;
                    var oneVars = one.b;
                    switch (two.$) {
                        case 1:
                            var twoName = two.a;
                            var twoContents = two.b;
                            if (_Utils_eq($mdgriffith$elm_codegen$Internal$Compiler$denode(oneName), $mdgriffith$elm_codegen$Internal$Compiler$denode(twoName))) {
                                var _v26 = $mdgriffith$elm_codegen$Internal$Compiler$unifiableLists_fn(aliases, vars, oneVars, twoContents, _List_Nil);
                                if (!_v26.b.$) {
                                    var newVars = _v26.a;
                                    var unifiedContent = _v26.b.a;
                                    return _Utils_Tuple2(newVars, $elm$core$Result$Ok($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed_fn(twoName, unifiedContent)));
                                }
                                else {
                                    var newVars = _v26.a;
                                    var err = _v26.b.a;
                                    return _Utils_Tuple2(newVars, $elm$core$Result$Err(err));
                                }
                            }
                            else {
                                return _Utils_Tuple2(vars, $elm$core$Result$Err($mdgriffith$elm_codegen$Internal$Compiler$UnableToUnify_fn(one, two)));
                            }
                        case 0:
                            var b = two.a;
                            return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$addInference_fn(b, one, vars), $elm$core$Result$Ok(one));
                        default:
                            var _v27 = $mdgriffith$elm_codegen$Internal$Compiler$unifyWithAlias_fn(aliases, vars, oneName, oneVars, two);
                            if (_v27.$ === 1) {
                                return _Utils_Tuple2(vars, $elm$core$Result$Err($mdgriffith$elm_codegen$Internal$Compiler$UnableToUnify_fn(one, two)));
                            }
                            else {
                                var unified = _v27.a;
                                return unified;
                            }
                    }
                case 2:
                    switch (two.$) {
                        case 0:
                            var b = two.a;
                            var _v29 = $elm$core$Dict$get_fn(b, vars);
                            if (_v29.$ === 1) {
                                return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$addInference_fn(b, one, vars), $elm$core$Result$Ok(one));
                            }
                            else {
                                var foundTwo = _v29.a;
                                var $temp$aliases = aliases, $temp$vars = vars, $temp$one = one, $temp$two = foundTwo;
                                aliases = $temp$aliases;
                                vars = $temp$vars;
                                one = $temp$one;
                                two = $temp$two;
                                continue unifiable;
                            }
                        case 2:
                            return _Utils_Tuple2(vars, $elm$core$Result$Ok($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit));
                        default:
                            return _Utils_Tuple2(vars, $elm$core$Result$Err($mdgriffith$elm_codegen$Internal$Compiler$UnableToUnify_fn(one, two)));
                    }
                case 3:
                    var valsA = one.a;
                    switch (two.$) {
                        case 0:
                            var b = two.a;
                            var _v31 = $elm$core$Dict$get_fn(b, vars);
                            if (_v31.$ === 1) {
                                return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$addInference_fn(b, one, vars), $elm$core$Result$Ok(one));
                            }
                            else {
                                var foundTwo = _v31.a;
                                var $temp$aliases = aliases, $temp$vars = vars, $temp$one = one, $temp$two = foundTwo;
                                aliases = $temp$aliases;
                                vars = $temp$vars;
                                one = $temp$one;
                                two = $temp$two;
                                continue unifiable;
                            }
                        case 3:
                            var valsB = two.a;
                            var _v32 = $mdgriffith$elm_codegen$Internal$Compiler$unifiableLists_fn(aliases, vars, valsA, valsB, _List_Nil);
                            if (!_v32.b.$) {
                                var newVars = _v32.a;
                                var unified = _v32.b.a;
                                return _Utils_Tuple2(newVars, $elm$core$Result$Ok($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled(unified)));
                            }
                            else {
                                var newVars = _v32.a;
                                var err = _v32.b.a;
                                return _Utils_Tuple2(newVars, $elm$core$Result$Err(err));
                            }
                        default:
                            return _Utils_Tuple2(vars, $elm$core$Result$Err($mdgriffith$elm_codegen$Internal$Compiler$UnableToUnify_fn(one, two)));
                    }
                case 4:
                    var fieldsA = one.a;
                    switch (two.$) {
                        case 0:
                            var b = two.a;
                            var _v34 = $elm$core$Dict$get_fn(b, vars);
                            if (_v34.$ === 1) {
                                return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$addInference_fn(b, one, vars), $elm$core$Result$Ok(one));
                            }
                            else {
                                var foundTwo = _v34.a;
                                var $temp$aliases = aliases, $temp$vars = vars, $temp$one = one, $temp$two = foundTwo;
                                aliases = $temp$aliases;
                                vars = $temp$vars;
                                one = $temp$one;
                                two = $temp$two;
                                continue unifiable;
                            }
                        case 5:
                            var _v35 = two.a;
                            var twoRecName = _v35.b;
                            var _v36 = two.b;
                            var fieldsB = _v36.b;
                            var _v37 = $elm$core$Dict$get_fn(twoRecName, vars);
                            if (_v37.$ === 1) {
                                var _v38 = $mdgriffith$elm_codegen$Internal$Compiler$unifiableFields_fn(aliases, vars, fieldsA, fieldsB, _List_Nil);
                                if (!_v38.b.$) {
                                    var newVars = _v38.a;
                                    var unifiedFields = _v38.b.a;
                                    return _Utils_Tuple2(newVars, $elm$core$Result$Ok($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(unifiedFields)));
                                }
                                else {
                                    var newVars = _v38.a;
                                    var err = _v38.b.a;
                                    return _Utils_Tuple2(newVars, $elm$core$Result$Err(err));
                                }
                            }
                            else {
                                var knownType = _v37.a;
                                var _v39 = $mdgriffith$elm_codegen$Internal$Compiler$unifiableFields_fn(aliases, vars, fieldsA, fieldsB, _List_Nil);
                                if (!_v39.b.$) {
                                    var newVars = _v39.a;
                                    var unifiedFields = _v39.b.a;
                                    return _Utils_Tuple2(newVars, $elm$core$Result$Ok($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(unifiedFields)));
                                }
                                else {
                                    var newVars = _v39.a;
                                    var err = _v39.b.a;
                                    return _Utils_Tuple2(newVars, $elm$core$Result$Err(err));
                                }
                            }
                        case 4:
                            var fieldsB = two.a;
                            var _v40 = $mdgriffith$elm_codegen$Internal$Compiler$unifiableFields_fn(aliases, vars, fieldsA, fieldsB, _List_Nil);
                            if (!_v40.b.$) {
                                var newVars = _v40.a;
                                var unifiedFields = _v40.b.a;
                                return _Utils_Tuple2(newVars, $elm$core$Result$Ok($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(unifiedFields)));
                            }
                            else {
                                var newVars = _v40.a;
                                var err = _v40.b.a;
                                return _Utils_Tuple2(newVars, $elm$core$Result$Err(err));
                            }
                        case 1:
                            var twoName = two.a;
                            var twoVars = two.b;
                            var _v41 = $mdgriffith$elm_codegen$Internal$Compiler$unifyWithAlias_fn(aliases, vars, twoName, twoVars, one);
                            if (_v41.$ === 1) {
                                return _Utils_Tuple2(vars, $elm$core$Result$Err($mdgriffith$elm_codegen$Internal$Compiler$UnableToUnify_fn(one, two)));
                            }
                            else {
                                var unified = _v41.a;
                                return unified;
                            }
                        default:
                            return _Utils_Tuple2(vars, $elm$core$Result$Err($mdgriffith$elm_codegen$Internal$Compiler$UnableToUnify_fn(one, two)));
                    }
                case 5:
                    var _v42 = one.a;
                    var reVarName = _v42.b;
                    var _v43 = one.b;
                    var fieldsARange = _v43.a;
                    var fieldsA = _v43.b;
                    switch (two.$) {
                        case 0:
                            var b = two.a;
                            var _v45 = $elm$core$Dict$get_fn(b, vars);
                            if (_v45.$ === 1) {
                                return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$addInference_fn(b, one, vars), $elm$core$Result$Ok(one));
                            }
                            else {
                                var foundTwo = _v45.a;
                                var $temp$aliases = aliases, $temp$vars = vars, $temp$one = one, $temp$two = foundTwo;
                                aliases = $temp$aliases;
                                vars = $temp$vars;
                                one = $temp$one;
                                two = $temp$two;
                                continue unifiable;
                            }
                        case 5:
                            var _v46 = two.a;
                            var twoRecName = _v46.b;
                            var _v47 = two.b;
                            var fieldsB = _v47.b;
                            var _v48 = $elm$core$Dict$get_fn(twoRecName, vars);
                            if (_v48.$ === 1) {
                                var _v49 = $mdgriffith$elm_codegen$Internal$Compiler$unifiableFields_fn(aliases, vars, fieldsA, fieldsB, _List_Nil);
                                if (!_v49.b.$) {
                                    var newVars = _v49.a;
                                    var unifiedFields = _v49.b.a;
                                    return _Utils_Tuple2(newVars, $elm$core$Result$Ok($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(unifiedFields)));
                                }
                                else {
                                    var newVars = _v49.a;
                                    var err = _v49.b.a;
                                    return _Utils_Tuple2(newVars, $elm$core$Result$Err(err));
                                }
                            }
                            else {
                                var knownType = _v48.a;
                                var _v50 = $mdgriffith$elm_codegen$Internal$Compiler$unifiableFields_fn(aliases, vars, fieldsA, fieldsB, _List_Nil);
                                if (!_v50.b.$) {
                                    var newVars = _v50.a;
                                    var unifiedFields = _v50.b.a;
                                    return _Utils_Tuple2(newVars, $elm$core$Result$Ok($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(unifiedFields)));
                                }
                                else {
                                    var newVars = _v50.a;
                                    var err = _v50.b.a;
                                    return _Utils_Tuple2(newVars, $elm$core$Result$Err(err));
                                }
                            }
                        case 4:
                            var fieldsB = two.a;
                            var _v51 = $mdgriffith$elm_codegen$Internal$Compiler$unifiableFields_fn(aliases, vars, fieldsA, fieldsB, _List_Nil);
                            if (!_v51.b.$) {
                                var newVars = _v51.a;
                                var unifiedFields = _v51.b.a;
                                return _Utils_Tuple2(newVars, $elm$core$Result$Ok($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record(unifiedFields)));
                            }
                            else {
                                var newVars = _v51.a;
                                var err = _v51.b.a;
                                return _Utils_Tuple2(newVars, $elm$core$Result$Err(err));
                            }
                        case 1:
                            var twoName = two.a;
                            var twoVars = two.b;
                            var _v52 = $mdgriffith$elm_codegen$Internal$Compiler$unifyWithAlias_fn(aliases, vars, twoName, twoVars, one);
                            if (_v52.$ === 1) {
                                return _Utils_Tuple2(vars, $elm$core$Result$Err($mdgriffith$elm_codegen$Internal$Compiler$UnableToUnify_fn(one, two)));
                            }
                            else {
                                var unified = _v52.a;
                                return unified;
                            }
                        default:
                            return _Utils_Tuple2(vars, $elm$core$Result$Err($mdgriffith$elm_codegen$Internal$Compiler$UnableToUnify_fn(one, two)));
                    }
                default:
                    var oneA = one.a;
                    var oneB = one.b;
                    switch (two.$) {
                        case 0:
                            var b = two.a;
                            var _v54 = $elm$core$Dict$get_fn(b, vars);
                            if (_v54.$ === 1) {
                                return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$addInference_fn(b, one, vars), $elm$core$Result$Ok(one));
                            }
                            else {
                                var foundTwo = _v54.a;
                                var $temp$aliases = aliases, $temp$vars = vars, $temp$one = one, $temp$two = foundTwo;
                                aliases = $temp$aliases;
                                vars = $temp$vars;
                                one = $temp$one;
                                two = $temp$two;
                                continue unifiable;
                            }
                        case 6:
                            var twoA = two.a;
                            var twoB = two.b;
                            var _v55 = $mdgriffith$elm_codegen$Internal$Compiler$unifiable_fn(aliases, vars, $mdgriffith$elm_codegen$Internal$Compiler$denode(oneA), $mdgriffith$elm_codegen$Internal$Compiler$denode(twoA));
                            if (!_v55.b.$) {
                                var aVars = _v55.a;
                                var unifiedA = _v55.b.a;
                                var _v56 = $mdgriffith$elm_codegen$Internal$Compiler$unifiable_fn(aliases, aVars, $mdgriffith$elm_codegen$Internal$Compiler$denode(oneB), $mdgriffith$elm_codegen$Internal$Compiler$denode(twoB));
                                if (!_v56.b.$) {
                                    var bVars = _v56.a;
                                    var unifiedB = _v56.b.a;
                                    return _Utils_Tuple2(bVars, $elm$core$Result$Ok($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation_fn($mdgriffith$elm_codegen$Internal$Compiler$nodify(unifiedA), $mdgriffith$elm_codegen$Internal$Compiler$nodify(unifiedB))));
                                }
                                else {
                                    var otherwise = _v56;
                                    return otherwise;
                                }
                            }
                            else {
                                var otherwise = _v55;
                                return otherwise;
                            }
                        default:
                            return _Utils_Tuple2(vars, $elm$core$Result$Err($mdgriffith$elm_codegen$Internal$Compiler$UnableToUnify_fn(one, two)));
                    }
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$unifiable = F4($mdgriffith$elm_codegen$Internal$Compiler$unifiable_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$unifiableFields_fn = function (aliases, vars, one, two, unified) {
        unifiableFields: while (true) {
            var _v13 = _Utils_Tuple2(one, two);
            if (!_v13.a.b) {
                if (!_v13.b.b) {
                    return _Utils_Tuple2(vars, $elm$core$Result$Ok($elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$nodifyAll_a0, $elm$core$List$reverse(unified))));
                }
                else {
                    return _Utils_Tuple2(vars, $elm$core$Result$Err($mdgriffith$elm_codegen$Internal$Compiler$MismatchedTypeVariables));
                }
            }
            else {
                var _v14 = _v13.a;
                var oneX = _v14.a;
                var oneRemain = _v14.b;
                var twoFields = _v13.b;
                var _v15 = $mdgriffith$elm_codegen$Internal$Compiler$denode(oneX);
                var oneFieldName = _v15.a;
                var oneFieldVal = _v15.b;
                var oneName = $mdgriffith$elm_codegen$Internal$Compiler$denode(oneFieldName);
                var oneVal = $mdgriffith$elm_codegen$Internal$Compiler$denode(oneFieldVal);
                var _v16 = $mdgriffith$elm_codegen$Internal$Compiler$getField_fn(oneName, oneVal, twoFields, _List_Nil);
                if (!_v16.$) {
                    var _v17 = _v16.a;
                    var matchingFieldVal = _v17.a;
                    var remainingTwo = _v17.b;
                    var _v18 = $mdgriffith$elm_codegen$Internal$Compiler$unifiable_fn(aliases, vars, oneVal, matchingFieldVal);
                    var newVars = _v18.a;
                    var unifiedFieldResult = _v18.b;
                    if (!unifiedFieldResult.$) {
                        var unifiedField = unifiedFieldResult.a;
                        var $temp$aliases = aliases, $temp$vars = newVars, $temp$one = oneRemain, $temp$two = remainingTwo, $temp$unified = _List_Cons(_Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$nodify(oneName), $mdgriffith$elm_codegen$Internal$Compiler$nodify(unifiedField)), unified);
                        aliases = $temp$aliases;
                        vars = $temp$vars;
                        one = $temp$one;
                        two = $temp$two;
                        unified = $temp$unified;
                        continue unifiableFields;
                    }
                    else {
                        var err = unifiedFieldResult.a;
                        return _Utils_Tuple2(newVars, $elm$core$Result$Err(err));
                    }
                }
                else {
                    var notFound = _v16.a;
                    return _Utils_Tuple2(vars, $elm$core$Result$Err(notFound));
                }
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$unifiableFields = F5($mdgriffith$elm_codegen$Internal$Compiler$unifiableFields_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$unifiableLists_fn = function (aliases, vars, one, two, unified) {
        unifiableLists: while (true) {
            var _v6 = _Utils_Tuple2(one, two);
            _v6$3: while (true) {
                if (!_v6.a.b) {
                    if (!_v6.b.b) {
                        return _Utils_Tuple2(vars, $elm$core$Result$Ok($elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$nodifyAll_a0, $elm$core$List$reverse(unified))));
                    }
                    else {
                        break _v6$3;
                    }
                }
                else {
                    if (_v6.b.b) {
                        if ((!_v6.a.b.b) && (!_v6.b.b.b)) {
                            var _v7 = _v6.a;
                            var oneX = _v7.a;
                            var _v8 = _v6.b;
                            var twoX = _v8.a;
                            var _v9 = $mdgriffith$elm_codegen$Internal$Compiler$unifiable_fn(aliases, vars, $mdgriffith$elm_codegen$Internal$Compiler$denode(oneX), $mdgriffith$elm_codegen$Internal$Compiler$denode(twoX));
                            if (!_v9.b.$) {
                                var newVars = _v9.a;
                                var un = _v9.b.a;
                                return _Utils_Tuple2(newVars, $elm$core$Result$Ok($elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$nodifyAll_a0, $elm$core$List$reverse(_List_Cons(un, unified)))));
                            }
                            else {
                                var newVars = _v9.a;
                                var err = _v9.b.a;
                                return _Utils_Tuple2(newVars, $elm$core$Result$Err(err));
                            }
                        }
                        else {
                            var _v10 = _v6.a;
                            var oneX = _v10.a;
                            var oneRemain = _v10.b;
                            var _v11 = _v6.b;
                            var twoX = _v11.a;
                            var twoRemain = _v11.b;
                            var _v12 = $mdgriffith$elm_codegen$Internal$Compiler$unifiable_fn(aliases, vars, $mdgriffith$elm_codegen$Internal$Compiler$denode(oneX), $mdgriffith$elm_codegen$Internal$Compiler$denode(twoX));
                            if (!_v12.b.$) {
                                var newVars = _v12.a;
                                var un = _v12.b.a;
                                var $temp$aliases = aliases, $temp$vars = newVars, $temp$one = oneRemain, $temp$two = twoRemain, $temp$unified = _List_Cons(un, unified);
                                aliases = $temp$aliases;
                                vars = $temp$vars;
                                one = $temp$one;
                                two = $temp$two;
                                unified = $temp$unified;
                                continue unifiableLists;
                            }
                            else {
                                var newVars = _v12.a;
                                var err = _v12.b.a;
                                return _Utils_Tuple2(vars, $elm$core$Result$Err(err));
                            }
                        }
                    }
                    else {
                        break _v6$3;
                    }
                }
            }
            return _Utils_Tuple2(vars, $elm$core$Result$Err($mdgriffith$elm_codegen$Internal$Compiler$MismatchedTypeVariables));
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$unifiableLists = F5($mdgriffith$elm_codegen$Internal$Compiler$unifiableLists_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$unifyWithAlias_fn = function (aliases, vars, typename, typeVars, typeToUnifyWith) {
        var _v0 = $mdgriffith$elm_codegen$Internal$Compiler$getAlias_fn(typename, aliases);
        if (_v0.$ === 1) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var foundAlias = _v0.a;
            var fullAliasedType = function () {
                var _v3 = foundAlias.af;
                if (!_v3.b) {
                    return foundAlias.T;
                }
                else {
                    var makeAliasVarCache = F2(function (varName, _v5) {
                        var varType = _v5.b;
                        return _Utils_Tuple2(varName, varType);
                    });
                    var _v4 = $mdgriffith$elm_codegen$Internal$Compiler$resolveVariables_fn($elm$core$Set$empty, $elm$core$Dict$fromList(_List_map2_fn(makeAliasVarCache, foundAlias.af, typeVars)), foundAlias.T);
                    if (!_v4.$) {
                        var resolvedType = _v4.a;
                        return resolvedType;
                    }
                    else {
                        return foundAlias.T;
                    }
                }
            }();
            var _v1 = $mdgriffith$elm_codegen$Internal$Compiler$unifiable_fn(aliases, vars, fullAliasedType, typeToUnifyWith);
            var returnedVars = _v1.a;
            var unifiedResult = _v1.b;
            if (!unifiedResult.$) {
                var finalInference = unifiedResult.a;
                return $elm$core$Maybe$Just(_Utils_Tuple2(returnedVars, $elm$core$Result$Ok(fullAliasedType)));
            }
            else {
                var err = unifiedResult.a;
                return $elm$core$Maybe$Nothing;
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$unifyWithAlias = F5($mdgriffith$elm_codegen$Internal$Compiler$unifyWithAlias_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$applyTypeHelper_fn = function (aliases, cache, fn, args) {
        applyTypeHelper: while (true) {
            switch (fn.$) {
                case 6:
                    var one = fn.a;
                    var two = fn.b;
                    if (!args.b) {
                        return $elm$core$Result$Ok({ gJ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, f: cache, aK: fn });
                    }
                    else {
                        var top = args.a;
                        var rest = args.b;
                        var _v2 = $mdgriffith$elm_codegen$Internal$Compiler$unifiable_fn(aliases, cache, $mdgriffith$elm_codegen$Internal$Compiler$denode(one), top);
                        if (!_v2.b.$) {
                            var variableCache = _v2.a;
                            var $temp$aliases = aliases, $temp$cache = variableCache, $temp$fn = $mdgriffith$elm_codegen$Internal$Compiler$denode(two), $temp$args = rest;
                            aliases = $temp$aliases;
                            cache = $temp$cache;
                            fn = $temp$fn;
                            args = $temp$args;
                            continue applyTypeHelper;
                        }
                        else {
                            var varCache = _v2.a;
                            var err = _v2.b.a;
                            return $elm$core$Result$Err(_List_fromArray([err]));
                        }
                    }
                case 0:
                    var varName = fn.a;
                    if (!args.b) {
                        return $elm$core$Result$Ok({ gJ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, f: cache, aK: fn });
                    }
                    else {
                        var resultType = $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(varName + "_result");
                        return $elm$core$Result$Ok({
                            gJ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases,
                            f: $mdgriffith$elm_codegen$Internal$Compiler$addInference_fn(varName, $mdgriffith$elm_codegen$Internal$Compiler$makeFunction_fn(resultType, args), cache),
                            aK: resultType
                        });
                    }
                default:
                    var _final = fn;
                    if (!args.b) {
                        return $elm$core$Result$Ok({ gJ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, f: cache, aK: fn });
                    }
                    else {
                        return $elm$core$Result$Err(_List_fromArray([
                            $mdgriffith$elm_codegen$Internal$Compiler$FunctionAppliedToTooManyArgs_fn(_final, args)
                        ]));
                    }
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$applyTypeHelper = F4($mdgriffith$elm_codegen$Internal$Compiler$applyTypeHelper_fn);
    var $elm$core$Dict$merge_fn = function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
        var stepState = F3(function (rKey, rValue, _v0) {
            stepState: while (true) {
                var list = _v0.a;
                var result = _v0.b;
                if (!list.b) {
                    return _Utils_Tuple2(list, A3(rightStep, rKey, rValue, result));
                }
                else {
                    var _v2 = list.a;
                    var lKey = _v2.a;
                    var lValue = _v2.b;
                    var rest = list.b;
                    if (_Utils_cmp(lKey, rKey) < 0) {
                        var $temp$rKey = rKey, $temp$rValue = rValue, $temp$_v0 = _Utils_Tuple2(rest, A3(leftStep, lKey, lValue, result));
                        rKey = $temp$rKey;
                        rValue = $temp$rValue;
                        _v0 = $temp$_v0;
                        continue stepState;
                    }
                    else {
                        if (_Utils_cmp(lKey, rKey) > 0) {
                            return _Utils_Tuple2(list, A3(rightStep, rKey, rValue, result));
                        }
                        else {
                            return _Utils_Tuple2(rest, A4(bothStep, lKey, lValue, rValue, result));
                        }
                    }
                }
            }
        });
        var _v3 = $elm$core$Dict$foldl_fn(stepState, _Utils_Tuple2($elm$core$Dict$toList(leftDict), initialResult), rightDict);
        var leftovers = _v3.a;
        var intermediateResult = _v3.b;
        return $elm$core$List$foldl_fn_unwrapped(function (_v4, result) {
            var k = _v4.a;
            var v = _v4.b;
            return A3(leftStep, k, v, result);
        }, intermediateResult, leftovers);
    }, $elm$core$Dict$merge = F6($elm$core$Dict$merge_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$mergeInferences_fn = function (one, two) {
        return $elm$core$Dict$merge_fn($elm$core$Dict$insert, F4(function (key, oneVal, twoVal, d) {
            if (oneVal.$ === 5) {
                var recordName = oneVal.a;
                var _v1 = oneVal.b;
                var oneRange = _v1.a;
                var recordDefinition = _v1.b;
                if (twoVal.$ === 5) {
                    var twoRecordName = twoVal.a;
                    var _v3 = twoVal.b;
                    var twoRange = _v3.a;
                    var twoRecordDefinition = _v3.b;
                    return $elm$core$Dict$insert_fn(key, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord_fn(recordName, $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(oneRange, _Utils_ap(recordDefinition, twoRecordDefinition))), d);
                }
                else {
                    return $elm$core$Dict$insert_fn(key, oneVal, d);
                }
            }
            else {
                return $elm$core$Dict$insert_fn(key, oneVal, d);
            }
        }), $elm$core$Dict$insert, one, two, $elm$core$Dict$empty);
    }, $mdgriffith$elm_codegen$Internal$Compiler$mergeInferences = F2($mdgriffith$elm_codegen$Internal$Compiler$mergeInferences_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$mergeArgInferences_fn = function (expressions, annotations, inferences) {
        mergeArgInferences: while (true) {
            if (!expressions.b) {
                return $elm$core$Result$Ok({
                    f: inferences,
                    a7: $elm$core$List$reverse(annotations)
                });
            }
            else {
                var top = expressions.a;
                var remain = expressions.b;
                var _v1 = top.a;
                if (!_v1.$) {
                    var ann = _v1.a;
                    var $temp$expressions = remain, $temp$annotations = _List_Cons(ann.aK, annotations), $temp$inferences = $mdgriffith$elm_codegen$Internal$Compiler$mergeInferences_fn(inferences, ann.f);
                    expressions = $temp$expressions;
                    annotations = $temp$annotations;
                    inferences = $temp$inferences;
                    continue mergeArgInferences;
                }
                else {
                    var err = _v1.a;
                    return $elm$core$Result$Err(err);
                }
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$mergeArgInferences = F3($mdgriffith$elm_codegen$Internal$Compiler$mergeArgInferences_fn);
    var $mdgriffith$elm_codegen$Internal$Index$typecheck = function (_v0) {
        var top = _v0.a;
        var tail = _v0.b;
        var scope = _v0.c;
        var check = _v0.d;
        return check;
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$applyType_fn = function (index, annotation, args) {
        if (annotation.$ === 1) {
            var err = annotation.a;
            return $elm$core$Result$Err(err);
        }
        else {
            var fnAnnotation = annotation.a;
            if ($mdgriffith$elm_codegen$Internal$Index$typecheck(index)) {
                var _v1 = $mdgriffith$elm_codegen$Internal$Compiler$mergeArgInferences_fn(args, _List_Nil, fnAnnotation.f);
                if (!_v1.$) {
                    var mergedArgs = _v1.a;
                    return $mdgriffith$elm_codegen$Internal$Compiler$applyTypeHelper_fn(fnAnnotation.gJ, mergedArgs.f, fnAnnotation.aK, mergedArgs.a7);
                }
                else {
                    var err = _v1.a;
                    return $elm$core$Result$Err(err);
                }
            }
            else {
                return $elm$core$Result$Err(_List_Nil);
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$applyType = F3($mdgriffith$elm_codegen$Internal$Compiler$applyType_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$Expression = $elm$core$Basics$identity;
    var $mdgriffith$elm_codegen$Internal$Index$Index_fn = function (a, b, c, d) {
        return { $: 0, a: a, b: b, c: c, d: d };
    }, $mdgriffith$elm_codegen$Internal$Index$Index = F4($mdgriffith$elm_codegen$Internal$Index$Index_fn);
    var $mdgriffith$elm_codegen$Internal$Index$dive = function (_v0) {
        var top = _v0.a;
        var tail = _v0.b;
        var scope = _v0.c;
        var check = _v0.d;
        return $mdgriffith$elm_codegen$Internal$Index$Index_fn(0, _List_Cons(top, tail), scope, check);
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$expression = function (toExp) {
        return function (index) {
            return toExp($mdgriffith$elm_codegen$Internal$Index$dive(index));
        };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$getImports = function (exp) {
        return exp.d;
    };
    var $stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression = function (a) {
        return { $: 14, a: a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$parens = function (expr) {
        switch (expr.$) {
            case 0:
                return expr;
            case 7:
                var i = expr.a;
                return expr;
            case 11:
                return expr;
            case 8:
                return expr;
            case 9:
                return expr;
            case 13:
                return expr;
            case 14:
                return expr;
            case 12:
                return expr;
            case 19:
                return expr;
            case 3:
                return expr;
            case 21:
                return expr;
            case 22:
                return expr;
            case 18:
                return expr;
            case 17:
                return expr;
            default:
                return $stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression($mdgriffith$elm_codegen$Internal$Compiler$nodify(expr));
        }
    };
    var $mdgriffith$elm_codegen$Internal$Index$next = function (_v0) {
        var top = _v0.a;
        var tail = _v0.b;
        var scope = _v0.c;
        var check = _v0.d;
        return $mdgriffith$elm_codegen$Internal$Index$Index_fn(top + 1, tail, scope, check);
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$threadHelper_fn = function (index, exps, rendered) {
        threadHelper: while (true) {
            if (!exps.b) {
                return $elm$core$List$reverse(rendered);
            }
            else {
                var toExpDetails = exps.a;
                var remain = exps.b;
                var $temp$index = $mdgriffith$elm_codegen$Internal$Index$next(index), $temp$exps = remain, $temp$rendered = _List_Cons(toExpDetails(index), rendered);
                index = $temp$index;
                exps = $temp$exps;
                rendered = $temp$rendered;
                continue threadHelper;
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$threadHelper = F3($mdgriffith$elm_codegen$Internal$Compiler$threadHelper_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$thread_fn = function (index, exps) {
        return $mdgriffith$elm_codegen$Internal$Compiler$threadHelper_fn(index, exps, _List_Nil);
    }, $mdgriffith$elm_codegen$Internal$Compiler$thread = F2($mdgriffith$elm_codegen$Internal$Compiler$thread_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails_fn = function (index, _v0) {
        var toExp = _v0;
        return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Index$next(index), toExp(index));
    }, $mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails = F2($mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails_fn);
    var $mdgriffith$elm_codegen$Elm$apply_fn = function (fnExp, argExpressions) {
        return $mdgriffith$elm_codegen$Internal$Compiler$expression(function (index) {
            var _v0 = $mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails_fn(index, fnExp);
            var annotationIndex = _v0.a;
            var fnDetails = _v0.b;
            var args = $mdgriffith$elm_codegen$Internal$Compiler$thread_fn(annotationIndex, argExpressions);
            return {
                a: $mdgriffith$elm_codegen$Internal$Compiler$applyType_fn(index, fnDetails.a, args),
                _: $stil4m$elm_syntax$Elm$Syntax$Expression$Application($elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$nodifyAll_a0, _List_Cons(fnDetails._, $elm$core$List$map_fn(A2($elm$core$Basics$composeL, $mdgriffith$elm_codegen$Internal$Compiler$parens, function ($) {
                    return $._;
                }), args)))),
                d: _Utils_ap(fnDetails.d, $elm$core$List$concatMap_fn($mdgriffith$elm_codegen$Internal$Compiler$getImports, args))
            };
        });
    }, $mdgriffith$elm_codegen$Elm$apply = F2($mdgriffith$elm_codegen$Elm$apply_fn);
    var $mdgriffith$elm_codegen$Elm$Annotation$typed_fn = function (mod, name, args) {
        return {
            gJ: $elm$core$List$foldl_fn_unwrapped(function (ann, aliases) {
                return $elm$core$Dict$union_fn($mdgriffith$elm_codegen$Elm$Annotation$getAliases(ann), aliases);
            }, $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, args),
            a: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed_fn($mdgriffith$elm_codegen$Internal$Compiler$nodify(_Utils_Tuple2(mod, name)), $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$nodifyAll_a0, $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation, args))),
            d: $elm$core$List$concatMap_fn($mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports, args)
        };
    }, $mdgriffith$elm_codegen$Elm$Annotation$typed = F3($mdgriffith$elm_codegen$Elm$Annotation$typed_fn);
    var $mdgriffith$elm_codegen$Elm$Annotation$float = $mdgriffith$elm_codegen$Elm$Annotation$typed_fn(_List_Nil, "Float", _List_Nil);
    var $mdgriffith$elm_codegen$Elm$Annotation$function_fn = function (anns, _return) {
        return {
            gJ: $elm$core$List$foldl_fn_unwrapped(function (ann, aliases) {
                return $elm$core$Dict$union_fn($mdgriffith$elm_codegen$Elm$Annotation$getAliases(ann), aliases);
            }, $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, _List_Cons(_return, anns)),
            a: $elm$core$List$foldr_fn(F2(function (ann, fn) {
                return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation_fn($mdgriffith$elm_codegen$Internal$Compiler$nodify(ann), $mdgriffith$elm_codegen$Internal$Compiler$nodify(fn));
            }), $mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation(_return), $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation, anns)),
            d: _Utils_ap($mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports(_return), $elm$core$List$concatMap_fn($mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports, anns))
        };
    }, $mdgriffith$elm_codegen$Elm$Annotation$function = F2($mdgriffith$elm_codegen$Elm$Annotation$function_fn);
    var $mdgriffith$elm_codegen$Elm$Annotation$int = $mdgriffith$elm_codegen$Elm$Annotation$typed_fn(_List_Nil, "Int", _List_Nil);
    var $mdgriffith$elm_codegen$Elm$Annotation$list = function (inner) {
        return $mdgriffith$elm_codegen$Elm$Annotation$typed_fn(_List_Nil, "List", _List_fromArray([inner]));
    };
    var $mdgriffith$elm_codegen$Internal$Format$sanitize = function (str) {
        switch (str) {
            case "in":
                return "in_";
            case "type":
                return "type_";
            case "case":
                return "case_";
            case "let":
                return "let_";
            case "module":
                return "module_";
            case "exposing":
                return "exposing_";
            case "where":
                return "where_";
            case "main":
                return "main_";
            case "port":
                return "port_";
            case "as":
                return "as_";
            case "if":
                return "if_";
            case "import":
                return "import_";
            default:
                return str;
        }
    };
    var $elm$core$String$toLower = _String_toLower;
    var $mdgriffith$elm_codegen$Internal$Format$formatValue = function (str) {
        var formatted = _Utils_ap($elm$core$String$toLower($elm$core$String$left_fn(1, str)), $elm$core$String$dropLeft_fn(1, str));
        return $mdgriffith$elm_codegen$Internal$Format$sanitize(formatted);
    };
    var $mdgriffith$elm_codegen$Elm$Annotation$record = function (fields) {
        return {
            gJ: $elm$core$List$foldl_fn_unwrapped(function (_v0, aliases) {
                var ann = _v0.b;
                return $elm$core$Dict$union_fn($mdgriffith$elm_codegen$Elm$Annotation$getAliases(ann), aliases);
            }, $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, fields),
            a: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record($elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$nodifyAll_a0, $elm$core$List$map_fn(function (_v1) {
                var name = _v1.a;
                var ann = _v1.b;
                return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$nodify($mdgriffith$elm_codegen$Internal$Format$formatValue(name)), $mdgriffith$elm_codegen$Internal$Compiler$nodify($mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation(ann)));
            }, fields))),
            d: $elm$core$List$concatMap_fn(A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports), fields)
        };
    };
    var $mdgriffith$elm_codegen$Elm$Annotation$string = $mdgriffith$elm_codegen$Elm$Annotation$typed_fn(_List_Nil, "String", _List_Nil);
    var $mdgriffith$elm_codegen$Elm$Annotation$tuple_fn = function (one, two) {
        return {
            gJ: $elm$core$Dict$union_fn($mdgriffith$elm_codegen$Elm$Annotation$getAliases(one), $mdgriffith$elm_codegen$Elm$Annotation$getAliases(two)),
            a: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled($elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$nodifyAll_a0, _List_fromArray([
                $mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation(one),
                $mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation(two)
            ]))),
            d: _Utils_ap($mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports(one), $mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports(two))
        };
    }, $mdgriffith$elm_codegen$Elm$Annotation$tuple = F2($mdgriffith$elm_codegen$Elm$Annotation$tuple_fn);
    var $stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue_fn = function (a, b) {
        return { $: 3, a: a, b: b };
    }, $stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue = F2($stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue_fn);
    var $mdgriffith$elm_codegen$Internal$Index$indexToString = function (_v0) {
        var top = _v0.a;
        var tail = _v0.b;
        var scope = _v0.c;
        var check = _v0.d;
        return _Utils_ap((!top) ? "" : ("_" + $elm$core$String$fromInt(top)), function () {
            if (!tail.b) {
                return "";
            }
            else {
                if (!tail.b.b) {
                    var one = tail.a;
                    return "_" + $elm$core$String$fromInt(one);
                }
                else {
                    if (!tail.b.b.b) {
                        var one = tail.a;
                        var _v2 = tail.b;
                        var two = _v2.a;
                        return "_" + ($elm$core$String$fromInt(one) + ("_" + $elm$core$String$fromInt(two)));
                    }
                    else {
                        if (!tail.b.b.b.b) {
                            var one = tail.a;
                            var _v3 = tail.b;
                            var two = _v3.a;
                            var _v4 = _v3.b;
                            var three = _v4.a;
                            return "_" + ($elm$core$String$fromInt(one) + ("_" + ($elm$core$String$fromInt(two) + ("_" + $elm$core$String$fromInt(three)))));
                        }
                        else {
                            return "_" + $elm$core$String$join_fn("_", $elm$core$List$map_fn($elm$core$String$fromInt, tail));
                        }
                    }
                }
            }
        }());
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$mapNode_fn = function (fn, _v0) {
        var range = _v0.a;
        var n = _v0.b;
        return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, fn(n));
    }, $mdgriffith$elm_codegen$Internal$Compiler$mapNode = F2($mdgriffith$elm_codegen$Internal$Compiler$mapNode_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$protectAnnotation_fn = function (index, ann) {
        switch (ann.$) {
            case 0:
                var str = ann.a;
                return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(_Utils_ap(str, $mdgriffith$elm_codegen$Internal$Index$indexToString(index)));
            case 1:
                var modName = ann.a;
                var anns = ann.b;
                return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed_fn(modName, $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$mapNode($mdgriffith$elm_codegen$Internal$Compiler$protectAnnotation(index)), anns));
            case 2:
                return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit;
            case 3:
                var tupled = ann.a;
                return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled($elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$mapNode($mdgriffith$elm_codegen$Internal$Compiler$protectAnnotation(index)), tupled));
            case 4:
                var recordDefinition = ann.a;
                return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record($elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$protectField(index), recordDefinition));
            case 5:
                var recordName = ann.a;
                var _v3 = ann.b;
                var recordRange = _v3.a;
                var recordDefinition = _v3.b;
                return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord_fn($mdgriffith$elm_codegen$Internal$Compiler$mapNode_fn(function (n) {
                    return _Utils_ap(n, $mdgriffith$elm_codegen$Internal$Index$indexToString(index));
                }, recordName), $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(recordRange, $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$protectField(index), recordDefinition)));
            default:
                var one = ann.a;
                var two = ann.b;
                return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation_fn($mdgriffith$elm_codegen$Internal$Compiler$mapNode_fn($mdgriffith$elm_codegen$Internal$Compiler$protectAnnotation(index), one), $mdgriffith$elm_codegen$Internal$Compiler$mapNode_fn($mdgriffith$elm_codegen$Internal$Compiler$protectAnnotation(index), two));
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$protectAnnotation = F2($mdgriffith$elm_codegen$Internal$Compiler$protectAnnotation_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$protectField_fn = function (index, _v0) {
        var nodeRange = _v0.a;
        var _v1 = _v0.b;
        var nodedName = _v1.a;
        var nodedType = _v1.b;
        return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(nodeRange, _Utils_Tuple2(nodedName, $mdgriffith$elm_codegen$Internal$Compiler$mapNode_fn($mdgriffith$elm_codegen$Internal$Compiler$protectAnnotation(index), nodedType)));
    }, $mdgriffith$elm_codegen$Internal$Compiler$protectField = F2($mdgriffith$elm_codegen$Internal$Compiler$protectField_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$getInnerInference_fn = function (index, _v0) {
        var details = _v0;
        return {
            gJ: details.gJ,
            f: $elm$core$Dict$empty,
            aK: $mdgriffith$elm_codegen$Internal$Compiler$protectAnnotation_fn(index, details.a)
        };
    }, $mdgriffith$elm_codegen$Internal$Compiler$getInnerInference = F2($mdgriffith$elm_codegen$Internal$Compiler$getInnerInference_fn);
    var $mdgriffith$elm_codegen$Internal$Index$protectTypeName_fn = function (base, index) {
        var top = index.a;
        var tail = index.b;
        var scope = index.c;
        var check = index.d;
        if (!tail.b) {
            return $mdgriffith$elm_codegen$Internal$Format$formatValue(base);
        }
        else {
            return $mdgriffith$elm_codegen$Internal$Format$formatValue(_Utils_ap(base, $mdgriffith$elm_codegen$Internal$Index$indexToString(index)));
        }
    }, $mdgriffith$elm_codegen$Internal$Index$protectTypeName = F2($mdgriffith$elm_codegen$Internal$Index$protectTypeName_fn);
    var $mdgriffith$elm_codegen$Elm$value = function (details) {
        return function (index) {
            return {
                a: function () {
                    var _v0 = details.a;
                    if (_v0.$ === 1) {
                        var typename = $mdgriffith$elm_codegen$Internal$Index$protectTypeName_fn(details.c, index);
                        return $elm$core$Result$Ok({
                            gJ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases,
                            f: $elm$core$Dict$empty,
                            aK: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(typename)
                        });
                    }
                    else {
                        var ann = _v0.a;
                        return $elm$core$Result$Ok($mdgriffith$elm_codegen$Internal$Compiler$getInnerInference_fn(index, ann));
                    }
                }(),
                _: $stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue_fn(details.b, $mdgriffith$elm_codegen$Internal$Format$sanitize(details.c)),
                d: function () {
                    var _v1 = details.a;
                    if (_v1.$ === 1) {
                        var _v2 = details.b;
                        if (!_v2.b) {
                            return _List_Nil;
                        }
                        else {
                            return _List_fromArray([details.b]);
                        }
                    }
                    else {
                        var ann = _v1.a;
                        var _v3 = details.b;
                        if (!_v3.b) {
                            return $mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports(ann);
                        }
                        else {
                            return _List_Cons(details.b, $mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports(ann));
                        }
                    }
                }()
            };
        };
    };
    var $mdgriffith$elm_codegen$Elm$Annotation$var = function (a) {
        return {
            gJ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases,
            a: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType($mdgriffith$elm_codegen$Internal$Format$formatValue(a)),
            d: _List_Nil
        };
    };
    var $author$project$Gen$GraphQL$Engine$call_ = {
        bQ: F4(function (addFieldArg, addFieldArg0, addFieldArg1, addFieldArg2) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$string,
                    $mdgriffith$elm_codegen$Elm$Annotation$string,
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "InputObject", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "InputObject", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "addField"
            }), _List_fromArray([addFieldArg, addFieldArg0, addFieldArg1, addFieldArg2]));
        }),
        bS: F5(function (addOptionalFieldArg, addOptionalFieldArg0, addOptionalFieldArg1, addOptionalFieldArg2, addOptionalFieldArg3) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$string,
                    $mdgriffith$elm_codegen$Elm$Annotation$string,
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Option", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil)),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "InputObject", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("input")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "InputObject", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("input")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "addOptionalField"
            }), _List_fromArray([addOptionalFieldArg, addOptionalFieldArg0, addOptionalFieldArg1, addOptionalFieldArg2, addOptionalFieldArg3]));
        }),
        bY: F2(function (andMapArg, andMapArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                        ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("b")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "andMap"
            }), _List_fromArray([andMapArg, andMapArg0]));
        }),
        b0: F2(function (argArg, argArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil),
                    $mdgriffith$elm_codegen$Elm$Annotation$string
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Argument", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("obj")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "arg"
            }), _List_fromArray([argArg, argArg0]));
        }),
        b1: F2(function (argListArg, argListArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Argument", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("obj")
                    ]))),
                    $mdgriffith$elm_codegen$Elm$Annotation$string
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Argument", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("input")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "argList"
            }), _List_fromArray([argListArg, argListArg0]));
        }),
        cd: F3(function (bakeToSelectionArg, bakeToSelectionArg0, bakeToSelectionArg1) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string])),
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                        _Utils_Tuple2("args", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$tuple_fn($mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "VariableDetails", _List_Nil)))),
                        _Utils_Tuple2("body", $mdgriffith$elm_codegen$Elm$Annotation$string),
                        _Utils_Tuple2("fragments", $mdgriffith$elm_codegen$Elm$Annotation$string)
                    ]))),
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                    ])))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "bakeToSelection"
            }), _List_fromArray([bakeToSelectionArg, bakeToSelectionArg0, bakeToSelectionArg1]));
        }),
        ce: function (batchArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                    ])))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("data"))
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "batch"
            }), _List_fromArray([batchArg]));
        },
        ct: function (decodeArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "decode"
            }), _List_fromArray([decodeArg]));
        },
        cu: function (decodeNullableArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                    ]))
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "decodeNullable"
            }), _List_fromArray([decodeNullableArg]));
        },
        cI: function (encodeArgumentArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Argument", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("obj")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "encodeArgument"
            }), _List_fromArray([encodeArgumentArg]));
        },
        cJ: F2(function (encodeInputObjectArg, encodeInputObjectArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$tuple_fn($mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Argument", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("obj")
                    ])))),
                    $mdgriffith$elm_codegen$Elm$Annotation$string
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Argument", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("input")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "encodeInputObject"
            }), _List_fromArray([encodeInputObjectArg, encodeInputObjectArg0]));
        }),
        cK: function (encodeInputObjectAsJsonArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "InputObject", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Value", _List_Nil))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "encodeInputObjectAsJson"
            }), _List_fromArray([encodeInputObjectAsJsonArg]));
        },
        cL: function (encodeOptionalsArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Optional", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("arg")
                    ])))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$tuple_fn($mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Argument", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("arg")
                ])))))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "encodeOptionals"
            }), _List_fromArray([encodeOptionalsArg]));
        },
        cM: function (encodeOptionalsAsJsonArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Optional", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("arg")
                    ])))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$tuple_fn($mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "encodeOptionalsAsJson"
            }), _List_fromArray([encodeOptionalsAsJsonArg]));
        },
        cO: function (enumArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$tuple_fn($mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$var("item")))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("item")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "enum"
            }), _List_fromArray([enumArg]));
        },
        c_: F3(function (fieldArg, fieldArg0, fieldArg1) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$string,
                    $mdgriffith$elm_codegen$Elm$Annotation$string,
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "field"
            }), _List_fromArray([fieldArg, fieldArg0, fieldArg1]));
        }),
        da: F4(function (fieldWithArg, fieldWithArg0, fieldWithArg1, fieldWithArg2) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "InputObject", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("args")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$string,
                    $mdgriffith$elm_codegen$Elm$Annotation$string,
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "fieldWith"
            }), _List_fromArray([fieldWithArg, fieldWithArg0, fieldWithArg1, fieldWithArg2]));
        }),
        bo: function (inputObjectArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "InputObject", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "inputObject"
            }), _List_fromArray([inputObjectArg]));
        },
        dV: function (inputObjectToFieldListArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "InputObject", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$tuple_fn($mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "VariableDetails", _List_Nil))))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "inputObjectToFieldList"
            }), _List_fromArray([inputObjectToFieldListArg]));
        },
        d4: F3(function (jsonFieldArg, jsonFieldArg0, jsonFieldArg1) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$string,
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                        ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("b")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "jsonField"
            }), _List_fromArray([jsonFieldArg, jsonFieldArg0, jsonFieldArg1]));
        }),
        ef: function (listArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("data"))
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "list"
            }), _List_fromArray([listArg]));
        },
        ei: F2(function (mapArg, mapArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("b")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "map"
            }), _List_fromArray([mapArg, mapArg0]));
        }),
        ej: F3(function (map2Arg, map2Arg0, map2Arg1) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("b")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$var("c")),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("b")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("c")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "map2"
            }), _List_fromArray([map2Arg, map2Arg0, map2Arg1]));
        }),
        er: F2(function (mapRequestArg, mapRequestArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Request", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Request", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("b")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "mapRequest"
            }), _List_fromArray([mapRequestArg, mapRequestArg0]));
        }),
        eu: function (maybeEnumArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$tuple_fn($mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$var("item")))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("item")
                    ]))
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "maybeEnum"
            }), _List_fromArray([maybeEnumArg]));
        },
        ev: F2(function (maybeScalarEncodeArg, maybeScalarEncodeArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil)),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "maybeScalarEncode"
            }), _List_fromArray([maybeScalarEncodeArg, maybeScalarEncodeArg0]));
        }),
        bu: F2(function (mutationArg, mutationArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Mutation", _List_Nil),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                        _Utils_Tuple2("headers", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Http"]), "Header", _List_Nil))),
                        _Utils_Tuple2("url", $mdgriffith$elm_codegen$Elm$Annotation$string),
                        _Utils_Tuple2("timeout", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float]))),
                        _Utils_Tuple2("tracker", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string])))
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Cmd", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Result", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
                    ]))
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "mutation"
            }), _List_fromArray([mutationArg, mutationArg0]));
        }),
        eE: F2(function (mutationRiskyArg, mutationRiskyArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Mutation", _List_Nil),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                        _Utils_Tuple2("headers", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Http"]), "Header", _List_Nil))),
                        _Utils_Tuple2("url", $mdgriffith$elm_codegen$Elm$Annotation$string),
                        _Utils_Tuple2("timeout", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float]))),
                        _Utils_Tuple2("tracker", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string])))
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Cmd", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Result", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
                    ]))
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "mutationRisky"
            }), _List_fromArray([mutationRiskyArg, mutationRiskyArg0]));
        }),
        eF: F2(function (mutationRiskyTaskArg, mutationRiskyTaskArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Mutation", _List_Nil),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                        _Utils_Tuple2("headers", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Http"]), "Header", _List_Nil))),
                        _Utils_Tuple2("url", $mdgriffith$elm_codegen$Elm$Annotation$string),
                        _Utils_Tuple2("timeout", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float])))
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Task", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "mutationRiskyTask"
            }), _List_fromArray([mutationRiskyTaskArg, mutationRiskyTaskArg0]));
        }),
        eG: F2(function (mutationTaskArg, mutationTaskArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Mutation", _List_Nil),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                        _Utils_Tuple2("headers", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Http"]), "Header", _List_Nil))),
                        _Utils_Tuple2("url", $mdgriffith$elm_codegen$Elm$Annotation$string),
                        _Utils_Tuple2("timeout", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float])))
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Task", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "mutationTask"
            }), _List_fromArray([mutationTaskArg, mutationTaskArg0]));
        }),
        eN: function (nullableArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                    ]))
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "nullable"
            }), _List_fromArray([nullableArg]));
        },
        eO: F2(function (objectArg, objectArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$string,
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("otherSource"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "object"
            }), _List_fromArray([objectArg, objectArg0]));
        }),
        eS: F3(function (objectWithArg, objectWithArg0, objectWithArg1) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "InputObject", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("args")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$string,
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("otherSource"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "objectWith"
            }), _List_fromArray([objectWithArg, objectWithArg0, objectWithArg1]));
        }),
        bz: F2(function (optionalArg, optionalArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$string,
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Argument", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("arg")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Optional", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("arg")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "optional"
            }), _List_fromArray([optionalArg, optionalArg0]));
        }),
        bC: F2(function (queryArg, queryArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Query", _List_Nil),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                        _Utils_Tuple2("headers", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Http"]), "Header", _List_Nil))),
                        _Utils_Tuple2("url", $mdgriffith$elm_codegen$Elm$Annotation$string),
                        _Utils_Tuple2("timeout", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float]))),
                        _Utils_Tuple2("tracker", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string])))
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Cmd", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Result", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                    ]))
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "query"
            }), _List_fromArray([queryArg, queryArg0]));
        }),
        e9: F2(function (queryRiskyArg, queryRiskyArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Query", _List_Nil),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                        _Utils_Tuple2("headers", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Http"]), "Header", _List_Nil))),
                        _Utils_Tuple2("url", $mdgriffith$elm_codegen$Elm$Annotation$string),
                        _Utils_Tuple2("timeout", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float]))),
                        _Utils_Tuple2("tracker", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string])))
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Cmd", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Result", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                    ]))
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "queryRisky"
            }), _List_fromArray([queryRiskyArg, queryRiskyArg0]));
        }),
        fa: F2(function (queryRiskyTaskArg, queryRiskyTaskArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Query", _List_Nil),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                        _Utils_Tuple2("headers", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Http"]), "Header", _List_Nil))),
                        _Utils_Tuple2("url", $mdgriffith$elm_codegen$Elm$Annotation$string),
                        _Utils_Tuple2("timeout", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float])))
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Task", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "queryRiskyTask"
            }), _List_fromArray([queryRiskyTaskArg, queryRiskyTaskArg0]));
        }),
        fb: F2(function (queryStringArg, queryStringArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$string,
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "queryString"
            }), _List_fromArray([queryStringArg, queryStringArg0]));
        }),
        fc: F2(function (queryTaskArg, queryTaskArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Query", _List_Nil),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                        _Utils_Tuple2("headers", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Http"]), "Header", _List_Nil))),
                        _Utils_Tuple2("url", $mdgriffith$elm_codegen$Elm$Annotation$string),
                        _Utils_Tuple2("timeout", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float])))
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Task", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "queryTask"
            }), _List_fromArray([queryTaskArg, queryTaskArg0]));
        }),
        fe: F3(function (recoverArg, recoverArg0, recoverArg1) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("recovered"),
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$var("recovered")),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("recovered")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "recover"
            }), _List_fromArray([recoverArg, recoverArg0, recoverArg1]));
        }),
        fF: function (selectArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "select"
            }), _List_fromArray([selectArg]));
        },
        fI: function (sendArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Request", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Cmd", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Result", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                    ]))
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "send"
            }), _List_fromArray([sendArg]));
        },
        fK: F2(function (simulateArg, simulateArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                        _Utils_Tuple2("toHeader", $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$var("header"))),
                        _Utils_Tuple2("toExpectation", $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                            $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Http"]), "Response", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]))
                            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Result", _List_fromArray([
                                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil),
                                $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                            ])))
                        ]), $mdgriffith$elm_codegen$Elm$Annotation$var("expectation"))),
                        _Utils_Tuple2("toBody", $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                            $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil)
                        ]), $mdgriffith$elm_codegen$Elm$Annotation$var("body"))),
                        _Utils_Tuple2("toRequest", $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                            $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                                _Utils_Tuple2("method", $mdgriffith$elm_codegen$Elm$Annotation$string),
                                _Utils_Tuple2("headers", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("header"))),
                                _Utils_Tuple2("url", $mdgriffith$elm_codegen$Elm$Annotation$string),
                                _Utils_Tuple2("body", $mdgriffith$elm_codegen$Elm$Annotation$var("body")),
                                _Utils_Tuple2("expect", $mdgriffith$elm_codegen$Elm$Annotation$var("expectation")),
                                _Utils_Tuple2("timeout", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float]))),
                                _Utils_Tuple2("tracker", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string])))
                            ]))
                        ]), $mdgriffith$elm_codegen$Elm$Annotation$var("simulated")))
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Request", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$var("simulated"))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "simulate"
            }), _List_fromArray([simulateArg, simulateArg0]));
        }),
        gi: function (unionArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$tuple_fn($mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                    ]))))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "union"
            }), _List_fromArray([unionArg]));
        },
        gl: function (unsafeArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("selected")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("unsafe"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("selected")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "unsafe"
            }), _List_fromArray([unsafeArg]));
        },
        gx: F2(function (versionedAliasArg, versionedAliasArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "versionedAlias"
            }), _List_fromArray([versionedAliasArg, versionedAliasArg0]));
        }),
        gy: F4(function (versionedJsonFieldArg, versionedJsonFieldArg0, versionedJsonFieldArg1, versionedJsonFieldArg2) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$int,
                    $mdgriffith$elm_codegen$Elm$Annotation$string,
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                        ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("b")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "versionedJsonField"
            }), _List_fromArray([versionedJsonFieldArg, versionedJsonFieldArg0, versionedJsonFieldArg1, versionedJsonFieldArg2]));
        }),
        gz: F2(function (versionedNameArg, versionedNameArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "versionedName"
            }), _List_fromArray([versionedNameArg, versionedNameArg0]));
        }),
        gA: F2(function (withArg, withArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                        $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                            $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                        ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("b")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "with"
            }), _List_fromArray([withArg, withArg0]));
        }),
        gC: F2(function (withNameArg, withNameArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$string,
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ])))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "withName"
            }), _List_fromArray([withNameArg, withNameArg0]));
        })
    };
    var $stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration = function (a) {
        return { $: 0, a: a };
    };
    var $elm$core$Result$andThen_fn = function (callback, result) {
        if (!result.$) {
            var value = result.a;
            return callback(value);
        }
        else {
            var msg = result.a;
            return $elm$core$Result$Err(msg);
        }
    }, $elm$core$Result$andThen = F2($elm$core$Result$andThen_fn);
    var $stil4m$elm_syntax$Elm$Syntax$Node$map_fn = function (f, _v0) {
        var r = _v0.a;
        var a = _v0.b;
        return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(r, f(a));
    }, $stil4m$elm_syntax$Elm$Syntax$Node$map = F2($stil4m$elm_syntax$Elm$Syntax$Node$map_fn);
    var $elm$core$Tuple$mapSecond_fn = function (func, _v0) {
        var x = _v0.a;
        var y = _v0.b;
        return _Utils_Tuple2(x, func(y));
    }, $elm$core$Tuple$mapSecond = F2($elm$core$Tuple$mapSecond_fn);
    var $mdgriffith$elm_codegen$Internal$Clean$doRename_fn = function (dict, ann) {
        switch (ann.$) {
            case 0:
                var generic = ann.a;
                var _v1 = $elm$core$Dict$get_fn(generic, dict);
                if (_v1.$ === 1) {
                    return ann;
                }
                else {
                    var renamed = _v1.a;
                    return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(renamed);
                }
            case 1:
                var name = ann.a;
                var nodedVars = ann.b;
                return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed_fn(name, $elm$core$List$map_fn($stil4m$elm_syntax$Elm$Syntax$Node$map($mdgriffith$elm_codegen$Internal$Clean$doRename(dict)), nodedVars));
            case 2:
                return ann;
            case 3:
                var nodedVars = ann.a;
                return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Tupled($elm$core$List$map_fn($stil4m$elm_syntax$Elm$Syntax$Node$map($mdgriffith$elm_codegen$Internal$Clean$doRename(dict)), nodedVars));
            case 4:
                var record = ann.a;
                return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record($elm$core$List$map_fn($stil4m$elm_syntax$Elm$Syntax$Node$map($elm$core$Tuple$mapSecond($stil4m$elm_syntax$Elm$Syntax$Node$map($mdgriffith$elm_codegen$Internal$Clean$doRename(dict)))), record));
            case 5:
                var name = ann.a;
                var _v2 = ann.b;
                var range = _v2.a;
                var record = _v2.b;
                return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord_fn(name, $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn(range, $elm$core$List$map_fn($stil4m$elm_syntax$Elm$Syntax$Node$map($elm$core$Tuple$mapSecond($stil4m$elm_syntax$Elm$Syntax$Node$map($mdgriffith$elm_codegen$Internal$Clean$doRename(dict)))), record)));
            default:
                var nodeOne = ann.a;
                var nodeTwo = ann.b;
                return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation_fn($stil4m$elm_syntax$Elm$Syntax$Node$map_fn($mdgriffith$elm_codegen$Internal$Clean$doRename(dict), nodeOne), $stil4m$elm_syntax$Elm$Syntax$Node$map_fn($mdgriffith$elm_codegen$Internal$Clean$doRename(dict), nodeTwo));
        }
    }, $mdgriffith$elm_codegen$Internal$Clean$doRename = F2($mdgriffith$elm_codegen$Internal$Clean$doRename_fn);
    var $mdgriffith$elm_codegen$Internal$Clean$prepareRename_fn = function (ann, dict) {
        switch (ann.$) {
            case 0:
                var generic = ann.a;
                return $elm$core$Set$insert_fn(generic, dict);
            case 1:
                var name = ann.a;
                var nodedVars = ann.b;
                return $elm$core$List$foldl_fn_unwrapped(function (_v1, d) {
                    var tipe = _v1.b;
                    return $mdgriffith$elm_codegen$Internal$Clean$prepareRename_fn(tipe, d);
                }, dict, nodedVars);
            case 2:
                return dict;
            case 3:
                var nodedVars = ann.a;
                return $elm$core$List$foldl_fn_unwrapped(function (_v2, d) {
                    var tipe = _v2.b;
                    return $mdgriffith$elm_codegen$Internal$Clean$prepareRename_fn(tipe, d);
                }, dict, nodedVars);
            case 4:
                var record = ann.a;
                return $elm$core$List$foldl_fn_unwrapped(function (_v3, d) {
                    var _v4 = _v3.b;
                    var _v5 = _v4.b;
                    var field = _v5.b;
                    return $mdgriffith$elm_codegen$Internal$Clean$prepareRename_fn(field, d);
                }, dict, record);
            case 5:
                var name = ann.a;
                var _v6 = ann.b;
                var range = _v6.a;
                var record = _v6.b;
                return $elm$core$List$foldl_fn_unwrapped(function (_v7, d) {
                    var _v8 = _v7.b;
                    var _v9 = _v8.b;
                    var field = _v9.b;
                    return $mdgriffith$elm_codegen$Internal$Clean$prepareRename_fn(field, d);
                }, dict, record);
            default:
                var _v10 = ann.a;
                var one = _v10.b;
                var _v11 = ann.b;
                var two = _v11.b;
                return $mdgriffith$elm_codegen$Internal$Clean$prepareRename_fn(two, $mdgriffith$elm_codegen$Internal$Clean$prepareRename_fn(one, dict));
        }
    }, $mdgriffith$elm_codegen$Internal$Clean$prepareRename = F2($mdgriffith$elm_codegen$Internal$Clean$prepareRename_fn);
    var $mdgriffith$elm_codegen$Internal$Clean$findClean_fn = function (i, name, set) {
        findClean: while (true) {
            var newName = (!i) ? name : _Utils_ap(name, $elm$core$String$fromInt(i));
            if ($elm$core$Set$member_fn(newName, set)) {
                var $temp$i = i + 1, $temp$name = name, $temp$set = set;
                i = $temp$i;
                name = $temp$name;
                set = $temp$set;
                continue findClean;
            }
            else {
                return name;
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Clean$findClean = F3($mdgriffith$elm_codegen$Internal$Clean$findClean_fn);
    var $elm$core$Set$foldl_fn = function (func, initialState, _v0) {
        var dict = _v0;
        return $elm$core$Dict$foldl_fn_unwrapped(function (key, _v1, state) {
            return A2(func, key, state);
        }, initialState, dict);
    }, $elm$core$Set$foldl_fn_unwrapped = function (func, initialState, _v0) {
        var dict = _v0;
        return $elm$core$Dict$foldl_fn_unwrapped(function (key, _v1, state) {
            return func(key, state);
        }, initialState, dict);
    }, $elm$core$Set$foldl = F3($elm$core$Set$foldl_fn);
    var $mdgriffith$elm_codegen$Internal$Clean$sanitized = function (str) {
        var _v0 = $elm$core$String$split_fn("_", str);
        if (!_v0.b) {
            return str;
        }
        else {
            var top = _v0.a;
            var remain = _v0.b;
            return top;
        }
    };
    var $mdgriffith$elm_codegen$Internal$Clean$verify = function (set) {
        return $elm$core$Set$foldl_fn_unwrapped(function (name, gathered) {
            var newName = $mdgriffith$elm_codegen$Internal$Clean$findClean_fn(0, $mdgriffith$elm_codegen$Internal$Clean$sanitized(name), set);
            return $elm$core$Dict$insert_fn(name, newName, gathered);
        }, $elm$core$Dict$empty, set);
    };
    var $mdgriffith$elm_codegen$Internal$Clean$clean = function (ann) {
        var renames = $mdgriffith$elm_codegen$Internal$Clean$verify($mdgriffith$elm_codegen$Internal$Clean$prepareRename_fn(ann, $elm$core$Set$empty));
        return $mdgriffith$elm_codegen$Internal$Clean$doRename_fn(renames, ann);
    };
    var $mdgriffith$elm_codegen$Internal$Format$formatDeclarationName = function (str) {
        if (str === "main") {
            return "main";
        }
        else {
            return $mdgriffith$elm_codegen$Internal$Format$formatValue(str);
        }
    };
    var $elm$core$Result$mapError_fn = function (f, result) {
        if (!result.$) {
            var v = result.a;
            return $elm$core$Result$Ok(v);
        }
        else {
            var e = result.a;
            return $elm$core$Result$Err(f(e));
        }
    }, $elm$core$Result$mapError = F2($elm$core$Result$mapError_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$inferenceErrorToString = function (inf) {
        switch (inf.$) {
            case 1:
                var str = inf.a;
                return "Todo " + str;
            case 0:
                var one = inf.a;
                var two = inf.b;
                return "There are multiple different types in a list: \n\n" + ("    " + ($stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(one))) + ("\n\n    " + $stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(two))))));
            case 11:
                var details = inf.a;
                return "Mismatched record update";
            case 2:
                return "Case statement is empty";
            case 3:
                var fn = inf.a;
                var args = inf.b;
                return "The following is being called as a function\n\n    " + ($stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(fn))) + ("\n\nwith these arguments:\n\n    " + ($elm$core$String$join_fn(" -> ", $elm$core$List$map_fn(function (arg) {
                    return $stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(arg)));
                }, args)) + "\n\nbut that's wrong, right?")));
            case 5:
                var fieldName = inf.a;
                return "There is a duplicate field in a record: " + fieldName;
            case 6:
                return "Case returns different types.";
            case 7:
                var found = inf.a;
                return "I can't find ." + (found.c_ + (", this record only has these fields:\n\n    " + $elm$core$String$join_fn("\n    ", found.g6)));
            case 8:
                var attempting = inf.a;
                return "You're trying to access\n\n    ." + (attempting.c_ + ("\n\nbut this value isn't a record. It's a\n\n    " + $stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(attempting.w)))));
            case 9:
                var attempting = inf.a;
                return "You're trying to access\n\n    ." + (attempting.c_ + ("\n\nbut this value isn't a record, it's a\n\n    " + ($stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(attempting.w))) + "\n\nIs this value supposed to be an alias for a record? If so, check out Elm.alias!")));
            case 10:
                var details = inf.a;
                return details.aA + " not found, though I was trying to unpack it in a let expression.";
            case 12:
                var type_ = inf.a;
                return $stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(type_))) + " is not appendable.  Only Strings and Lists are appendable";
            case 13:
                var type_ = inf.a;
                return $stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(type_))) + " is not appendable.  Only Strings and Lists are appendable";
            case 14:
                var one = inf.a;
                var two = inf.b;
                return "I found\n\n    " + ($stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(one))) + ("\n\nBut I was expecting:\n\n    " + $stil4m$elm_syntax$Elm$Writer$write($stil4m$elm_syntax$Elm$Writer$writeTypeAnnotation($mdgriffith$elm_codegen$Internal$Compiler$nodify(two)))));
            default:
                return "Different lists of type variables";
        }
    };
    var $mdgriffith$elm_codegen$Elm$renderError = function (err) {
        if (!err.b) {
            return "";
        }
        else {
            return $elm$core$String$join_fn("\n\n", $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$inferenceErrorToString, err));
        }
    };
    var $elm$core$Set$fromList = function (list) {
        return $elm$core$List$foldl_fn($elm$core$Set$insert, $elm$core$Set$empty, list);
    };
    var $elm$core$Basics$neq = _Utils_notEqual;
    var $mdgriffith$elm_codegen$Internal$Compiler$simplify = function (fullStr) {
        return $elm$core$List$foldl_fn_unwrapped(function (piece, str) {
            var isDigit = _String_all_fn($elm$core$Char$isDigit, piece);
            if (isDigit) {
                return str;
            }
            else {
                if (str === "") {
                    return piece;
                }
                else {
                    return str + ("_" + piece);
                }
            }
        }, "", $elm$core$String$split_fn("_", fullStr));
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$rewriteTypeVariablesHelper_fn = function (existing, renames, type_) {
        switch (type_.$) {
            case 0:
                var varName = type_.a;
                var _v1 = $elm$core$Dict$get_fn(varName, renames);
                if (_v1.$ === 1) {
                    var simplified = $mdgriffith$elm_codegen$Internal$Compiler$simplify(varName);
                    return ($elm$core$Set$member_fn(simplified, existing) && (!_Utils_eq(varName, simplified))) ? _Utils_Tuple2(renames, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(simplified)) : _Utils_Tuple2($elm$core$Dict$insert_fn(varName, simplified, renames), $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(simplified));
                }
                else {
                    var rename = _v1.a;
                    return _Utils_Tuple2(renames, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(rename));
                }
            case 1:
                var name = type_.a;
                var vars = type_.b;
                var _v2 = $elm$core$List$foldl_fn_unwrapped(function (typevar, _v3) {
                    var varUsed = _v3.a;
                    var varList = _v3.b;
                    var _v4 = $mdgriffith$elm_codegen$Internal$Compiler$rewriteTypeVariablesHelper_fn(existing, varUsed, $mdgriffith$elm_codegen$Internal$Compiler$denode(typevar));
                    var oneUsed = _v4.a;
                    var oneType = _v4.b;
                    return _Utils_Tuple2(oneUsed, _List_Cons($mdgriffith$elm_codegen$Internal$Compiler$nodify(oneType), varList));
                }, _Utils_Tuple2(renames, _List_Nil), vars);
                var newUsed = _v2.a;
                var newVars = _v2.b;
                return _Utils_Tuple2(newUsed, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed_fn(name, $elm$core$List$reverse(newVars)));
            case 2:
                return _Utils_Tuple2(renames, type_);
            case 3:
                var valsA = type_.a;
                return _Utils_Tuple2(renames, type_);
            case 4:
                var fieldsA = type_.a;
                return _Utils_Tuple2(renames, type_);
            case 5:
                var _v5 = type_.a;
                var reVarName = _v5.b;
                var _v6 = type_.b;
                var fieldsARange = _v6.a;
                var fieldsA = _v6.b;
                return _Utils_Tuple2(renames, type_);
            default:
                var one = type_.a;
                var two = type_.b;
                var _v7 = $mdgriffith$elm_codegen$Internal$Compiler$rewriteTypeVariablesHelper_fn(existing, renames, $mdgriffith$elm_codegen$Internal$Compiler$denode(one));
                var oneUsed = _v7.a;
                var oneType = _v7.b;
                var _v8 = $mdgriffith$elm_codegen$Internal$Compiler$rewriteTypeVariablesHelper_fn(existing, oneUsed, $mdgriffith$elm_codegen$Internal$Compiler$denode(two));
                var twoUsed = _v8.a;
                var twoType = _v8.b;
                return _Utils_Tuple2(twoUsed, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation_fn($mdgriffith$elm_codegen$Internal$Compiler$nodify(oneType), $mdgriffith$elm_codegen$Internal$Compiler$nodify(twoType)));
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$rewriteTypeVariablesHelper = F3($mdgriffith$elm_codegen$Internal$Compiler$rewriteTypeVariablesHelper_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$rewriteTypeVariables = function (type_) {
        var existing = $elm$core$Set$fromList($mdgriffith$elm_codegen$Internal$Compiler$getGenericsHelper(type_));
        return $mdgriffith$elm_codegen$Internal$Compiler$rewriteTypeVariablesHelper_fn(existing, $elm$core$Dict$empty, type_).b;
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$resolve_fn = function (index, cache, annotation) {
        if ($mdgriffith$elm_codegen$Internal$Index$typecheck(index)) {
            var restrictions = $mdgriffith$elm_codegen$Internal$Compiler$getRestrictions_fn(annotation, cache);
            var _v0 = $mdgriffith$elm_codegen$Internal$Compiler$resolveVariables_fn($elm$core$Set$empty, cache, annotation);
            if (!_v0.$) {
                var newAnnotation = _v0.a;
                return $mdgriffith$elm_codegen$Internal$Compiler$checkRestrictions_fn(restrictions, $mdgriffith$elm_codegen$Internal$Compiler$rewriteTypeVariables(newAnnotation));
            }
            else {
                var err = _v0.a;
                return $elm$core$Result$Err(err);
            }
        }
        else {
            return $elm$core$Result$Err("Type inference skipped.");
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$resolve = F3($mdgriffith$elm_codegen$Internal$Compiler$resolve_fn);
    var $mdgriffith$elm_codegen$Elm$declaration_fn = function (nameStr, _v0) {
        var toBody = _v0;
        var name = $mdgriffith$elm_codegen$Internal$Format$formatDeclarationName(nameStr);
        return $mdgriffith$elm_codegen$Internal$Compiler$Declaration({
            g1: $elm$core$Maybe$Nothing,
            ah: $mdgriffith$elm_codegen$Internal$Compiler$NotExposed,
            d: _List_Nil,
            c: name,
            h2: function (index) {
                var body = toBody(index);
                var resolvedType = $elm$core$Result$andThen_fn(function (sig) {
                    return $mdgriffith$elm_codegen$Internal$Compiler$resolve_fn(index, sig.f, sig.aK);
                }, $elm$core$Result$mapError_fn($mdgriffith$elm_codegen$Elm$renderError, body.a));
                var maybeWarning = function () {
                    if (!resolvedType.$) {
                        var sig = resolvedType.a;
                        var _v5 = body.a;
                        if (!_v5.$) {
                            var inference = _v5.a;
                            return $elm$core$Maybe$Nothing;
                        }
                        else {
                            if (!_v5.a.b) {
                                return $elm$core$Maybe$Nothing;
                            }
                            else {
                                var err = _v5.a;
                                return $elm$core$Maybe$Just({
                                    gX: name,
                                    id: $mdgriffith$elm_codegen$Elm$renderError(err)
                                });
                            }
                        }
                    }
                    else {
                        if (resolvedType.a === "") {
                            return $elm$core$Maybe$Nothing;
                        }
                        else {
                            var err = resolvedType.a;
                            return $elm$core$Maybe$Just({ gX: name, id: err });
                        }
                    }
                }();
                return {
                    ag: body.d,
                    gX: $stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration({
                        gX: function () {
                            var _v1 = body._;
                            if (_v1.$ === 17) {
                                var lam = _v1.a;
                                return $mdgriffith$elm_codegen$Internal$Compiler$nodify({
                                    b6: lam.r,
                                    _: lam._,
                                    c: $mdgriffith$elm_codegen$Internal$Compiler$nodify(name)
                                });
                            }
                            else {
                                return $mdgriffith$elm_codegen$Internal$Compiler$nodify({
                                    b6: _List_Nil,
                                    _: $mdgriffith$elm_codegen$Internal$Compiler$nodify(body._),
                                    c: $mdgriffith$elm_codegen$Internal$Compiler$nodify(name)
                                });
                            }
                        }(),
                        be: $elm$core$Maybe$Nothing,
                        hW: function () {
                            var _v2 = body.a;
                            if (!_v2.$) {
                                var sig = _v2.a;
                                if (!resolvedType.$) {
                                    if (!resolvedType.a.$) {
                                        var generic = resolvedType.a.a;
                                        return $elm$core$Maybe$Nothing;
                                    }
                                    else {
                                        var finalType = resolvedType.a;
                                        return $elm$core$Maybe$Just($mdgriffith$elm_codegen$Internal$Compiler$nodify({
                                            c: $mdgriffith$elm_codegen$Internal$Compiler$nodify(name),
                                            a6: $mdgriffith$elm_codegen$Internal$Compiler$nodify($mdgriffith$elm_codegen$Internal$Clean$clean(finalType))
                                        }));
                                    }
                                }
                                else {
                                    var errMsg = resolvedType.a;
                                    return $elm$core$Maybe$Nothing;
                                }
                            }
                            else {
                                return $elm$core$Maybe$Nothing;
                            }
                        }()
                    }),
                    id: maybeWarning
                };
            }
        });
    }, $mdgriffith$elm_codegen$Elm$declaration = F2($mdgriffith$elm_codegen$Elm$declaration_fn);
    var $mdgriffith$elm_codegen$Elm$docs = function (group) {
        var _v0 = group.hj;
        if (_v0.$ === 1) {
            return "@docs " + $elm$core$String$join_fn(", ", group.hs);
        }
        else {
            var groupName = _v0.a;
            return "## " + (groupName + ("\n\n@docs " + $elm$core$String$join_fn(", ", group.hs)));
        }
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$Exposed = function (a) {
        return { $: 1, a: a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn = function (opts, decl) {
        switch (decl.$) {
            case 1:
                return decl;
            case 2:
                return decl;
            default:
                var details = decl.a;
                return $mdgriffith$elm_codegen$Internal$Compiler$Declaration(_Utils_update(details, {
                    ah: $mdgriffith$elm_codegen$Internal$Compiler$Exposed(opts)
                }));
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$exposeWith = F2($mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn);
    var $mdgriffith$elm_codegen$Elm$exposeWith = $mdgriffith$elm_codegen$Internal$Compiler$exposeWith;
    var $stil4m$elm_syntax$Elm$Syntax$Exposing$All = function (a) {
        return { $: 0, a: a };
    };
    var $stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit = function (a) {
        return { $: 1, a: a };
    };
    var $mdgriffith$elm_codegen$Internal$Comments$Markdown = function (a) {
        return { $: 0, a: a };
    };
    var $stil4m$elm_syntax$Elm$Syntax$Module$NormalModule = function (a) {
        return { $: 0, a: a };
    };
    var $stil4m$elm_syntax$Elm$Syntax$Module$PortModule = function (a) {
        return { $: 1, a: a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$RenderedBlock = function (a) {
        return { $: 2, a: a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$RenderedComment = function (a) {
        return { $: 1, a: a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$RenderedDecl = function (a) {
        return { $: 0, a: a };
    };
    var $stil4m$elm_syntax$Elm$Syntax$Declaration$CustomTypeDeclaration = function (a) {
        return { $: 2, a: a };
    };
    var $mdgriffith$elm_codegen$Internal$Render$addDocs_fn = function (maybeDoc, decl) {
        if (maybeDoc.$ === 1) {
            return decl;
        }
        else {
            var doc = maybeDoc.a;
            switch (decl.$) {
                case 0:
                    var func = decl.a;
                    return $stil4m$elm_syntax$Elm$Syntax$Declaration$FunctionDeclaration(_Utils_update(func, {
                        be: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Internal$Compiler$nodify(doc))
                    }));
                case 1:
                    var typealias = decl.a;
                    return $stil4m$elm_syntax$Elm$Syntax$Declaration$AliasDeclaration(_Utils_update(typealias, {
                        be: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Internal$Compiler$nodify(doc))
                    }));
                case 2:
                    var typeDecl = decl.a;
                    return $stil4m$elm_syntax$Elm$Syntax$Declaration$CustomTypeDeclaration(_Utils_update(typeDecl, {
                        be: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Internal$Compiler$nodify(doc))
                    }));
                case 3:
                    var sig = decl.a;
                    return decl;
                case 4:
                    return decl;
                default:
                    return decl;
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Render$addDocs = F2($mdgriffith$elm_codegen$Internal$Render$addDocs_fn);
    var $stil4m$elm_syntax$Elm$Syntax$Exposing$FunctionExpose = function (a) {
        return { $: 1, a: a };
    };
    var $stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose = function (a) {
        return { $: 3, a: a };
    };
    var $stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose = function (a) {
        return { $: 2, a: a };
    };
    var $mdgriffith$elm_codegen$Internal$Render$addExposed_fn = function (exposed, declaration, otherExposes) {
        if (!exposed.$) {
            return otherExposes;
        }
        else {
            var details = exposed.a;
            switch (declaration.$) {
                case 0:
                    var fn = declaration.a;
                    var fnName = $mdgriffith$elm_codegen$Internal$Compiler$denode(function ($) {
                        return $.c;
                    }($mdgriffith$elm_codegen$Internal$Compiler$denode(fn.gX)));
                    return _List_Cons($stil4m$elm_syntax$Elm$Syntax$Exposing$FunctionExpose(fnName), otherExposes);
                case 1:
                    var synonym = declaration.a;
                    var aliasName = $mdgriffith$elm_codegen$Internal$Compiler$denode(synonym.c);
                    return _List_Cons($stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose(aliasName), otherExposes);
                case 2:
                    var myType = declaration.a;
                    var typeName = $mdgriffith$elm_codegen$Internal$Compiler$denode(myType.c);
                    return details.g9 ? _List_Cons($stil4m$elm_syntax$Elm$Syntax$Exposing$TypeExpose({
                        c: typeName,
                        eW: $elm$core$Maybe$Just($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange)
                    }), otherExposes) : _List_Cons($stil4m$elm_syntax$Elm$Syntax$Exposing$TypeOrAliasExpose(typeName), otherExposes);
                case 3:
                    var myPort = declaration.a;
                    var typeName = $mdgriffith$elm_codegen$Internal$Compiler$denode(myPort.c);
                    return _List_Cons($stil4m$elm_syntax$Elm$Syntax$Exposing$FunctionExpose(typeName), otherExposes);
                case 4:
                    var inf = declaration.a;
                    return otherExposes;
                default:
                    return otherExposes;
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Render$addExposed = F3($mdgriffith$elm_codegen$Internal$Render$addExposed_fn);
    var $mdgriffith$elm_codegen$Internal$Comments$Comment = $elm$core$Basics$identity;
    var $mdgriffith$elm_codegen$Internal$Comments$addPart_fn = function (_v0, part) {
        var parts = _v0;
        return _List_Cons(part, parts);
    }, $mdgriffith$elm_codegen$Internal$Comments$addPart = F2($mdgriffith$elm_codegen$Internal$Comments$addPart_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$fullModName = function (name) {
        return $elm$core$String$join_fn(".", name);
    };
    var $elm$core$List$sortBy = _List_sortBy;
    var $mdgriffith$elm_codegen$Internal$Render$dedupImports = function (mods) {
        return _List_sortBy_fn($mdgriffith$elm_codegen$Internal$Compiler$fullModName, $elm$core$List$foldl_fn_unwrapped(function (mod, _v0) {
            var set = _v0.a;
            var gathered = _v0.b;
            var stringName = $mdgriffith$elm_codegen$Internal$Compiler$fullModName(mod);
            return $elm$core$Set$member_fn(stringName, set) ? _Utils_Tuple2(set, gathered) : _Utils_Tuple2($elm$core$Set$insert_fn(stringName, set), _List_Cons(mod, gathered));
        }, _Utils_Tuple2($elm$core$Set$empty, _List_Nil), mods).b);
    };
    var $mdgriffith$elm_codegen$Internal$Comments$emptyComment = _List_Nil;
    var $mdgriffith$elm_codegen$Internal$Render$matchName_fn = function (one, two) {
        if (one.$ === 1) {
            if (two.$ === 1) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            var oneName = one.a;
            if (two.$ === 1) {
                return false;
            }
            else {
                var twoName = two.a;
                return _Utils_eq(oneName, twoName);
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Render$matchName = F2($mdgriffith$elm_codegen$Internal$Render$matchName_fn);
    var $mdgriffith$elm_codegen$Internal$Render$groupExposing = function (items) {
        return $elm$core$List$foldr_fn(F2(function (_v0, acc) {
            var maybeGroup = _v0.a;
            var name = _v0.b;
            if (!acc.b) {
                return _List_fromArray([
                    {
                        hj: maybeGroup,
                        hs: _List_fromArray([name])
                    }
                ]);
            }
            else {
                var top = acc.a;
                var groups = acc.b;
                return $mdgriffith$elm_codegen$Internal$Render$matchName_fn(maybeGroup, top.hj) ? _List_Cons({
                    hj: top.hj,
                    hs: _List_Cons(name, top.hs)
                }, groups) : _List_Cons({
                    hj: maybeGroup,
                    hs: _List_fromArray([name])
                }, acc);
            }
        }), _List_Nil, items);
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$builtIn = function (name) {
        _v0$4: while (true) {
            if (name.b && (!name.b.b)) {
                switch (name.a) {
                    case "List":
                        return true;
                    case "Maybe":
                        return true;
                    case "String":
                        return true;
                    case "Basics":
                        return true;
                    default:
                        break _v0$4;
                }
            }
            else {
                break _v0$4;
            }
        }
        return false;
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$findAlias_fn = function (modName, aliases) {
        findAlias: while (true) {
            if (!aliases.b) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var _v1 = aliases.a;
                var aliasModName = _v1.a;
                var alias = _v1.b;
                var remain = aliases.b;
                if (_Utils_eq(modName, aliasModName)) {
                    return $elm$core$Maybe$Just(alias);
                }
                else {
                    var $temp$modName = modName, $temp$aliases = remain;
                    modName = $temp$modName;
                    aliases = $temp$aliases;
                    continue findAlias;
                }
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$findAlias = F2($mdgriffith$elm_codegen$Internal$Compiler$findAlias_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$makeImport_fn = function (aliases, name) {
        if (!name.b) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var _v1 = $mdgriffith$elm_codegen$Internal$Compiler$findAlias_fn(name, aliases);
            if (_v1.$ === 1) {
                return $mdgriffith$elm_codegen$Internal$Compiler$builtIn(name) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just({
                    cX: $elm$core$Maybe$Nothing,
                    eA: $elm$core$Maybe$Nothing,
                    bt: $mdgriffith$elm_codegen$Internal$Compiler$nodify(name)
                });
            }
            else {
                var alias = _v1.a;
                return $elm$core$Maybe$Just({
                    cX: $elm$core$Maybe$Nothing,
                    eA: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Internal$Compiler$nodify(_List_fromArray([alias]))),
                    bt: $mdgriffith$elm_codegen$Internal$Compiler$nodify(name)
                });
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$makeImport = F2($mdgriffith$elm_codegen$Internal$Compiler$makeImport_fn);
    var $the_sett$elm_pretty_printer$Internals$Concatenate_fn = function (a, b) {
        return { $: 1, a: a, b: b };
    }, $the_sett$elm_pretty_printer$Internals$Concatenate = F2($the_sett$elm_pretty_printer$Internals$Concatenate_fn);
    var $the_sett$elm_pretty_printer$Pretty$append_fn = function (doc1, doc2) {
        return $the_sett$elm_pretty_printer$Internals$Concatenate_fn(function (_v0) {
            return doc1;
        }, function (_v1) {
            return doc2;
        });
    }, $the_sett$elm_pretty_printer$Pretty$append = F2($the_sett$elm_pretty_printer$Pretty$append_fn);
    var $elm_community$basics_extra$Basics$Extra$flip_fn = function (f, b, a) {
        return A2(f, a, b);
    }, $elm_community$basics_extra$Basics$Extra$flip_fn_unwrapped = function (f, b, a) {
        return f(a, b);
    }, $elm_community$basics_extra$Basics$Extra$flip = F3($elm_community$basics_extra$Basics$Extra$flip_fn);
    var $the_sett$elm_pretty_printer$Pretty$a_a0 = $the_sett$elm_pretty_printer$Pretty$append, $the_sett$elm_pretty_printer$Pretty$a = $elm_community$basics_extra$Basics$Extra$flip($the_sett$elm_pretty_printer$Pretty$a_a0);
    var $the_sett$elm_pretty_printer$Internals$Line_fn = function (a, b) {
        return { $: 4, a: a, b: b };
    }, $the_sett$elm_pretty_printer$Internals$Line = F2($the_sett$elm_pretty_printer$Internals$Line_fn);
    var $the_sett$elm_pretty_printer$Pretty$line = $the_sett$elm_pretty_printer$Internals$Line_fn(" ", "");
    var $the_sett$elm_pretty_printer$Internals$Empty = { $: 0 };
    var $the_sett$elm_pretty_printer$Pretty$empty = $the_sett$elm_pretty_printer$Internals$Empty;
    var $the_sett$elm_pretty_printer$Pretty$join_fn = function (sep, docs) {
        join: while (true) {
            if (!docs.b) {
                return $the_sett$elm_pretty_printer$Pretty$empty;
            }
            else {
                if (!docs.a.$) {
                    var _v1 = docs.a;
                    var ds = docs.b;
                    var $temp$sep = sep, $temp$docs = ds;
                    sep = $temp$sep;
                    docs = $temp$docs;
                    continue join;
                }
                else {
                    var d = docs.a;
                    var ds = docs.b;
                    var step = F2(function (x, rest) {
                        if (!x.$) {
                            return rest;
                        }
                        else {
                            var doc = x;
                            return $the_sett$elm_pretty_printer$Pretty$append_fn(sep, $the_sett$elm_pretty_printer$Pretty$append_fn(doc, rest));
                        }
                    });
                    var spersed = $elm$core$List$foldr_fn(step, $the_sett$elm_pretty_printer$Pretty$empty, ds);
                    return $the_sett$elm_pretty_printer$Pretty$append_fn(d, spersed);
                }
            }
        }
    }, $the_sett$elm_pretty_printer$Pretty$join = F2($the_sett$elm_pretty_printer$Pretty$join_fn);
    var $the_sett$elm_pretty_printer$Pretty$lines_a0 = $the_sett$elm_pretty_printer$Pretty$line, $the_sett$elm_pretty_printer$Pretty$lines = $the_sett$elm_pretty_printer$Pretty$join($the_sett$elm_pretty_printer$Pretty$lines_a0);
    var $mdgriffith$elm_codegen$Internal$Compiler$denodeMaybe_a0 = $mdgriffith$elm_codegen$Internal$Compiler$denode, $mdgriffith$elm_codegen$Internal$Compiler$denodeMaybe = $elm$core$Maybe$map($mdgriffith$elm_codegen$Internal$Compiler$denodeMaybe_a0);
    var $mdgriffith$elm_codegen$Internal$Compiler$denodeAll_a0 = $mdgriffith$elm_codegen$Internal$Compiler$denode, $mdgriffith$elm_codegen$Internal$Compiler$denodeAll = $elm$core$List$map($mdgriffith$elm_codegen$Internal$Compiler$denodeAll_a0);
    var $the_sett$elm_pretty_printer$Internals$Text_fn = function (a, b) {
        return { $: 3, a: a, b: b };
    }, $the_sett$elm_pretty_printer$Internals$Text = F2($the_sett$elm_pretty_printer$Internals$Text_fn);
    var $elm$core$String$cons = _String_cons;
    var $elm$core$String$fromChar = function (_char) {
        return _String_cons_fn(_char, "");
    };
    var $the_sett$elm_pretty_printer$Pretty$char = function (c) {
        return $the_sett$elm_pretty_printer$Internals$Text_fn($elm$core$String$fromChar(c), $elm$core$Maybe$Nothing);
    };
    var $the_sett$elm_pretty_printer$Pretty$surround_fn = function (left, right, doc) {
        return $the_sett$elm_pretty_printer$Pretty$append_fn($the_sett$elm_pretty_printer$Pretty$append_fn(left, doc), right);
    }, $the_sett$elm_pretty_printer$Pretty$surround = F3($the_sett$elm_pretty_printer$Pretty$surround_fn);
    var $the_sett$elm_pretty_printer$Pretty$parens = function (doc) {
        return $the_sett$elm_pretty_printer$Pretty$surround_fn($the_sett$elm_pretty_printer$Pretty$char("("), $the_sett$elm_pretty_printer$Pretty$char(")"), doc);
    };
    var $the_sett$elm_pretty_printer$Pretty$string = function (val) {
        return $the_sett$elm_pretty_printer$Internals$Text_fn(val, $elm$core$Maybe$Nothing);
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyTopLevelExpose = function (tlExpose) {
        switch (tlExpose.$) {
            case 0:
                var val = tlExpose.a;
                return $the_sett$elm_pretty_printer$Pretty$parens($the_sett$elm_pretty_printer$Pretty$string(val));
            case 1:
                var val = tlExpose.a;
                return $the_sett$elm_pretty_printer$Pretty$string(val);
            case 2:
                var val = tlExpose.a;
                return $the_sett$elm_pretty_printer$Pretty$string(val);
            default:
                var exposedType = tlExpose.a;
                var _v1 = exposedType.eW;
                if (_v1.$ === 1) {
                    return $the_sett$elm_pretty_printer$Pretty$string(exposedType.c);
                }
                else {
                    return $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$string("(..)"), $the_sett$elm_pretty_printer$Pretty$string(exposedType.c));
                }
        }
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyTopLevelExposes = function (exposes) {
        return $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$string(", "), $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Write$prettyTopLevelExpose, exposes));
    };
    var $stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose = function (a) {
        return { $: 0, a: a };
    };
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$combineTopLevelExposes = function (exposes) {
        if (!exposes.b) {
            return $stil4m$elm_syntax$Elm$Syntax$Exposing$InfixExpose("");
        }
        else {
            var hd = exposes.a;
            var tl = exposes.b;
            return $elm$core$List$foldl_fn_unwrapped(function (exp, result) {
                var _v1 = _Utils_Tuple2(exp, result);
                if (_v1.a.$ === 3) {
                    var typeExpose = _v1.a.a;
                    var _v2 = typeExpose.eW;
                    if (!_v2.$) {
                        return exp;
                    }
                    else {
                        return result;
                    }
                }
                else {
                    if (_v1.b.$ === 3) {
                        var typeExpose = _v1.b.a;
                        var _v3 = typeExpose.eW;
                        if (!_v3.$) {
                            return result;
                        }
                        else {
                            return exp;
                        }
                    }
                    else {
                        return result;
                    }
                }
            }, hd, tl);
        }
    };
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$topLevelExposeName = function (tle) {
        switch (tle.$) {
            case 0:
                var val = tle.a;
                return val;
            case 1:
                var val = tle.a;
                return val;
            case 2:
                var val = tle.a;
                return val;
            default:
                var exposedType = tle.a;
                return exposedType.c;
        }
    };
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$groupByExposingName = function (innerImports) {
        var _v0 = function () {
            if (!innerImports.b) {
                return _Utils_Tuple3("", _List_Nil, _List_fromArray([_List_Nil]));
            }
            else {
                var hd = innerImports.a;
                return $elm$core$List$foldl_fn_unwrapped(function (exp, _v2) {
                    var currName = _v2.a;
                    var currAccum = _v2.b;
                    var accum = _v2.c;
                    var nextName = $mdgriffith$elm_codegen$Internal$ImportsAndExposing$topLevelExposeName(exp);
                    return _Utils_eq(nextName, currName) ? _Utils_Tuple3(currName, _List_Cons(exp, currAccum), accum) : _Utils_Tuple3(nextName, _List_fromArray([exp]), _List_Cons(currAccum, accum));
                }, _Utils_Tuple3($mdgriffith$elm_codegen$Internal$ImportsAndExposing$topLevelExposeName(hd), _List_Nil, _List_Nil), innerImports);
            }
        }();
        var hdGroup = _v0.b;
        var remGroups = _v0.c;
        return $elm$core$List$reverse(_List_Cons(hdGroup, remGroups));
    };
    var $elm$core$List$sortWith = _List_sortWith;
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$topLevelExposeOrder_fn = function (tlel, tler) {
        var _v0 = _Utils_Tuple2(tlel, tler);
        if (!_v0.a.$) {
            if (!_v0.b.$) {
                return _Utils_compare_fn($mdgriffith$elm_codegen$Internal$ImportsAndExposing$topLevelExposeName(tlel), $mdgriffith$elm_codegen$Internal$ImportsAndExposing$topLevelExposeName(tler));
            }
            else {
                return 0;
            }
        }
        else {
            if (!_v0.b.$) {
                return 2;
            }
            else {
                return _Utils_compare_fn($mdgriffith$elm_codegen$Internal$ImportsAndExposing$topLevelExposeName(tlel), $mdgriffith$elm_codegen$Internal$ImportsAndExposing$topLevelExposeName(tler));
            }
        }
    }, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$topLevelExposeOrder = F2($mdgriffith$elm_codegen$Internal$ImportsAndExposing$topLevelExposeOrder_fn);
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$sortAndDedupExposings = function (tlExposings) {
        return $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$ImportsAndExposing$combineTopLevelExposes, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$groupByExposingName(_List_sortWith_fn($mdgriffith$elm_codegen$Internal$ImportsAndExposing$topLevelExposeOrder, tlExposings)));
    };
    var $the_sett$elm_pretty_printer$Pretty$space = $the_sett$elm_pretty_printer$Pretty$char(" ");
    var $mdgriffith$elm_codegen$Internal$Write$prettyExposing = function (exposing_) {
        var exposings = function () {
            if (!exposing_.$) {
                return $the_sett$elm_pretty_printer$Pretty$parens($the_sett$elm_pretty_printer$Pretty$string(".."));
            }
            else {
                var tll = exposing_.a;
                return $the_sett$elm_pretty_printer$Pretty$parens($mdgriffith$elm_codegen$Internal$Write$prettyTopLevelExposes($mdgriffith$elm_codegen$Internal$ImportsAndExposing$sortAndDedupExposings($elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeAll_a0, tll))));
            }
        }();
        return $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, exposings, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$space, $the_sett$elm_pretty_printer$Pretty$string("exposing")));
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyMaybe_fn = function (prettyFn, maybeVal) {
        return $elm$core$Maybe$withDefault_fn($the_sett$elm_pretty_printer$Pretty$empty, $elm$core$Maybe$map_fn(prettyFn, maybeVal));
    }, $mdgriffith$elm_codegen$Internal$Write$prettyMaybe = F2($mdgriffith$elm_codegen$Internal$Write$prettyMaybe_fn);
    var $mdgriffith$elm_codegen$Internal$Write$dot = $the_sett$elm_pretty_printer$Pretty$string(".");
    var $mdgriffith$elm_codegen$Internal$Write$prettyModuleName = function (name) {
        return $the_sett$elm_pretty_printer$Pretty$join_fn($mdgriffith$elm_codegen$Internal$Write$dot, $elm$core$List$map_fn($the_sett$elm_pretty_printer$Pretty$string, name));
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyModuleNameAlias = function (name) {
        if (!name.b) {
            return $the_sett$elm_pretty_printer$Pretty$empty;
        }
        else {
            return $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$join_fn($mdgriffith$elm_codegen$Internal$Write$dot, $elm$core$List$map_fn($the_sett$elm_pretty_printer$Pretty$string, name)), $the_sett$elm_pretty_printer$Pretty$string("as "));
        }
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyImport = function (import_) {
        return $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$space, _List_fromArray([
            $the_sett$elm_pretty_printer$Pretty$string("import"),
            $mdgriffith$elm_codegen$Internal$Write$prettyModuleName($mdgriffith$elm_codegen$Internal$Compiler$denode(import_.bt)),
            $mdgriffith$elm_codegen$Internal$Write$prettyMaybe_fn($mdgriffith$elm_codegen$Internal$Write$prettyModuleNameAlias, $elm$core$Maybe$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeMaybe_a0, import_.eA)),
            $mdgriffith$elm_codegen$Internal$Write$prettyMaybe_fn($mdgriffith$elm_codegen$Internal$Write$prettyExposing, $elm$core$Maybe$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeMaybe_a0, import_.cX))
        ]));
    };
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$denode = $stil4m$elm_syntax$Elm$Syntax$Node$value;
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$denodeMaybe_a0 = $mdgriffith$elm_codegen$Internal$ImportsAndExposing$denode, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$denodeMaybe = $elm$core$Maybe$map($mdgriffith$elm_codegen$Internal$ImportsAndExposing$denodeMaybe_a0);
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$denodeAll_a0 = $mdgriffith$elm_codegen$Internal$ImportsAndExposing$denode, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$denodeAll = $elm$core$List$map($mdgriffith$elm_codegen$Internal$ImportsAndExposing$denodeAll_a0);
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$nodify = function (exp) {
        return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, exp);
    };
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$nodifyAll_a0 = $mdgriffith$elm_codegen$Internal$ImportsAndExposing$nodify, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$nodifyAll = $elm$core$List$map($mdgriffith$elm_codegen$Internal$ImportsAndExposing$nodifyAll_a0);
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$joinExposings_fn = function (left, right) {
        var _v0 = _Utils_Tuple2(left, right);
        if (!_v0.a.$) {
            var range = _v0.a.a;
            return $stil4m$elm_syntax$Elm$Syntax$Exposing$All(range);
        }
        else {
            if (!_v0.b.$) {
                var range = _v0.b.a;
                return $stil4m$elm_syntax$Elm$Syntax$Exposing$All(range);
            }
            else {
                var leftNodes = _v0.a.a;
                var rightNodes = _v0.b.a;
                return $stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit($elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$ImportsAndExposing$nodifyAll_a0, $elm$core$List$append_fn($elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$ImportsAndExposing$denodeAll_a0, leftNodes), $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$ImportsAndExposing$denodeAll_a0, rightNodes))));
            }
        }
    }, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$joinExposings = F2($mdgriffith$elm_codegen$Internal$ImportsAndExposing$joinExposings_fn);
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$joinMaybeExposings_fn = function (maybeLeft, maybeRight) {
        var _v0 = _Utils_Tuple2(maybeLeft, maybeRight);
        if (_v0.a.$ === 1) {
            if (_v0.b.$ === 1) {
                var _v1 = _v0.a;
                var _v2 = _v0.b;
                return $elm$core$Maybe$Nothing;
            }
            else {
                var _v4 = _v0.a;
                var right = _v0.b.a;
                return $elm$core$Maybe$Just(right);
            }
        }
        else {
            if (_v0.b.$ === 1) {
                var left = _v0.a.a;
                var _v3 = _v0.b;
                return $elm$core$Maybe$Just(left);
            }
            else {
                var left = _v0.a.a;
                var right = _v0.b.a;
                return $elm$core$Maybe$Just($mdgriffith$elm_codegen$Internal$ImportsAndExposing$joinExposings_fn(left, right));
            }
        }
    }, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$joinMaybeExposings = F2($mdgriffith$elm_codegen$Internal$ImportsAndExposing$joinMaybeExposings_fn);
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$nodifyMaybe_a0 = $mdgriffith$elm_codegen$Internal$ImportsAndExposing$nodify, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$nodifyMaybe = $elm$core$Maybe$map($mdgriffith$elm_codegen$Internal$ImportsAndExposing$nodifyMaybe_a0);
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$or_fn = function (ma, mb) {
        if (ma.$ === 1) {
            return mb;
        }
        else {
            return ma;
        }
    }, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$or = F2($mdgriffith$elm_codegen$Internal$ImportsAndExposing$or_fn);
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$sortAndDedupExposing = function (exp) {
        if (!exp.$) {
            var range = exp.a;
            return $stil4m$elm_syntax$Elm$Syntax$Exposing$All(range);
        }
        else {
            var nodes = exp.a;
            return $stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit($elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$ImportsAndExposing$nodifyAll_a0, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$sortAndDedupExposings($elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$ImportsAndExposing$denodeAll_a0, nodes))));
        }
    };
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$combineImports = function (innerImports) {
        if (!innerImports.b) {
            return {
                cX: $elm$core$Maybe$Nothing,
                eA: $elm$core$Maybe$Nothing,
                bt: $mdgriffith$elm_codegen$Internal$ImportsAndExposing$nodify(_List_Nil)
            };
        }
        else {
            var hd = innerImports.a;
            var tl = innerImports.b;
            var combinedImports = $elm$core$List$foldl_fn_unwrapped(function (imp, result) {
                return {
                    cX: $elm$core$Maybe$map_fn($mdgriffith$elm_codegen$Internal$ImportsAndExposing$nodifyMaybe_a0, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$joinMaybeExposings_fn($elm$core$Maybe$map_fn($mdgriffith$elm_codegen$Internal$ImportsAndExposing$denodeMaybe_a0, imp.cX), $elm$core$Maybe$map_fn($mdgriffith$elm_codegen$Internal$ImportsAndExposing$denodeMaybe_a0, result.cX))),
                    eA: $mdgriffith$elm_codegen$Internal$ImportsAndExposing$or_fn(imp.eA, result.eA),
                    bt: imp.bt
                };
            }, hd, tl);
            return _Utils_update(combinedImports, {
                cX: $elm$core$Maybe$map_fn(A2($elm$core$Basics$composeR, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$denode, A2($elm$core$Basics$composeR, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$sortAndDedupExposing, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$nodify)), combinedImports.cX)
            });
        }
    };
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$groupByModuleName = function (innerImports) {
        var _v0 = function () {
            if (!innerImports.b) {
                return _Utils_Tuple3(_List_Nil, _List_Nil, _List_fromArray([_List_Nil]));
            }
            else {
                var hd = innerImports.a;
                return $elm$core$List$foldl_fn_unwrapped(function (imp, _v2) {
                    var currName = _v2.a;
                    var currAccum = _v2.b;
                    var accum = _v2.c;
                    var nextName = $mdgriffith$elm_codegen$Internal$ImportsAndExposing$denode(imp.bt);
                    return _Utils_eq(nextName, currName) ? _Utils_Tuple3(currName, _List_Cons(imp, currAccum), accum) : _Utils_Tuple3(nextName, _List_fromArray([imp]), _List_Cons(currAccum, accum));
                }, _Utils_Tuple3($mdgriffith$elm_codegen$Internal$ImportsAndExposing$denode(hd.bt), _List_Nil, _List_Nil), innerImports);
            }
        }();
        var hdGroup = _v0.b;
        var remGroups = _v0.c;
        return $elm$core$List$reverse(_List_Cons(hdGroup, remGroups));
    };
    var $mdgriffith$elm_codegen$Internal$ImportsAndExposing$sortAndDedupImports = function (imports) {
        var impName = function (imp) {
            return $mdgriffith$elm_codegen$Internal$ImportsAndExposing$denode(imp.bt);
        };
        return $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$ImportsAndExposing$combineImports, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$groupByModuleName(_List_sortBy_fn(impName, imports)));
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyImports = function (imports) {
        return $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$lines_a0, $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Write$prettyImport, $mdgriffith$elm_codegen$Internal$ImportsAndExposing$sortAndDedupImports(imports)));
    };
    var $mdgriffith$elm_codegen$Internal$Write$importsPretty = function (imports) {
        if (!imports.b) {
            return $the_sett$elm_pretty_printer$Pretty$line;
        }
        else {
            return $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $mdgriffith$elm_codegen$Internal$Write$prettyImports(imports))));
        }
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyComments = function (comments) {
        if (!comments.b) {
            return $the_sett$elm_pretty_printer$Pretty$empty;
        }
        else {
            return $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$lines_a0, $elm$core$List$map_fn($the_sett$elm_pretty_printer$Pretty$string, comments))));
        }
    };
    var $the_sett$elm_pretty_printer$Internals$Nest_fn = function (a, b) {
        return { $: 2, a: a, b: b };
    }, $the_sett$elm_pretty_printer$Internals$Nest = F2($the_sett$elm_pretty_printer$Internals$Nest_fn);
    var $the_sett$elm_pretty_printer$Pretty$nest_fn = function (depth, doc) {
        return $the_sett$elm_pretty_printer$Internals$Nest_fn(depth, function (_v0) {
            return doc;
        });
    }, $the_sett$elm_pretty_printer$Pretty$nest = F2($the_sett$elm_pretty_printer$Pretty$nest_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyDocumentation = function (docs) {
        return _String_contains_fn("\n", docs) ? $the_sett$elm_pretty_printer$Pretty$string("{-| " + (docs + "\n-}")) : $the_sett$elm_pretty_printer$Pretty$string("{-| " + (docs + " -}"));
    };
    var $the_sett$elm_pretty_printer$Internals$Union_fn = function (a, b) {
        return { $: 5, a: a, b: b };
    }, $the_sett$elm_pretty_printer$Internals$Union = F2($the_sett$elm_pretty_printer$Internals$Union_fn);
    var $the_sett$elm_pretty_printer$Internals$flatten = function (doc) {
        flatten: while (true) {
            switch (doc.$) {
                case 1:
                    var doc1 = doc.a;
                    var doc2 = doc.b;
                    return $the_sett$elm_pretty_printer$Internals$Concatenate_fn(function (_v1) {
                        return $the_sett$elm_pretty_printer$Internals$flatten(doc1(0));
                    }, function (_v2) {
                        return $the_sett$elm_pretty_printer$Internals$flatten(doc2(0));
                    });
                case 2:
                    var i = doc.a;
                    var doc1 = doc.b;
                    return $the_sett$elm_pretty_printer$Internals$Nest_fn(i, function (_v3) {
                        return $the_sett$elm_pretty_printer$Internals$flatten(doc1(0));
                    });
                case 5:
                    var doc1 = doc.a;
                    var doc2 = doc.b;
                    var $temp$doc = doc1;
                    doc = $temp$doc;
                    continue flatten;
                case 4:
                    var hsep = doc.a;
                    return $the_sett$elm_pretty_printer$Internals$Text_fn(hsep, $elm$core$Maybe$Nothing);
                case 6:
                    var fn = doc.a;
                    var $temp$doc = fn(0);
                    doc = $temp$doc;
                    continue flatten;
                case 7:
                    var fn = doc.a;
                    var $temp$doc = fn(0);
                    doc = $temp$doc;
                    continue flatten;
                default:
                    var x = doc;
                    return x;
            }
        }
    };
    var $the_sett$elm_pretty_printer$Pretty$group = function (doc) {
        return $the_sett$elm_pretty_printer$Internals$Union_fn($the_sett$elm_pretty_printer$Internals$flatten(doc), doc);
    };
    var $mdgriffith$elm_codegen$Internal$Write$isNakedCompound = function (typeAnn) {
        switch (typeAnn.$) {
            case 1:
                if (!typeAnn.b.b) {
                    return false;
                }
                else {
                    var args = typeAnn.b;
                    return true;
                }
            case 6:
                return true;
            default:
                return false;
        }
    };
    var $elm$core$Tuple$mapBoth_fn = function (funcA, funcB, _v0) {
        var x = _v0.a;
        var y = _v0.b;
        return _Utils_Tuple2(funcA(x), funcB(y));
    }, $elm$core$Tuple$mapBoth = F3($elm$core$Tuple$mapBoth_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyModuleNameDot_fn = function (aliases, name) {
        if (!name.b) {
            return $the_sett$elm_pretty_printer$Pretty$empty;
        }
        else {
            var _v1 = $mdgriffith$elm_codegen$Internal$Compiler$findAlias_fn(name, aliases);
            if (_v1.$ === 1) {
                return $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $mdgriffith$elm_codegen$Internal$Write$dot, $the_sett$elm_pretty_printer$Pretty$join_fn($mdgriffith$elm_codegen$Internal$Write$dot, $elm$core$List$map_fn($the_sett$elm_pretty_printer$Pretty$string, name)));
            }
            else {
                var alias = _v1.a;
                return $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $mdgriffith$elm_codegen$Internal$Write$dot, $the_sett$elm_pretty_printer$Pretty$string(alias));
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Write$prettyModuleNameDot = F2($mdgriffith$elm_codegen$Internal$Write$prettyModuleNameDot_fn);
    var $the_sett$elm_pretty_printer$Pretty$separators = function (sep) {
        return $the_sett$elm_pretty_printer$Pretty$join($the_sett$elm_pretty_printer$Internals$Line_fn(sep, sep));
    };
    var $the_sett$elm_pretty_printer$Pretty$words_a0 = $the_sett$elm_pretty_printer$Pretty$space, $the_sett$elm_pretty_printer$Pretty$words = $the_sett$elm_pretty_printer$Pretty$join($the_sett$elm_pretty_printer$Pretty$words_a0);
    var $mdgriffith$elm_codegen$Internal$Write$prettyFieldTypeAnn_fn = function (aliases, _v8) {
        var name = _v8.a;
        var ann = _v8.b;
        return $the_sett$elm_pretty_printer$Pretty$group($the_sett$elm_pretty_printer$Pretty$nest_fn(4, $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$lines_a0, _List_fromArray([
            $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([
                $the_sett$elm_pretty_printer$Pretty$string(name),
                $the_sett$elm_pretty_printer$Pretty$string(":")
            ])),
            $mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotation_fn(aliases, ann)
        ]))));
    }, $mdgriffith$elm_codegen$Internal$Write$prettyFieldTypeAnn = F2($mdgriffith$elm_codegen$Internal$Write$prettyFieldTypeAnn_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyFunctionTypeAnnotation_fn = function (aliases, left, right) {
        var expandLeft = function (ann) {
            if (ann.$ === 6) {
                return $mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotationParens_fn(aliases, ann);
            }
            else {
                return $mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotation_fn(aliases, ann);
            }
        };
        var innerFnTypeAnn = F2(function (innerLeft, innerRight) {
            var rightSide = expandRight($mdgriffith$elm_codegen$Internal$Compiler$denode(innerRight));
            if (rightSide.b) {
                var hd = rightSide.a;
                var tl = rightSide.b;
                return _List_Cons(expandLeft($mdgriffith$elm_codegen$Internal$Compiler$denode(innerLeft)), _List_Cons($the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([
                    $the_sett$elm_pretty_printer$Pretty$string("->"),
                    hd
                ])), tl));
            }
            else {
                return _List_Nil;
            }
        });
        var expandRight = function (ann) {
            if (ann.$ === 6) {
                var innerLeft = ann.a;
                var innerRight = ann.b;
                return A2(innerFnTypeAnn, innerLeft, innerRight);
            }
            else {
                return _List_fromArray([
                    $mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotation_fn(aliases, ann)
                ]);
            }
        };
        return $the_sett$elm_pretty_printer$Pretty$group($the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$lines_a0, A2(innerFnTypeAnn, left, right)));
    }, $mdgriffith$elm_codegen$Internal$Write$prettyFunctionTypeAnnotation = F3($mdgriffith$elm_codegen$Internal$Write$prettyFunctionTypeAnnotation_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyGenericRecord_fn = function (aliases, paramName, fields) {
        var open = $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([
            $the_sett$elm_pretty_printer$Pretty$string("{"),
            $the_sett$elm_pretty_printer$Pretty$string(paramName)
        ])));
        var close = $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$string("}"), $the_sett$elm_pretty_printer$Pretty$line);
        var addBarToFirst = function (exprs) {
            if (!exprs.b) {
                return _List_Nil;
            }
            else {
                var hd = exprs.a;
                var tl = exprs.b;
                return _List_Cons($elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, hd, $the_sett$elm_pretty_printer$Pretty$string("| ")), tl);
            }
        };
        if (!fields.b) {
            return $the_sett$elm_pretty_printer$Pretty$string("{}");
        }
        else {
            return $the_sett$elm_pretty_printer$Pretty$group($the_sett$elm_pretty_printer$Pretty$surround_fn($the_sett$elm_pretty_printer$Pretty$empty, close, $the_sett$elm_pretty_printer$Pretty$nest_fn(4, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, A2($the_sett$elm_pretty_printer$Pretty$separators, ", ", addBarToFirst($elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Write$prettyFieldTypeAnn(aliases), $elm$core$List$map_fn(A2($elm$core$Tuple$mapBoth, $mdgriffith$elm_codegen$Internal$Compiler$denode, $mdgriffith$elm_codegen$Internal$Compiler$denode), fields)))), open))));
        }
    }, $mdgriffith$elm_codegen$Internal$Write$prettyGenericRecord = F3($mdgriffith$elm_codegen$Internal$Write$prettyGenericRecord_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyRecord_fn = function (aliases, fields) {
        var open = $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$space, $the_sett$elm_pretty_printer$Pretty$string("{"));
        var close = $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$string("}"), $the_sett$elm_pretty_printer$Pretty$line);
        if (!fields.b) {
            return $the_sett$elm_pretty_printer$Pretty$string("{}");
        }
        else {
            return $the_sett$elm_pretty_printer$Pretty$group($the_sett$elm_pretty_printer$Pretty$surround_fn(open, close, A2($the_sett$elm_pretty_printer$Pretty$separators, ", ", $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Write$prettyFieldTypeAnn(aliases), $elm$core$List$map_fn(A2($elm$core$Tuple$mapBoth, $mdgriffith$elm_codegen$Internal$Compiler$denode, $mdgriffith$elm_codegen$Internal$Compiler$denode), fields)))));
        }
    }, $mdgriffith$elm_codegen$Internal$Write$prettyRecord = F2($mdgriffith$elm_codegen$Internal$Write$prettyRecord_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyTupled_fn = function (aliases, anns) {
        return $the_sett$elm_pretty_printer$Pretty$parens($elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$space, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$string(", "), $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotation(aliases), $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeAll_a0, anns))), $the_sett$elm_pretty_printer$Pretty$space)));
    }, $mdgriffith$elm_codegen$Internal$Write$prettyTupled = F2($mdgriffith$elm_codegen$Internal$Write$prettyTupled_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotation_fn = function (aliases, typeAnn) {
        switch (typeAnn.$) {
            case 0:
                var val = typeAnn.a;
                return $the_sett$elm_pretty_printer$Pretty$string(val);
            case 1:
                var fqName = typeAnn.a;
                var anns = typeAnn.b;
                return $mdgriffith$elm_codegen$Internal$Write$prettyTyped_fn(aliases, fqName, anns);
            case 2:
                return $the_sett$elm_pretty_printer$Pretty$string("()");
            case 3:
                var anns = typeAnn.a;
                return $mdgriffith$elm_codegen$Internal$Write$prettyTupled_fn(aliases, anns);
            case 4:
                var recordDef = typeAnn.a;
                return $mdgriffith$elm_codegen$Internal$Write$prettyRecord_fn(aliases, $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeAll_a0, recordDef));
            case 5:
                var paramName = typeAnn.a;
                var recordDef = typeAnn.b;
                return $mdgriffith$elm_codegen$Internal$Write$prettyGenericRecord_fn(aliases, $mdgriffith$elm_codegen$Internal$Compiler$denode(paramName), $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeAll_a0, $mdgriffith$elm_codegen$Internal$Compiler$denode(recordDef)));
            default:
                var fromAnn = typeAnn.a;
                var toAnn = typeAnn.b;
                return $mdgriffith$elm_codegen$Internal$Write$prettyFunctionTypeAnnotation_fn(aliases, fromAnn, toAnn);
        }
    }, $mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotation = F2($mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotation_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotationParens_fn = function (aliases, typeAnn) {
        return $mdgriffith$elm_codegen$Internal$Write$isNakedCompound(typeAnn) ? $the_sett$elm_pretty_printer$Pretty$parens($mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotation_fn(aliases, typeAnn)) : $mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotation_fn(aliases, typeAnn);
    }, $mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotationParens = F2($mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotationParens_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyTyped_fn = function (aliases, fqName, anns) {
        var argsDoc = $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotationParens(aliases), $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeAll_a0, anns)));
        var _v0 = $mdgriffith$elm_codegen$Internal$Compiler$denode(fqName);
        var moduleName = _v0.a;
        var typeName = _v0.b;
        var typeDoc = $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$string(typeName), $mdgriffith$elm_codegen$Internal$Write$prettyModuleNameDot_fn(aliases, moduleName));
        return $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([typeDoc, argsDoc]));
    }, $mdgriffith$elm_codegen$Internal$Write$prettyTyped = F3($mdgriffith$elm_codegen$Internal$Write$prettyTyped_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyValueConstructor_fn = function (aliases, cons) {
        return $the_sett$elm_pretty_printer$Pretty$nest_fn(4, $the_sett$elm_pretty_printer$Pretty$group($the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$lines_a0, _List_fromArray([
            $the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Compiler$denode(cons.c)),
            $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$lines_a0, $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotationParens(aliases), $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeAll_a0, cons.b6)))
        ]))));
    }, $mdgriffith$elm_codegen$Internal$Write$prettyValueConstructor = F2($mdgriffith$elm_codegen$Internal$Write$prettyValueConstructor_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyValueConstructors_fn = function (aliases, constructors) {
        return $the_sett$elm_pretty_printer$Pretty$join_fn($elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$string("| "), $the_sett$elm_pretty_printer$Pretty$line), $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Write$prettyValueConstructor(aliases), constructors));
    }, $mdgriffith$elm_codegen$Internal$Write$prettyValueConstructors = F2($mdgriffith$elm_codegen$Internal$Write$prettyValueConstructors_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyCustomType_fn = function (aliases, type_) {
        var customTypePretty = $the_sett$elm_pretty_printer$Pretty$nest_fn(4, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $mdgriffith$elm_codegen$Internal$Write$prettyValueConstructors_fn(aliases, $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeAll_a0, type_.gV)), $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$string("= "), $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([
            $the_sett$elm_pretty_printer$Pretty$string("type"),
            $the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Compiler$denode(type_.c)),
            $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, $elm$core$List$map_fn($the_sett$elm_pretty_printer$Pretty$string, $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeAll_a0, type_.dz)))
        ]))))));
        return $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$lines_a0, _List_fromArray([
            $mdgriffith$elm_codegen$Internal$Write$prettyMaybe_fn($mdgriffith$elm_codegen$Internal$Write$prettyDocumentation, $elm$core$Maybe$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeMaybe_a0, type_.be)),
            customTypePretty
        ]));
    }, $mdgriffith$elm_codegen$Internal$Write$prettyCustomType = F2($mdgriffith$elm_codegen$Internal$Write$prettyCustomType_fn);
    var $mdgriffith$elm_codegen$Internal$Write$adjustExpressionParentheses_fn = function (context, expression) {
        var shouldRemove = function (expr) {
            var _v3 = _Utils_Tuple3(context.L, context.K, expr);
            _v3$1: while (true) {
                if (_v3.a) {
                    return true;
                }
                else {
                    switch (_v3.c.$) {
                        case 1:
                            if (_v3.b) {
                                break _v3$1;
                            }
                            else {
                                return (context.l < 11) ? true : false;
                            }
                        case 3:
                            if (_v3.b) {
                                break _v3$1;
                            }
                            else {
                                var _v4 = _v3.c;
                                return true;
                            }
                        case 7:
                            if (_v3.b) {
                                break _v3$1;
                            }
                            else {
                                return true;
                            }
                        case 8:
                            if (_v3.b) {
                                break _v3$1;
                            }
                            else {
                                return true;
                            }
                        case 9:
                            if (_v3.b) {
                                break _v3$1;
                            }
                            else {
                                return true;
                            }
                        case 10:
                            if (_v3.b) {
                                break _v3$1;
                            }
                            else {
                                return true;
                            }
                        case 11:
                            if (_v3.b) {
                                break _v3$1;
                            }
                            else {
                                return true;
                            }
                        case 12:
                            if (_v3.b) {
                                break _v3$1;
                            }
                            else {
                                return true;
                            }
                        case 13:
                            if (_v3.b) {
                                break _v3$1;
                            }
                            else {
                                return true;
                            }
                        case 18:
                            if (_v3.b) {
                                break _v3$1;
                            }
                            else {
                                return true;
                            }
                        case 19:
                            if (_v3.b) {
                                break _v3$1;
                            }
                            else {
                                return true;
                            }
                        case 20:
                            if (_v3.b) {
                                break _v3$1;
                            }
                            else {
                                var _v5 = _v3.c;
                                return true;
                            }
                        case 21:
                            if (_v3.b) {
                                break _v3$1;
                            }
                            else {
                                return true;
                            }
                        case 22:
                            if (_v3.b) {
                                break _v3$1;
                            }
                            else {
                                var _v6 = _v3.c;
                                return true;
                            }
                        default:
                            if (_v3.b) {
                                break _v3$1;
                            }
                            else {
                                return false;
                            }
                    }
                }
            }
            return true;
        };
        var removeParens = function (expr) {
            if (expr.$ === 14) {
                var innerExpr = expr.a;
                return shouldRemove($mdgriffith$elm_codegen$Internal$Compiler$denode(innerExpr)) ? removeParens($mdgriffith$elm_codegen$Internal$Compiler$denode(innerExpr)) : expr;
            }
            else {
                return expr;
            }
        };
        var addParens = function (expr) {
            var _v1 = _Utils_Tuple3(context.L, context.K, expr);
            _v1$4: while (true) {
                if ((!_v1.a) && (!_v1.b)) {
                    switch (_v1.c.$) {
                        case 15:
                            return $stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression($mdgriffith$elm_codegen$Internal$Compiler$nodify(expr));
                        case 16:
                            return $stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression($mdgriffith$elm_codegen$Internal$Compiler$nodify(expr));
                        case 17:
                            return $stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression($mdgriffith$elm_codegen$Internal$Compiler$nodify(expr));
                        case 4:
                            var _v2 = _v1.c;
                            return $stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression($mdgriffith$elm_codegen$Internal$Compiler$nodify(expr));
                        default:
                            break _v1$4;
                    }
                }
                else {
                    break _v1$4;
                }
            }
            return expr;
        };
        return addParens(removeParens(expression));
    }, $mdgriffith$elm_codegen$Internal$Write$adjustExpressionParentheses = F2($mdgriffith$elm_codegen$Internal$Write$adjustExpressionParentheses_fn);
    var $the_sett$elm_pretty_printer$Internals$Column = function (a) {
        return { $: 7, a: a };
    };
    var $the_sett$elm_pretty_printer$Pretty$column = $the_sett$elm_pretty_printer$Internals$Column;
    var $the_sett$elm_pretty_printer$Internals$Nesting = function (a) {
        return { $: 6, a: a };
    };
    var $the_sett$elm_pretty_printer$Pretty$nesting = $the_sett$elm_pretty_printer$Internals$Nesting;
    var $the_sett$elm_pretty_printer$Pretty$align = function (doc) {
        return $the_sett$elm_pretty_printer$Pretty$column(function (currentColumn) {
            return $the_sett$elm_pretty_printer$Pretty$nesting(function (indentLvl) {
                return $the_sett$elm_pretty_printer$Pretty$nest_fn(currentColumn - indentLvl, doc);
            });
        });
    };
    var $elm$core$Basics$modBy = _Basics_modBy;
    var $mdgriffith$elm_codegen$Internal$Write$decrementIndent_fn = function (currentIndent, spaces) {
        var modded = _Basics_modBy_fn(4, currentIndent - spaces);
        return (!modded) ? 4 : modded;
    }, $mdgriffith$elm_codegen$Internal$Write$decrementIndent = F2($mdgriffith$elm_codegen$Internal$Write$decrementIndent_fn);
    var $mdgriffith$elm_codegen$Internal$Write$doubleLines_a0 = $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $the_sett$elm_pretty_printer$Pretty$line), $mdgriffith$elm_codegen$Internal$Write$doubleLines = $the_sett$elm_pretty_printer$Pretty$join($mdgriffith$elm_codegen$Internal$Write$doubleLines_a0);
    var $mdgriffith$elm_codegen$Internal$Write$escapeChar = function (val) {
        switch (val) {
            case "\\":
                return "\\\\";
            case "'":
                return "\\'";
            case "\t":
                return "\\t";
            case "\n":
                return "\\n";
            default:
                var c = val;
                return $elm$core$String$fromChar(c);
        }
    };
    var $elm$core$String$fromFloat = _String_fromNumber;
    var $the_sett$elm_pretty_printer$Internals$copy_fn = function (i, s) {
        return (!i) ? "" : _Utils_ap(s, $the_sett$elm_pretty_printer$Internals$copy_fn(i - 1, s));
    }, $the_sett$elm_pretty_printer$Internals$copy = F2($the_sett$elm_pretty_printer$Internals$copy_fn);
    var $the_sett$elm_pretty_printer$Pretty$hang_fn = function (spaces, doc) {
        return $the_sett$elm_pretty_printer$Pretty$align($the_sett$elm_pretty_printer$Pretty$nest_fn(spaces, doc));
    }, $the_sett$elm_pretty_printer$Pretty$hang = F2($the_sett$elm_pretty_printer$Pretty$hang_fn);
    var $the_sett$elm_pretty_printer$Pretty$indent_fn = function (spaces, doc) {
        return $the_sett$elm_pretty_printer$Pretty$hang_fn(spaces, $the_sett$elm_pretty_printer$Pretty$append_fn($the_sett$elm_pretty_printer$Pretty$string($the_sett$elm_pretty_printer$Internals$copy_fn(spaces, " ")), doc));
    }, $the_sett$elm_pretty_printer$Pretty$indent = F2($the_sett$elm_pretty_printer$Pretty$indent_fn);
    var $mdgriffith$elm_codegen$Internal$Write$optionalGroup_fn = function (flag, doc) {
        return flag ? doc : $the_sett$elm_pretty_printer$Pretty$group(doc);
    }, $mdgriffith$elm_codegen$Internal$Write$optionalGroup = F2($mdgriffith$elm_codegen$Internal$Write$optionalGroup_fn);
    var $mdgriffith$elm_codegen$Internal$Write$precedence = function (symbol) {
        switch (symbol) {
            case ">>":
                return 9;
            case "<<":
                return 9;
            case "^":
                return 8;
            case "*":
                return 7;
            case "/":
                return 7;
            case "//":
                return 7;
            case "%":
                return 7;
            case "rem":
                return 7;
            case "+":
                return 6;
            case "-":
                return 6;
            case "++":
                return 5;
            case "::":
                return 5;
            case "==":
                return 4;
            case "/=":
                return 4;
            case "<":
                return 4;
            case ">":
                return 4;
            case "<=":
                return 4;
            case ">=":
                return 4;
            case "&&":
                return 3;
            case "||":
                return 2;
            case "|>":
                return 0;
            case "<|":
                return 0;
            default:
                return 0;
        }
    };
    var $stil4m$elm_syntax$Elm$Syntax$Pattern$ParenthesizedPattern = function (a) {
        return { $: 14, a: a };
    };
    var $mdgriffith$elm_codegen$Internal$Write$adjustPatternParentheses_fn = function (isTop, pattern) {
        var shouldRemove = function (pat) {
            var _v5 = _Utils_Tuple2(isTop, pat);
            _v5$2: while (true) {
                switch (_v5.b.$) {
                    case 12:
                        if (!_v5.a) {
                            var _v6 = _v5.b;
                            return false;
                        }
                        else {
                            break _v5$2;
                        }
                    case 13:
                        var _v7 = _v5.b;
                        return false;
                    default:
                        break _v5$2;
                }
            }
            return isTop;
        };
        var removeParens = function (pat) {
            if (pat.$ === 14) {
                var innerPat = pat.a;
                return shouldRemove($mdgriffith$elm_codegen$Internal$Compiler$denode(innerPat)) ? removeParens($mdgriffith$elm_codegen$Internal$Compiler$denode(innerPat)) : pat;
            }
            else {
                return pat;
            }
        };
        var addParens = function (pat) {
            var _v1 = _Utils_Tuple2(isTop, pat);
            _v1$2: while (true) {
                if (!_v1.a) {
                    switch (_v1.b.$) {
                        case 12:
                            if (_v1.b.b.b) {
                                var _v2 = _v1.b;
                                var _v3 = _v2.b;
                                return $stil4m$elm_syntax$Elm$Syntax$Pattern$ParenthesizedPattern($mdgriffith$elm_codegen$Internal$Compiler$nodify(pat));
                            }
                            else {
                                break _v1$2;
                            }
                        case 13:
                            var _v4 = _v1.b;
                            return $stil4m$elm_syntax$Elm$Syntax$Pattern$ParenthesizedPattern($mdgriffith$elm_codegen$Internal$Compiler$nodify(pat));
                        default:
                            break _v1$2;
                    }
                }
                else {
                    break _v1$2;
                }
            }
            return pat;
        };
        return addParens(removeParens(pattern));
    }, $mdgriffith$elm_codegen$Internal$Write$adjustPatternParentheses = F2($mdgriffith$elm_codegen$Internal$Write$adjustPatternParentheses_fn);
    var $the_sett$elm_pretty_printer$Pretty$braces = function (doc) {
        return $the_sett$elm_pretty_printer$Pretty$surround_fn($the_sett$elm_pretty_printer$Pretty$char("{"), $the_sett$elm_pretty_printer$Pretty$char("}"), doc);
    };
    var $mdgriffith$elm_codegen$Internal$Write$quotes = function (doc) {
        return $the_sett$elm_pretty_printer$Pretty$surround_fn($the_sett$elm_pretty_printer$Pretty$char("\""), $the_sett$elm_pretty_printer$Pretty$char("\""), doc);
    };
    var $mdgriffith$elm_codegen$Internal$Write$singleQuotes = function (doc) {
        return $the_sett$elm_pretty_printer$Pretty$surround_fn($the_sett$elm_pretty_printer$Pretty$char("'"), $the_sett$elm_pretty_printer$Pretty$char("'"), doc);
    };
    var $elm$core$String$fromList = _String_fromList;
    var $elm$core$Basics$negate = function (n) {
        return -n;
    };
    var $rtfeldman$elm_hex$Hex$unsafeToDigit = function (num) {
        unsafeToDigit: while (true) {
            switch (num) {
                case 0:
                    return "0";
                case 1:
                    return "1";
                case 2:
                    return "2";
                case 3:
                    return "3";
                case 4:
                    return "4";
                case 5:
                    return "5";
                case 6:
                    return "6";
                case 7:
                    return "7";
                case 8:
                    return "8";
                case 9:
                    return "9";
                case 10:
                    return "a";
                case 11:
                    return "b";
                case 12:
                    return "c";
                case 13:
                    return "d";
                case 14:
                    return "e";
                case 15:
                    return "f";
                default:
                    var $temp$num = num;
                    num = $temp$num;
                    continue unsafeToDigit;
            }
        }
    };
    var $rtfeldman$elm_hex$Hex$unsafePositiveToDigits_fn = function (digits, num) {
        unsafePositiveToDigits: while (true) {
            if (num < 16) {
                return _List_Cons($rtfeldman$elm_hex$Hex$unsafeToDigit(num), digits);
            }
            else {
                var $temp$digits = _List_Cons($rtfeldman$elm_hex$Hex$unsafeToDigit(_Basics_modBy_fn(16, num)), digits), $temp$num = (num / 16) | 0;
                digits = $temp$digits;
                num = $temp$num;
                continue unsafePositiveToDigits;
            }
        }
    }, $rtfeldman$elm_hex$Hex$unsafePositiveToDigits = F2($rtfeldman$elm_hex$Hex$unsafePositiveToDigits_fn);
    var $rtfeldman$elm_hex$Hex$toString = function (num) {
        return $elm$core$String$fromList((num < 0) ? _List_Cons("-", $rtfeldman$elm_hex$Hex$unsafePositiveToDigits_fn(_List_Nil, -num)) : $rtfeldman$elm_hex$Hex$unsafePositiveToDigits_fn(_List_Nil, num));
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyPatternInner_fn = function (aliases, isTop, pattern) {
        var _v0 = $mdgriffith$elm_codegen$Internal$Write$adjustPatternParentheses_fn(isTop, pattern);
        switch (_v0.$) {
            case 0:
                return $the_sett$elm_pretty_printer$Pretty$string("_");
            case 1:
                return $the_sett$elm_pretty_printer$Pretty$string("()");
            case 2:
                var val = _v0.a;
                return $mdgriffith$elm_codegen$Internal$Write$singleQuotes($the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Write$escapeChar(val)));
            case 3:
                var val = _v0.a;
                return $mdgriffith$elm_codegen$Internal$Write$quotes($the_sett$elm_pretty_printer$Pretty$string(val));
            case 4:
                var val = _v0.a;
                return $the_sett$elm_pretty_printer$Pretty$string($elm$core$String$fromInt(val));
            case 5:
                var val = _v0.a;
                return $the_sett$elm_pretty_printer$Pretty$string($rtfeldman$elm_hex$Hex$toString(val));
            case 6:
                var val = _v0.a;
                return $the_sett$elm_pretty_printer$Pretty$string($elm$core$String$fromFloat(val));
            case 7:
                var vals = _v0.a;
                return $the_sett$elm_pretty_printer$Pretty$parens($elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$space, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$string(", "), $elm$core$List$map_fn(A2($mdgriffith$elm_codegen$Internal$Write$prettyPatternInner, aliases, true), $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeAll_a0, vals))), $the_sett$elm_pretty_printer$Pretty$space)));
            case 8:
                var fields = _v0.a;
                return $the_sett$elm_pretty_printer$Pretty$braces($the_sett$elm_pretty_printer$Pretty$surround_fn($the_sett$elm_pretty_printer$Pretty$space, $the_sett$elm_pretty_printer$Pretty$space, $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$string(", "), $elm$core$List$map_fn($the_sett$elm_pretty_printer$Pretty$string, $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeAll_a0, fields)))));
            case 9:
                var hdPat = _v0.a;
                var tlPat = _v0.b;
                return $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([
                    $mdgriffith$elm_codegen$Internal$Write$prettyPatternInner_fn(aliases, false, $mdgriffith$elm_codegen$Internal$Compiler$denode(hdPat)),
                    $the_sett$elm_pretty_printer$Pretty$string("::"),
                    $mdgriffith$elm_codegen$Internal$Write$prettyPatternInner_fn(aliases, false, $mdgriffith$elm_codegen$Internal$Compiler$denode(tlPat))
                ]));
            case 10:
                var listPats = _v0.a;
                if (!listPats.b) {
                    return $the_sett$elm_pretty_printer$Pretty$string("[]");
                }
                else {
                    var open = $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$space, $the_sett$elm_pretty_printer$Pretty$string("["));
                    var close = $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$string("]"), $the_sett$elm_pretty_printer$Pretty$space);
                    return $the_sett$elm_pretty_printer$Pretty$surround_fn(open, close, $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$string(", "), $elm$core$List$map_fn(A2($mdgriffith$elm_codegen$Internal$Write$prettyPatternInner, aliases, false), $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeAll_a0, listPats))));
                }
            case 11:
                var _var = _v0.a;
                return $the_sett$elm_pretty_printer$Pretty$string(_var);
            case 12:
                var qnRef = _v0.a;
                var listPats = _v0.b;
                return $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_Cons($elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$string(qnRef.c), $mdgriffith$elm_codegen$Internal$Write$prettyModuleNameDot_fn(aliases, qnRef.bt)), $elm$core$List$map_fn(A2($mdgriffith$elm_codegen$Internal$Write$prettyPatternInner, aliases, false), $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeAll_a0, listPats))));
            case 13:
                var pat = _v0.a;
                var name = _v0.b;
                return $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([
                    $mdgriffith$elm_codegen$Internal$Write$prettyPatternInner_fn(aliases, false, $mdgriffith$elm_codegen$Internal$Compiler$denode(pat)),
                    $the_sett$elm_pretty_printer$Pretty$string("as"),
                    $the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Compiler$denode(name))
                ]));
            default:
                var pat = _v0.a;
                return $the_sett$elm_pretty_printer$Pretty$parens($mdgriffith$elm_codegen$Internal$Write$prettyPatternInner_fn(aliases, true, $mdgriffith$elm_codegen$Internal$Compiler$denode(pat)));
        }
    }, $mdgriffith$elm_codegen$Internal$Write$prettyPatternInner = F3($mdgriffith$elm_codegen$Internal$Write$prettyPatternInner_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyArgs_fn = function (aliases, args) {
        return $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, $elm$core$List$map_fn(A2($mdgriffith$elm_codegen$Internal$Write$prettyPatternInner, aliases, false), args));
    }, $mdgriffith$elm_codegen$Internal$Write$prettyArgs = F2($mdgriffith$elm_codegen$Internal$Write$prettyArgs_fn);
    var $elm$core$String$replace_fn = function (before, after, string) {
        return $elm$core$String$join_fn(after, $elm$core$String$split_fn(before, string));
    }, $elm$core$String$replace = F3($elm$core$String$replace_fn);
    var $mdgriffith$elm_codegen$Internal$Write$escape = function (val) {
        return $elm$core$String$replace_fn("\t", "\\t", $elm$core$String$replace_fn("\n", "\\n", $elm$core$String$replace_fn("\"", "\\\"", $elm$core$String$replace_fn("\\", "\\\\", val))));
    };
    var $mdgriffith$elm_codegen$Internal$Write$tripleQuotes = function (doc) {
        return $the_sett$elm_pretty_printer$Pretty$surround_fn($the_sett$elm_pretty_printer$Pretty$string("\"\"\""), $the_sett$elm_pretty_printer$Pretty$string("\"\"\""), doc);
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyLiteral = function (val) {
        return _String_contains_fn("\n", val) ? $mdgriffith$elm_codegen$Internal$Write$tripleQuotes($the_sett$elm_pretty_printer$Pretty$string(val)) : $mdgriffith$elm_codegen$Internal$Write$quotes($the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Write$escape(val)));
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyPattern_fn = function (aliases, pattern) {
        return $mdgriffith$elm_codegen$Internal$Write$prettyPatternInner_fn(aliases, true, pattern);
    }, $mdgriffith$elm_codegen$Internal$Write$prettyPattern = F2($mdgriffith$elm_codegen$Internal$Write$prettyPattern_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettySignature_fn = function (aliases, sig) {
        return $the_sett$elm_pretty_printer$Pretty$group($the_sett$elm_pretty_printer$Pretty$nest_fn(4, $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$lines_a0, _List_fromArray([
            $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([
                $the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Compiler$denode(sig.c)),
                $the_sett$elm_pretty_printer$Pretty$string(":")
            ])),
            $mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotation_fn(aliases, $mdgriffith$elm_codegen$Internal$Compiler$denode(sig.a6))
        ]))));
    }, $mdgriffith$elm_codegen$Internal$Write$prettySignature = F2($mdgriffith$elm_codegen$Internal$Write$prettySignature_fn);
    var $the_sett$elm_pretty_printer$Pretty$tightline = $the_sett$elm_pretty_printer$Internals$Line_fn("", "");
    var $elm$core$String$padLeft_fn = function (n, _char, string) {
        return _Utils_ap($elm$core$String$repeat_fn(n - $elm$core$String$length(string), $elm$core$String$fromChar(_char)), string);
    }, $elm$core$String$padLeft = F3($elm$core$String$padLeft_fn);
    var $mdgriffith$elm_codegen$Internal$Write$toHexString = function (val) {
        var padWithZeros = function (str) {
            var length = $elm$core$String$length(str);
            return (length < 2) ? $elm$core$String$padLeft_fn(2, "0", str) : (((length > 2) && (length < 4)) ? $elm$core$String$padLeft_fn(4, "0", str) : (((length > 4) && (length < 8)) ? $elm$core$String$padLeft_fn(8, "0", str) : str));
        };
        return "0x" + padWithZeros($elm$core$String$toUpper($rtfeldman$elm_hex$Hex$toString(val)));
    };
    var $mdgriffith$elm_codegen$Internal$Write$topContext = { K: false, L: true, l: 11 };
    var $elm$core$List$unzip = function (pairs) {
        var aHead = _List_Cons(undefined, _List_Nil);
        var bHead = _List_Cons(undefined, _List_Nil);
        var aEnd = aHead;
        var bEnd = bHead;
        for (; pairs.b; pairs = pairs.b) {
            var tuple = pairs.a;
            var aNext = _List_Cons(tuple.a, _List_Nil);
            aEnd.b = aNext;
            aEnd = aNext;
            var bNext = _List_Cons(tuple.b, _List_Nil);
            bEnd.b = bNext;
            bEnd = bNext;
        }
        return _Utils_Tuple2(aHead.b, bHead.
            b);
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyApplication_fn = function (aliases, indent, exprs) {
        var _v30 = $elm$core$Tuple$mapSecond_fn($elm$core$List$any($elm$core$Basics$identity), $elm$core$List$unzip($elm$core$List$map_fn(A3($mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner, aliases, { K: false, L: false, l: 11 }, 4), $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeAll_a0, exprs))));
        var prettyExpressions = _v30.a;
        var alwaysBreak = _v30.b;
        return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Write$optionalGroup_fn(alwaysBreak, $the_sett$elm_pretty_printer$Pretty$align($the_sett$elm_pretty_printer$Pretty$nest_fn(indent, $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$lines_a0, prettyExpressions)))), alwaysBreak);
    }, $mdgriffith$elm_codegen$Internal$Write$prettyApplication = F3($mdgriffith$elm_codegen$Internal$Write$prettyApplication_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyCaseBlock_fn = function (aliases, indent, caseBlock) {
        var prettyCase = function (_v29) {
            var pattern = _v29.a;
            var expr = _v29.b;
            return $the_sett$elm_pretty_printer$Pretty$indent_fn(indent, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$indent_fn(4, $mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner_fn(aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, 4, $mdgriffith$elm_codegen$Internal$Compiler$denode(expr)).a), $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$string(" ->"), $mdgriffith$elm_codegen$Internal$Write$prettyPattern_fn(aliases, $mdgriffith$elm_codegen$Internal$Compiler$denode(pattern))))));
        };
        var patternsPart = $the_sett$elm_pretty_printer$Pretty$join_fn($mdgriffith$elm_codegen$Internal$Write$doubleLines_a0, $elm$core$List$map_fn(prettyCase, caseBlock.gP));
        var casePart = function () {
            var _v28 = $mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner_fn(aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, 4, $mdgriffith$elm_codegen$Internal$Compiler$denode(caseBlock._));
            var caseExpression = _v28.a;
            var alwaysBreak = _v28.b;
            return $mdgriffith$elm_codegen$Internal$Write$optionalGroup_fn(alwaysBreak, $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$lines_a0, _List_fromArray([
                $the_sett$elm_pretty_printer$Pretty$nest_fn(indent, $mdgriffith$elm_codegen$Internal$Write$optionalGroup_fn(alwaysBreak, $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$lines_a0, _List_fromArray([
                    $the_sett$elm_pretty_printer$Pretty$string("case"),
                    caseExpression
                ])))),
                $the_sett$elm_pretty_printer$Pretty$string("of")
            ])));
        }();
        return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$align($the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$lines_a0, _List_fromArray([casePart, patternsPart]))), true);
    }, $mdgriffith$elm_codegen$Internal$Write$prettyCaseBlock = F3($mdgriffith$elm_codegen$Internal$Write$prettyCaseBlock_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyExpression_fn = function (aliases, expression) {
        return $mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner_fn(aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, 4, expression).a;
    }, $mdgriffith$elm_codegen$Internal$Write$prettyExpression = F2($mdgriffith$elm_codegen$Internal$Write$prettyExpression_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner_fn = function (aliases, context, indent, expression) {
        var _v26 = $mdgriffith$elm_codegen$Internal$Write$adjustExpressionParentheses_fn(context, expression);
        switch (_v26.$) {
            case 0:
                return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$string("()"), false);
            case 1:
                var exprs = _v26.a;
                return $mdgriffith$elm_codegen$Internal$Write$prettyApplication_fn(aliases, indent, exprs);
            case 2:
                var symbol = _v26.a;
                var dir = _v26.b;
                var exprl = _v26.c;
                var exprr = _v26.d;
                return $mdgriffith$elm_codegen$Internal$Write$prettyOperatorApplication_fn(aliases, indent, symbol, dir, exprl, exprr);
            case 3:
                var modl = _v26.a;
                var val = _v26.b;
                return _Utils_Tuple2($elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$string(val), $mdgriffith$elm_codegen$Internal$Write$prettyModuleNameDot_fn(aliases, modl)), false);
            case 4:
                var exprBool = _v26.a;
                var exprTrue = _v26.b;
                var exprFalse = _v26.c;
                return $mdgriffith$elm_codegen$Internal$Write$prettyIfBlock_fn(aliases, indent, exprBool, exprTrue, exprFalse);
            case 5:
                var symbol = _v26.a;
                return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$parens($the_sett$elm_pretty_printer$Pretty$string(symbol)), false);
            case 6:
                var symbol = _v26.a;
                return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$string(symbol), false);
            case 7:
                var val = _v26.a;
                return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$string($elm$core$String$fromInt(val)), false);
            case 8:
                var val = _v26.a;
                return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Write$toHexString(val)), false);
            case 9:
                var val = _v26.a;
                return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$string($elm$core$String$fromFloat(val)), false);
            case 10:
                var expr = _v26.a;
                var _v27 = $mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner_fn(aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, 4, $mdgriffith$elm_codegen$Internal$Compiler$denode(expr));
                var prettyExpr = _v27.a;
                var alwaysBreak = _v27.b;
                return _Utils_Tuple2($elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, prettyExpr, $the_sett$elm_pretty_printer$Pretty$string("-")), alwaysBreak);
            case 11:
                var val = _v26.a;
                return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Write$prettyLiteral(val), false);
            case 12:
                var val = _v26.a;
                return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Write$singleQuotes($the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Write$escapeChar(val))), false);
            case 13:
                var exprs = _v26.a;
                return $mdgriffith$elm_codegen$Internal$Write$prettyTupledExpression_fn(aliases, indent, exprs);
            case 14:
                var expr = _v26.a;
                return $mdgriffith$elm_codegen$Internal$Write$prettyParenthesizedExpression_fn(aliases, indent, expr);
            case 15:
                var letBlock = _v26.a;
                return $mdgriffith$elm_codegen$Internal$Write$prettyLetBlock_fn(aliases, indent, letBlock);
            case 16:
                var caseBlock = _v26.a;
                return $mdgriffith$elm_codegen$Internal$Write$prettyCaseBlock_fn(aliases, indent, caseBlock);
            case 17:
                var lambda = _v26.a;
                return $mdgriffith$elm_codegen$Internal$Write$prettyLambdaExpression_fn(aliases, indent, lambda);
            case 18:
                var setters = _v26.a;
                return $mdgriffith$elm_codegen$Internal$Write$prettyRecordExpr_fn(aliases, setters);
            case 19:
                var exprs = _v26.a;
                return $mdgriffith$elm_codegen$Internal$Write$prettyList_fn(aliases, indent, exprs);
            case 20:
                var expr = _v26.a;
                var field = _v26.b;
                return $mdgriffith$elm_codegen$Internal$Write$prettyRecordAccess_fn(aliases, expr, field);
            case 21:
                var field = _v26.a;
                return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$string(field), false);
            case 22:
                var _var = _v26.a;
                var setters = _v26.b;
                return $mdgriffith$elm_codegen$Internal$Write$prettyRecordUpdateExpression_fn(aliases, indent, _var, setters);
            default:
                var val = _v26.a;
                return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$string("glsl"), true);
        }
    }, $mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner = F4($mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyFun_fn = function (aliases, fn) {
        return $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$lines_a0, _List_fromArray([
            $mdgriffith$elm_codegen$Internal$Write$prettyMaybe_fn($mdgriffith$elm_codegen$Internal$Write$prettyDocumentation, $elm$core$Maybe$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeMaybe_a0, fn.be)),
            $mdgriffith$elm_codegen$Internal$Write$prettyMaybe_fn($mdgriffith$elm_codegen$Internal$Write$prettySignature(aliases), $elm$core$Maybe$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeMaybe_a0, fn.hW)),
            $mdgriffith$elm_codegen$Internal$Write$prettyFunctionImplementation_fn(aliases, $mdgriffith$elm_codegen$Internal$Compiler$denode(fn.gX))
        ]));
    }, $mdgriffith$elm_codegen$Internal$Write$prettyFun = F2($mdgriffith$elm_codegen$Internal$Write$prettyFun_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyFunctionImplementation_fn = function (aliases, impl) {
        return $the_sett$elm_pretty_printer$Pretty$nest_fn(4, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $mdgriffith$elm_codegen$Internal$Write$prettyExpression_fn(aliases, $mdgriffith$elm_codegen$Internal$Compiler$denode(impl._)), $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([
            $the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Compiler$denode(impl.c)),
            $mdgriffith$elm_codegen$Internal$Write$prettyArgs_fn(aliases, $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeAll_a0, impl.b6)),
            $the_sett$elm_pretty_printer$Pretty$string("=")
        ])))));
    }, $mdgriffith$elm_codegen$Internal$Write$prettyFunctionImplementation = F2($mdgriffith$elm_codegen$Internal$Write$prettyFunctionImplementation_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyIfBlock_fn = function (aliases, indent, exprBool, exprTrue, exprFalse) {
        var innerIfBlock = F3(function (innerExprBool, innerExprTrue, innerExprFalse) {
            var truePart = $the_sett$elm_pretty_printer$Pretty$indent_fn(indent, $mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner_fn(aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, 4, $mdgriffith$elm_codegen$Internal$Compiler$denode(innerExprTrue)).a);
            var ifPart = function () {
                var _v25 = $mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner_fn(aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, 4, $mdgriffith$elm_codegen$Internal$Compiler$denode(innerExprBool));
                var prettyBoolExpr = _v25.a;
                var alwaysBreak = _v25.b;
                return $mdgriffith$elm_codegen$Internal$Write$optionalGroup_fn(alwaysBreak, $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$lines_a0, _List_fromArray([
                    $the_sett$elm_pretty_printer$Pretty$nest_fn(indent, $mdgriffith$elm_codegen$Internal$Write$optionalGroup_fn(alwaysBreak, $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$lines_a0, _List_fromArray([
                        $the_sett$elm_pretty_printer$Pretty$string("if"),
                        $mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner_fn(aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, 4, $mdgriffith$elm_codegen$Internal$Compiler$denode(innerExprBool)).a
                    ])))),
                    $the_sett$elm_pretty_printer$Pretty$string("then")
                ])));
            }();
            var falsePart = function () {
                var _v24 = $mdgriffith$elm_codegen$Internal$Compiler$denode(innerExprFalse);
                if (_v24.$ === 4) {
                    var nestedExprBool = _v24.a;
                    var nestedExprTrue = _v24.b;
                    var nestedExprFalse = _v24.c;
                    return A3(innerIfBlock, nestedExprBool, nestedExprTrue, nestedExprFalse);
                }
                else {
                    return _List_fromArray([
                        $the_sett$elm_pretty_printer$Pretty$indent_fn(indent, $mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner_fn(aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, 4, $mdgriffith$elm_codegen$Internal$Compiler$denode(innerExprFalse)).a)
                    ]);
                }
            }();
            var elsePart = $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$string("else"), $the_sett$elm_pretty_printer$Pretty$line);
            var context = $mdgriffith$elm_codegen$Internal$Write$topContext;
            if (!falsePart.b) {
                return _List_Nil;
            }
            else {
                if (!falsePart.b.b) {
                    var falseExpr = falsePart.a;
                    return _List_fromArray([ifPart, truePart, elsePart, falseExpr]);
                }
                else {
                    var hd = falsePart.a;
                    var tl = falsePart.b;
                    return $elm$core$List$append_fn(_List_fromArray([
                        ifPart,
                        truePart,
                        $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([elsePart, hd]))
                    ]), tl);
                }
            }
        });
        var prettyExpressions = A3(innerIfBlock, exprBool, exprTrue, exprFalse);
        return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$align($the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$lines_a0, prettyExpressions)), true);
    }, $mdgriffith$elm_codegen$Internal$Write$prettyIfBlock = F5($mdgriffith$elm_codegen$Internal$Write$prettyIfBlock_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyLambdaExpression_fn = function (aliases, indent, lambda) {
        var _v22 = $mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner_fn(aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, 4, $mdgriffith$elm_codegen$Internal$Compiler$denode(lambda._));
        var prettyExpr = _v22.a;
        var alwaysBreak = _v22.b;
        return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Write$optionalGroup_fn(alwaysBreak, $the_sett$elm_pretty_printer$Pretty$align($the_sett$elm_pretty_printer$Pretty$nest_fn(indent, $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$lines_a0, _List_fromArray([
            $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$string(" ->"), $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, $elm$core$List$map_fn(A2($mdgriffith$elm_codegen$Internal$Write$prettyPatternInner, aliases, false), $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeAll_a0, lambda.r))), $the_sett$elm_pretty_printer$Pretty$string("\\"))),
            prettyExpr
        ]))))), alwaysBreak);
    }, $mdgriffith$elm_codegen$Internal$Write$prettyLambdaExpression = F3($mdgriffith$elm_codegen$Internal$Write$prettyLambdaExpression_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyLetBlock_fn = function (aliases, indent, letBlock) {
        return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$align($the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$lines_a0, _List_fromArray([
            $the_sett$elm_pretty_printer$Pretty$string("let"),
            $the_sett$elm_pretty_printer$Pretty$indent_fn(indent, $the_sett$elm_pretty_printer$Pretty$join_fn($mdgriffith$elm_codegen$Internal$Write$doubleLines_a0, $elm$core$List$map_fn(A2($mdgriffith$elm_codegen$Internal$Write$prettyLetDeclaration, aliases, indent), $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeAll_a0, letBlock.t)))),
            $the_sett$elm_pretty_printer$Pretty$string("in"),
            $mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner_fn(aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, 4, $mdgriffith$elm_codegen$Internal$Compiler$denode(letBlock._)).a
        ]))), true);
    }, $mdgriffith$elm_codegen$Internal$Write$prettyLetBlock = F3($mdgriffith$elm_codegen$Internal$Write$prettyLetBlock_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyLetDeclaration_fn = function (aliases, indent, letDecl) {
        if (!letDecl.$) {
            var fn = letDecl.a;
            return $mdgriffith$elm_codegen$Internal$Write$prettyFun_fn(aliases, fn);
        }
        else {
            var pattern = letDecl.a;
            var expr = letDecl.b;
            return $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$indent_fn(indent, $mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner_fn(aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, 4, $mdgriffith$elm_codegen$Internal$Compiler$denode(expr)).a), $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([
                $mdgriffith$elm_codegen$Internal$Write$prettyPatternInner_fn(aliases, false, $mdgriffith$elm_codegen$Internal$Compiler$denode(pattern)),
                $the_sett$elm_pretty_printer$Pretty$string("=")
            ]))));
        }
    }, $mdgriffith$elm_codegen$Internal$Write$prettyLetDeclaration = F3($mdgriffith$elm_codegen$Internal$Write$prettyLetDeclaration_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyList_fn = function (aliases, indent, exprs) {
        var open = $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$space, $the_sett$elm_pretty_printer$Pretty$string("["));
        var close = $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$string("]"), $the_sett$elm_pretty_printer$Pretty$line);
        if (!exprs.b) {
            return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$string("[]"), false);
        }
        else {
            var _v20 = $elm$core$Tuple$mapSecond_fn($elm$core$List$any($elm$core$Basics$identity), $elm$core$List$unzip($elm$core$List$map_fn(A3($mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner, aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, $mdgriffith$elm_codegen$Internal$Write$decrementIndent_fn(indent, 2)), $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeAll_a0, exprs))));
            var prettyExpressions = _v20.a;
            var alwaysBreak = _v20.b;
            return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Write$optionalGroup_fn(alwaysBreak, $the_sett$elm_pretty_printer$Pretty$align($the_sett$elm_pretty_printer$Pretty$surround_fn(open, close, A2($the_sett$elm_pretty_printer$Pretty$separators, ", ", prettyExpressions)))), alwaysBreak);
        }
    }, $mdgriffith$elm_codegen$Internal$Write$prettyList = F3($mdgriffith$elm_codegen$Internal$Write$prettyList_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyOperatorApplication_fn = function (aliases, indent, symbol, dir, exprl, exprr) {
        return (symbol === "<|") ? $mdgriffith$elm_codegen$Internal$Write$prettyOperatorApplicationLeft_fn(aliases, indent, symbol, dir, exprl, exprr) : $mdgriffith$elm_codegen$Internal$Write$prettyOperatorApplicationRight_fn(aliases, indent, symbol, dir, exprl, exprr);
    }, $mdgriffith$elm_codegen$Internal$Write$prettyOperatorApplication = F6($mdgriffith$elm_codegen$Internal$Write$prettyOperatorApplication_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyOperatorApplicationLeft_fn = function (aliases, indent, symbol, _v16, exprl, exprr) {
        var context = {
            K: true,
            L: false,
            l: $mdgriffith$elm_codegen$Internal$Write$precedence(symbol)
        };
        var _v17 = $mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner_fn(aliases, context, 4, $mdgriffith$elm_codegen$Internal$Compiler$denode(exprr));
        var prettyExpressionRight = _v17.a;
        var alwaysBreakRight = _v17.b;
        var _v18 = $mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner_fn(aliases, context, 4, $mdgriffith$elm_codegen$Internal$Compiler$denode(exprl));
        var prettyExpressionLeft = _v18.a;
        var alwaysBreakLeft = _v18.b;
        var alwaysBreak = alwaysBreakLeft || alwaysBreakRight;
        return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$nest_fn(4, $mdgriffith$elm_codegen$Internal$Write$optionalGroup_fn(alwaysBreak, $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$lines_a0, _List_fromArray([
            $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([
                prettyExpressionLeft,
                $the_sett$elm_pretty_printer$Pretty$string(symbol)
            ])),
            prettyExpressionRight
        ])))), alwaysBreak);
    }, $mdgriffith$elm_codegen$Internal$Write$prettyOperatorApplicationLeft = F6($mdgriffith$elm_codegen$Internal$Write$prettyOperatorApplicationLeft_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyOperatorApplicationRight_fn = function (aliases, indent, symbol, _v11, exprl, exprr) {
        var expandExpr = F3(function (innerIndent, context, expr) {
            if (expr.$ === 2) {
                var sym = expr.a;
                var left = expr.c;
                var right = expr.d;
                return A4(innerOpApply, false, sym, left, right);
            }
            else {
                return _List_fromArray([
                    $mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner_fn(aliases, context, innerIndent, expr)
                ]);
            }
        });
        var innerOpApply = F4(function (isTop, sym, left, right) {
            var innerIndent = $mdgriffith$elm_codegen$Internal$Write$decrementIndent_fn(4, $elm$core$String$length(symbol) + 1);
            var leftIndent = isTop ? indent : innerIndent;
            var context = {
                K: "<|" === sym,
                L: false,
                l: $mdgriffith$elm_codegen$Internal$Write$precedence(sym)
            };
            var rightSide = A3(expandExpr, innerIndent, context, $mdgriffith$elm_codegen$Internal$Compiler$denode(right));
            if (rightSide.b) {
                var _v14 = rightSide.a;
                var hdExpr = _v14.a;
                var hdBreak = _v14.b;
                var tl = rightSide.b;
                return $elm$core$List$append_fn(A3(expandExpr, leftIndent, context, $mdgriffith$elm_codegen$Internal$Compiler$denode(left)), _List_Cons(_Utils_Tuple2($elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, hdExpr, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$space, $the_sett$elm_pretty_printer$Pretty$string(sym))), hdBreak), tl));
            }
            else {
                return _List_Nil;
            }
        });
        var _v12 = $elm$core$Tuple$mapSecond_fn($elm$core$List$any($elm$core$Basics$identity), $elm$core$List$unzip(A4(innerOpApply, true, symbol, exprl, exprr)));
        var prettyExpressions = _v12.a;
        var alwaysBreak = _v12.b;
        return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Write$optionalGroup_fn(alwaysBreak, $the_sett$elm_pretty_printer$Pretty$align($the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$nest_fn(indent, $the_sett$elm_pretty_printer$Pretty$line), prettyExpressions))), alwaysBreak);
    }, $mdgriffith$elm_codegen$Internal$Write$prettyOperatorApplicationRight = F6($mdgriffith$elm_codegen$Internal$Write$prettyOperatorApplicationRight_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyParenthesizedExpression_fn = function (aliases, indent, expr) {
        var open = $the_sett$elm_pretty_printer$Pretty$string("(");
        var close = $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$string(")"), $the_sett$elm_pretty_printer$Pretty$tightline);
        var _v10 = $mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner_fn(aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, $mdgriffith$elm_codegen$Internal$Write$decrementIndent_fn(indent, 1), $mdgriffith$elm_codegen$Internal$Compiler$denode(expr));
        var prettyExpr = _v10.a;
        var alwaysBreak = _v10.b;
        return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Write$optionalGroup_fn(alwaysBreak, $the_sett$elm_pretty_printer$Pretty$align($the_sett$elm_pretty_printer$Pretty$surround_fn(open, close, $the_sett$elm_pretty_printer$Pretty$nest_fn(1, prettyExpr)))), alwaysBreak);
    }, $mdgriffith$elm_codegen$Internal$Write$prettyParenthesizedExpression = F3($mdgriffith$elm_codegen$Internal$Write$prettyParenthesizedExpression_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyRecordAccess_fn = function (aliases, expr, field) {
        var _v9 = $mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner_fn(aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, 4, $mdgriffith$elm_codegen$Internal$Compiler$denode(expr));
        var prettyExpr = _v9.a;
        var alwaysBreak = _v9.b;
        return _Utils_Tuple2($elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Compiler$denode(field)), $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $mdgriffith$elm_codegen$Internal$Write$dot, prettyExpr)), alwaysBreak);
    }, $mdgriffith$elm_codegen$Internal$Write$prettyRecordAccess = F3($mdgriffith$elm_codegen$Internal$Write$prettyRecordAccess_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyRecordExpr_fn = function (aliases, setters) {
        var open = $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$space, $the_sett$elm_pretty_printer$Pretty$string("{"));
        var close = $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$string("}"), $the_sett$elm_pretty_printer$Pretty$line);
        if (!setters.b) {
            return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$string("{}"), false);
        }
        else {
            var _v8 = $elm$core$Tuple$mapSecond_fn($elm$core$List$any($elm$core$Basics$identity), $elm$core$List$unzip($elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Write$prettySetter(aliases), $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeAll_a0, setters))));
            var prettyExpressions = _v8.a;
            var alwaysBreak = _v8.b;
            return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Write$optionalGroup_fn(alwaysBreak, $the_sett$elm_pretty_printer$Pretty$align($the_sett$elm_pretty_printer$Pretty$surround_fn(open, close, A2($the_sett$elm_pretty_printer$Pretty$separators, ", ", prettyExpressions)))), alwaysBreak);
        }
    }, $mdgriffith$elm_codegen$Internal$Write$prettyRecordExpr = F2($mdgriffith$elm_codegen$Internal$Write$prettyRecordExpr_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyRecordUpdateExpression_fn = function (aliases, indent, _var, setters) {
        var open = $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([
            $the_sett$elm_pretty_printer$Pretty$string("{"),
            $the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Compiler$denode(_var))
        ])));
        var close = $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$string("}"), $the_sett$elm_pretty_printer$Pretty$line);
        var addBarToFirst = function (exprs) {
            if (!exprs.b) {
                return _List_Nil;
            }
            else {
                var hd = exprs.a;
                var tl = exprs.b;
                return _List_Cons($elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, hd, $the_sett$elm_pretty_printer$Pretty$string("| ")), tl);
            }
        };
        if (!setters.b) {
            return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$string("{}"), false);
        }
        else {
            var _v5 = $elm$core$Tuple$mapSecond_fn($elm$core$List$any($elm$core$Basics$identity), $elm$core$List$unzip($elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Write$prettySetter(aliases), $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeAll_a0, setters))));
            var prettyExpressions = _v5.a;
            var alwaysBreak = _v5.b;
            return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Write$optionalGroup_fn(alwaysBreak, $the_sett$elm_pretty_printer$Pretty$align($the_sett$elm_pretty_printer$Pretty$surround_fn($the_sett$elm_pretty_printer$Pretty$empty, close, $the_sett$elm_pretty_printer$Pretty$nest_fn(indent, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, A2($the_sett$elm_pretty_printer$Pretty$separators, ", ", addBarToFirst(prettyExpressions)), open))))), alwaysBreak);
        }
    }, $mdgriffith$elm_codegen$Internal$Write$prettyRecordUpdateExpression = F4($mdgriffith$elm_codegen$Internal$Write$prettyRecordUpdateExpression_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettySetter_fn = function (aliases, _v2) {
        var fld = _v2.a;
        var val = _v2.b;
        var _v3 = $mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner_fn(aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, 4, $mdgriffith$elm_codegen$Internal$Compiler$denode(val));
        var prettyExpr = _v3.a;
        var alwaysBreak = _v3.b;
        return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$nest_fn(4, $mdgriffith$elm_codegen$Internal$Write$optionalGroup_fn(alwaysBreak, $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$lines_a0, _List_fromArray([
            $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([
                $the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Compiler$denode(fld)),
                $the_sett$elm_pretty_printer$Pretty$string("=")
            ])),
            prettyExpr
        ])))), alwaysBreak);
    }, $mdgriffith$elm_codegen$Internal$Write$prettySetter = F2($mdgriffith$elm_codegen$Internal$Write$prettySetter_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyTupledExpression_fn = function (aliases, indent, exprs) {
        var open = $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$space, $the_sett$elm_pretty_printer$Pretty$string("("));
        var close = $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$string(")"), $the_sett$elm_pretty_printer$Pretty$line);
        if (!exprs.b) {
            return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$string("()"), false);
        }
        else {
            var _v1 = $elm$core$Tuple$mapSecond_fn($elm$core$List$any($elm$core$Basics$identity), $elm$core$List$unzip($elm$core$List$map_fn(A3($mdgriffith$elm_codegen$Internal$Write$prettyExpressionInner, aliases, $mdgriffith$elm_codegen$Internal$Write$topContext, $mdgriffith$elm_codegen$Internal$Write$decrementIndent_fn(indent, 2)), $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeAll_a0, exprs))));
            var prettyExpressions = _v1.a;
            var alwaysBreak = _v1.b;
            return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Write$optionalGroup_fn(alwaysBreak, $the_sett$elm_pretty_printer$Pretty$align($the_sett$elm_pretty_printer$Pretty$surround_fn(open, close, A2($the_sett$elm_pretty_printer$Pretty$separators, ", ", prettyExpressions)))), alwaysBreak);
        }
    }, $mdgriffith$elm_codegen$Internal$Write$prettyTupledExpression = F3($mdgriffith$elm_codegen$Internal$Write$prettyTupledExpression_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyDestructuring_fn = function (aliases, pattern, expr) {
        return $the_sett$elm_pretty_printer$Pretty$nest_fn(4, $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$lines_a0, _List_fromArray([
            $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([
                $mdgriffith$elm_codegen$Internal$Write$prettyPattern_fn(aliases, pattern),
                $the_sett$elm_pretty_printer$Pretty$string("=")
            ])),
            $mdgriffith$elm_codegen$Internal$Write$prettyExpression_fn(aliases, expr)
        ])));
    }, $mdgriffith$elm_codegen$Internal$Write$prettyDestructuring = F3($mdgriffith$elm_codegen$Internal$Write$prettyDestructuring_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyInfix = function (infix_) {
        var dirToString = function (direction) {
            switch (direction) {
                case 0:
                    return "left";
                case 1:
                    return "right";
                default:
                    return "non";
            }
        };
        return $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([
            $the_sett$elm_pretty_printer$Pretty$string("infix"),
            $the_sett$elm_pretty_printer$Pretty$string(dirToString($mdgriffith$elm_codegen$Internal$Compiler$denode(infix_.i))),
            $the_sett$elm_pretty_printer$Pretty$string($elm$core$String$fromInt($mdgriffith$elm_codegen$Internal$Compiler$denode(infix_.l))),
            $the_sett$elm_pretty_printer$Pretty$parens($the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Compiler$denode(infix_.k))),
            $the_sett$elm_pretty_printer$Pretty$string("="),
            $the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Compiler$denode(infix_.j))
        ]));
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyPortDeclaration_fn = function (aliases, sig) {
        return $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([
            $the_sett$elm_pretty_printer$Pretty$string("port"),
            $mdgriffith$elm_codegen$Internal$Write$prettySignature_fn(aliases, sig)
        ]));
    }, $mdgriffith$elm_codegen$Internal$Write$prettyPortDeclaration = F2($mdgriffith$elm_codegen$Internal$Write$prettyPortDeclaration_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyTypeAlias_fn = function (aliases, tAlias) {
        var typeAliasPretty = $the_sett$elm_pretty_printer$Pretty$nest_fn(4, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $mdgriffith$elm_codegen$Internal$Write$prettyTypeAnnotation_fn(aliases, $mdgriffith$elm_codegen$Internal$Compiler$denode(tAlias.a6)), $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([
            $the_sett$elm_pretty_printer$Pretty$string("type alias"),
            $the_sett$elm_pretty_printer$Pretty$string($mdgriffith$elm_codegen$Internal$Compiler$denode(tAlias.c)),
            $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, $elm$core$List$map_fn($the_sett$elm_pretty_printer$Pretty$string, $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeAll_a0, tAlias.dz))),
            $the_sett$elm_pretty_printer$Pretty$string("=")
        ])))));
        return $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$lines_a0, _List_fromArray([
            $mdgriffith$elm_codegen$Internal$Write$prettyMaybe_fn($mdgriffith$elm_codegen$Internal$Write$prettyDocumentation, $elm$core$Maybe$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeMaybe_a0, tAlias.be)),
            typeAliasPretty
        ]));
    }, $mdgriffith$elm_codegen$Internal$Write$prettyTypeAlias = F2($mdgriffith$elm_codegen$Internal$Write$prettyTypeAlias_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyElmSyntaxDeclaration_fn = function (aliases, decl) {
        switch (decl.$) {
            case 0:
                var fn = decl.a;
                return $mdgriffith$elm_codegen$Internal$Write$prettyFun_fn(aliases, fn);
            case 1:
                var tAlias = decl.a;
                return $mdgriffith$elm_codegen$Internal$Write$prettyTypeAlias_fn(aliases, tAlias);
            case 2:
                var type_ = decl.a;
                return $mdgriffith$elm_codegen$Internal$Write$prettyCustomType_fn(aliases, type_);
            case 3:
                var sig = decl.a;
                return $mdgriffith$elm_codegen$Internal$Write$prettyPortDeclaration_fn(aliases, sig);
            case 4:
                var infix_ = decl.a;
                return $mdgriffith$elm_codegen$Internal$Write$prettyInfix(infix_);
            default:
                var pattern = decl.a;
                var expr = decl.b;
                return $mdgriffith$elm_codegen$Internal$Write$prettyDestructuring_fn(aliases, $mdgriffith$elm_codegen$Internal$Compiler$denode(pattern), $mdgriffith$elm_codegen$Internal$Compiler$denode(expr));
        }
    }, $mdgriffith$elm_codegen$Internal$Write$prettyElmSyntaxDeclaration = F2($mdgriffith$elm_codegen$Internal$Write$prettyElmSyntaxDeclaration_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyDeclarations_fn = function (aliases, decls) {
        return $elm$core$List$foldl_fn_unwrapped(function (decl, doc) {
            switch (decl.$) {
                case 1:
                    var content = decl.a;
                    return $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$string(content + "\n"), doc)));
                case 2:
                    var source = decl.a;
                    return $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$string(source), doc))));
                default:
                    var innerDecl = decl.a;
                    return $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $mdgriffith$elm_codegen$Internal$Write$prettyElmSyntaxDeclaration_fn(aliases, innerDecl), doc))));
            }
        }, $the_sett$elm_pretty_printer$Pretty$empty, decls);
    }, $mdgriffith$elm_codegen$Internal$Write$prettyDeclarations = F2($mdgriffith$elm_codegen$Internal$Write$prettyDeclarations_fn);
    var $mdgriffith$elm_codegen$Internal$Comments$delimeters = function (doc) {
        return $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$string("-}"), $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, doc, $the_sett$elm_pretty_printer$Pretty$string("{-| "))));
    };
    var $mdgriffith$elm_codegen$Internal$Comments$getParts = function (_v0) {
        var parts = _v0;
        return $elm$core$List$reverse(parts);
    };
    var $mdgriffith$elm_codegen$Internal$Comments$DocTags = function (a) {
        return { $: 2, a: a };
    };
    var $mdgriffith$elm_codegen$Internal$Comments$fitAndSplit_fn = function (width, tags) {
        if (!tags.b) {
            return _List_Nil;
        }
        else {
            var t = tags.a;
            var ts = tags.b;
            var _v1 = $elm$core$List$foldl_fn_unwrapped(function (tag, _v2) {
                var allSplits = _v2.a;
                var curSplit = _v2.b;
                var remaining = _v2.c;
                return (_Utils_cmp($elm$core$String$length(tag), remaining) < 1) ? _Utils_Tuple3(allSplits, _List_Cons(tag, curSplit), remaining - $elm$core$String$length(tag)) : _Utils_Tuple3(_Utils_ap(allSplits, _List_fromArray([
                    $elm$core$List$reverse(curSplit)
                ])), _List_fromArray([tag]), width - $elm$core$String$length(tag));
            }, _Utils_Tuple3(_List_Nil, _List_fromArray([t]), width - $elm$core$String$length(t)), ts);
            var splitsExceptLast = _v1.a;
            var lastSplit = _v1.b;
            return _Utils_ap(splitsExceptLast, _List_fromArray([
                $elm$core$List$reverse(lastSplit)
            ]));
        }
    }, $mdgriffith$elm_codegen$Internal$Comments$fitAndSplit = F2($mdgriffith$elm_codegen$Internal$Comments$fitAndSplit_fn);
    var $elm$core$List$sort = function (xs) {
        return _List_sortBy_fn($elm$core$Basics$identity, xs);
    };
    var $mdgriffith$elm_codegen$Internal$Comments$mergeDocTags = function (innerParts) {
        var _v0 = $elm$core$List$foldr_fn(F2(function (part, _v1) {
            var accum = _v1.a;
            var context = _v1.b;
            if (context.$ === 1) {
                if (part.$ === 2) {
                    var tags = part.a;
                    return _Utils_Tuple2(accum, $elm$core$Maybe$Just(tags));
                }
                else {
                    var otherPart = part;
                    return _Utils_Tuple2(_List_Cons(otherPart, accum), $elm$core$Maybe$Nothing);
                }
            }
            else {
                var contextTags = context.a;
                if (part.$ === 2) {
                    var tags = part.a;
                    return _Utils_Tuple2(accum, $elm$core$Maybe$Just(_Utils_ap(contextTags, tags)));
                }
                else {
                    var otherPart = part;
                    return _Utils_Tuple2(_List_Cons(otherPart, _List_Cons($mdgriffith$elm_codegen$Internal$Comments$DocTags($elm$core$List$sort(contextTags)), accum)), $elm$core$Maybe$Nothing);
                }
            }
        }), _Utils_Tuple2(_List_Nil, $elm$core$Maybe$Nothing), innerParts);
        var partsExceptMaybeFirst = _v0.a;
        var maybeFirstPart = _v0.b;
        if (maybeFirstPart.$ === 1) {
            return partsExceptMaybeFirst;
        }
        else {
            var tags = maybeFirstPart.a;
            return _List_Cons($mdgriffith$elm_codegen$Internal$Comments$DocTags($elm$core$List$sort(tags)), partsExceptMaybeFirst);
        }
    };
    var $mdgriffith$elm_codegen$Internal$Comments$layoutTags_fn = function (width, parts) {
        return $elm$core$List$foldr_fn(F2(function (part, _v0) {
            var accumParts = _v0.a;
            var accumDocTags = _v0.b;
            if (part.$ === 2) {
                var tags = part.a;
                var splits = $mdgriffith$elm_codegen$Internal$Comments$fitAndSplit_fn(width, tags);
                return _Utils_Tuple2(_Utils_ap($elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Comments$DocTags, splits), accumParts), _Utils_ap(accumDocTags, splits));
            }
            else {
                var otherPart = part;
                return _Utils_Tuple2(_List_Cons(otherPart, accumParts), accumDocTags);
            }
        }), _Utils_Tuple2(_List_Nil, _List_Nil), $mdgriffith$elm_codegen$Internal$Comments$mergeDocTags(parts));
    }, $mdgriffith$elm_codegen$Internal$Comments$layoutTags = F2($mdgriffith$elm_codegen$Internal$Comments$layoutTags_fn);
    var $the_sett$elm_pretty_printer$Internals$NLine_fn = function (a, b, c) {
        return { $: 2, a: a, b: b, c: c };
    }, $the_sett$elm_pretty_printer$Internals$NLine = F3($the_sett$elm_pretty_printer$Internals$NLine_fn);
    var $the_sett$elm_pretty_printer$Internals$NNil = { $: 0 };
    var $the_sett$elm_pretty_printer$Internals$NText_fn = function (a, b, c) {
        return { $: 1, a: a, b: b, c: c };
    }, $the_sett$elm_pretty_printer$Internals$NText = F3($the_sett$elm_pretty_printer$Internals$NText_fn);
    var $the_sett$elm_pretty_printer$Internals$fits_fn = function (w, normal) {
        fits: while (true) {
            if (w < 0) {
                return false;
            }
            else {
                switch (normal.$) {
                    case 0:
                        return true;
                    case 1:
                        var text = normal.a;
                        var innerNormal = normal.b;
                        var $temp$w = w - $elm$core$String$length(text), $temp$normal = innerNormal(0);
                        w = $temp$w;
                        normal = $temp$normal;
                        continue fits;
                    default:
                        return true;
                }
            }
        }
    }, $the_sett$elm_pretty_printer$Internals$fits = F2($the_sett$elm_pretty_printer$Internals$fits_fn);
    var $the_sett$elm_pretty_printer$Internals$better_fn = function (w, k, doc, doc2Fn) {
        return $the_sett$elm_pretty_printer$Internals$fits_fn(w - k, doc) ? doc : doc2Fn(0);
    }, $the_sett$elm_pretty_printer$Internals$better = F4($the_sett$elm_pretty_printer$Internals$better_fn);
    var $the_sett$elm_pretty_printer$Internals$best_fn = function (width, startCol, x) {
        var be = F3(function (w, k, docs) {
            be: while (true) {
                if (!docs.b) {
                    return $the_sett$elm_pretty_printer$Internals$NNil;
                }
                else {
                    switch (docs.a.b.$) {
                        case 0:
                            var _v1 = docs.a;
                            var i = _v1.a;
                            var _v2 = _v1.b;
                            var ds = docs.b;
                            var $temp$w = w, $temp$k = k, $temp$docs = ds;
                            w = $temp$w;
                            k = $temp$k;
                            docs = $temp$docs;
                            continue be;
                        case 1:
                            var _v3 = docs.a;
                            var i = _v3.a;
                            var _v4 = _v3.b;
                            var doc = _v4.a;
                            var doc2 = _v4.b;
                            var ds = docs.b;
                            var $temp$w = w, $temp$k = k, $temp$docs = _List_Cons(_Utils_Tuple2(i, doc(0)), _List_Cons(_Utils_Tuple2(i, doc2(0)), ds));
                            w = $temp$w;
                            k = $temp$k;
                            docs = $temp$docs;
                            continue be;
                        case 2:
                            var _v5 = docs.a;
                            var i = _v5.a;
                            var _v6 = _v5.b;
                            var j = _v6.a;
                            var doc = _v6.b;
                            var ds = docs.b;
                            var $temp$w = w, $temp$k = k, $temp$docs = _List_Cons(_Utils_Tuple2(i + j, doc(0)), ds);
                            w = $temp$w;
                            k = $temp$k;
                            docs = $temp$docs;
                            continue be;
                        case 3:
                            var _v7 = docs.a;
                            var i = _v7.a;
                            var _v8 = _v7.b;
                            var text = _v8.a;
                            var maybeTag = _v8.b;
                            var ds = docs.b;
                            return $the_sett$elm_pretty_printer$Internals$NText_fn(text, function (_v9) {
                                return A3(be, w, k + $elm$core$String$length(text), ds);
                            }, maybeTag);
                        case 4:
                            var _v10 = docs.a;
                            var i = _v10.a;
                            var _v11 = _v10.b;
                            var vsep = _v11.b;
                            var ds = docs.b;
                            return $the_sett$elm_pretty_printer$Internals$NLine_fn(i, vsep, function (_v12) {
                                return A3(be, w, i + $elm$core$String$length(vsep), ds);
                            });
                        case 5:
                            var _v13 = docs.a;
                            var i = _v13.a;
                            var _v14 = _v13.b;
                            var doc = _v14.a;
                            var doc2 = _v14.b;
                            var ds = docs.b;
                            return $the_sett$elm_pretty_printer$Internals$better_fn(w, k, A3(be, w, k, _List_Cons(_Utils_Tuple2(i, doc), ds)), function (_v15) {
                                return A3(be, w, k, _List_Cons(_Utils_Tuple2(i, doc2), ds));
                            });
                        case 6:
                            var _v16 = docs.a;
                            var i = _v16.a;
                            var fn = _v16.b.a;
                            var ds = docs.b;
                            var $temp$w = w, $temp$k = k, $temp$docs = _List_Cons(_Utils_Tuple2(i, fn(i)), ds);
                            w = $temp$w;
                            k = $temp$k;
                            docs = $temp$docs;
                            continue be;
                        default:
                            var _v17 = docs.a;
                            var i = _v17.a;
                            var fn = _v17.b.a;
                            var ds = docs.b;
                            var $temp$w = w, $temp$k = k, $temp$docs = _List_Cons(_Utils_Tuple2(i, fn(k)), ds);
                            w = $temp$w;
                            k = $temp$k;
                            docs = $temp$docs;
                            continue be;
                    }
                }
            }
        });
        return A3(be, width, startCol, _List_fromArray([
            _Utils_Tuple2(0, x)
        ]));
    }, $the_sett$elm_pretty_printer$Internals$best = F3($the_sett$elm_pretty_printer$Internals$best_fn);
    var $the_sett$elm_pretty_printer$Internals$layout = function (normal) {
        var layoutInner = F2(function (normal2, acc) {
            layoutInner: while (true) {
                switch (normal2.$) {
                    case 0:
                        return acc;
                    case 1:
                        var text = normal2.a;
                        var innerNormal = normal2.b;
                        var maybeTag = normal2.c;
                        var $temp$normal2 = innerNormal(0), $temp$acc = _List_Cons(text, acc);
                        normal2 = $temp$normal2;
                        acc = $temp$acc;
                        continue layoutInner;
                    default:
                        var i = normal2.a;
                        var sep = normal2.b;
                        var innerNormal = normal2.c;
                        var norm = innerNormal(0);
                        if (norm.$ === 2) {
                            var $temp$normal2 = innerNormal(0), $temp$acc = _List_Cons("\n" + sep, acc);
                            normal2 = $temp$normal2;
                            acc = $temp$acc;
                            continue layoutInner;
                        }
                        else {
                            var $temp$normal2 = innerNormal(0), $temp$acc = _List_Cons("\n" + ($the_sett$elm_pretty_printer$Internals$copy_fn(i, " ") + sep), acc);
                            normal2 = $temp$normal2;
                            acc = $temp$acc;
                            continue layoutInner;
                        }
                }
            }
        });
        return $elm$core$String$concat($elm$core$List$reverse(A2(layoutInner, normal, _List_Nil)));
    };
    var $the_sett$elm_pretty_printer$Pretty$pretty_fn = function (w, doc) {
        return $the_sett$elm_pretty_printer$Internals$layout($the_sett$elm_pretty_printer$Internals$best_fn(w, 0, doc));
    }, $the_sett$elm_pretty_printer$Pretty$pretty = F2($the_sett$elm_pretty_printer$Pretty$pretty_fn);
    var $mdgriffith$elm_codegen$Internal$Comments$prettyCode = function (val) {
        return $the_sett$elm_pretty_printer$Pretty$indent_fn(4, $the_sett$elm_pretty_printer$Pretty$string(val));
    };
    var $mdgriffith$elm_codegen$Internal$Comments$prettyMarkdown = function (val) {
        return $the_sett$elm_pretty_printer$Pretty$string(val);
    };
    var $mdgriffith$elm_codegen$Internal$Comments$prettyTags = function (tags) {
        return $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([
            $the_sett$elm_pretty_printer$Pretty$string("@docs"),
            $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$string(", "), $elm$core$List$map_fn($the_sett$elm_pretty_printer$Pretty$string, tags))
        ]));
    };
    var $mdgriffith$elm_codegen$Internal$Comments$prettyCommentPart = function (part) {
        switch (part.$) {
            case 0:
                var val = part.a;
                return $mdgriffith$elm_codegen$Internal$Comments$prettyMarkdown(val);
            case 1:
                var val = part.a;
                return $mdgriffith$elm_codegen$Internal$Comments$prettyCode(val);
            default:
                var tags = part.a;
                return $mdgriffith$elm_codegen$Internal$Comments$prettyTags(tags);
        }
    };
    var $mdgriffith$elm_codegen$Internal$Comments$prettyFileComment_fn = function (width, comment) {
        var _v0 = $mdgriffith$elm_codegen$Internal$Comments$layoutTags_fn(width, $mdgriffith$elm_codegen$Internal$Comments$getParts(comment));
        var parts = _v0.a;
        var splits = _v0.b;
        return _Utils_Tuple2($the_sett$elm_pretty_printer$Pretty$pretty_fn(width, $mdgriffith$elm_codegen$Internal$Comments$delimeters($the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$lines_a0, $elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Comments$prettyCommentPart, parts)))), splits);
    }, $mdgriffith$elm_codegen$Internal$Comments$prettyFileComment = F2($mdgriffith$elm_codegen$Internal$Comments$prettyFileComment_fn);
    var $mdgriffith$elm_codegen$Internal$Write$prettyDefaultModuleData = function (moduleData) {
        return $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([
            $the_sett$elm_pretty_printer$Pretty$string("module"),
            $mdgriffith$elm_codegen$Internal$Write$prettyModuleName($mdgriffith$elm_codegen$Internal$Compiler$denode(moduleData.bt)),
            $mdgriffith$elm_codegen$Internal$Write$prettyExposing($mdgriffith$elm_codegen$Internal$Compiler$denode(moduleData.cX))
        ]));
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyEffectModuleData = function (moduleData) {
        var prettyCmdAndSub = F2(function (maybeCmd, maybeSub) {
            var _v0 = _Utils_Tuple2(maybeCmd, maybeSub);
            if (!_v0.a.$) {
                if (!_v0.b.$) {
                    var cmdName = _v0.a.a;
                    var subName = _v0.b.a;
                    return $elm$core$Maybe$Just($the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([
                        $the_sett$elm_pretty_printer$Pretty$string("where { command ="),
                        $the_sett$elm_pretty_printer$Pretty$string(cmdName),
                        $the_sett$elm_pretty_printer$Pretty$string(","),
                        $the_sett$elm_pretty_printer$Pretty$string("subscription ="),
                        $the_sett$elm_pretty_printer$Pretty$string(subName),
                        $the_sett$elm_pretty_printer$Pretty$string("}")
                    ])));
                }
                else {
                    var cmdName = _v0.a.a;
                    var _v3 = _v0.b;
                    return $elm$core$Maybe$Just($the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([
                        $the_sett$elm_pretty_printer$Pretty$string("where { command ="),
                        $the_sett$elm_pretty_printer$Pretty$string(cmdName),
                        $the_sett$elm_pretty_printer$Pretty$string("}")
                    ])));
                }
            }
            else {
                if (_v0.b.$ === 1) {
                    var _v1 = _v0.a;
                    var _v2 = _v0.b;
                    return $elm$core$Maybe$Nothing;
                }
                else {
                    var _v4 = _v0.a;
                    var subName = _v0.b.a;
                    return $elm$core$Maybe$Just($the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([
                        $the_sett$elm_pretty_printer$Pretty$string("where { subscription ="),
                        $the_sett$elm_pretty_printer$Pretty$string(subName),
                        $the_sett$elm_pretty_printer$Pretty$string("}")
                    ])));
                }
            }
        });
        return $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([
            $the_sett$elm_pretty_printer$Pretty$string("effect module"),
            $mdgriffith$elm_codegen$Internal$Write$prettyModuleName($mdgriffith$elm_codegen$Internal$Compiler$denode(moduleData.bt)),
            $mdgriffith$elm_codegen$Internal$Write$prettyMaybe_fn($elm$core$Basics$identity, A2(prettyCmdAndSub, $elm$core$Maybe$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeMaybe_a0, moduleData.gT), $elm$core$Maybe$map_fn($mdgriffith$elm_codegen$Internal$Compiler$denodeMaybe_a0, moduleData.h_))),
            $mdgriffith$elm_codegen$Internal$Write$prettyExposing($mdgriffith$elm_codegen$Internal$Compiler$denode(moduleData.cX))
        ]));
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyPortModuleData = function (moduleData) {
        return $the_sett$elm_pretty_printer$Pretty$join_fn($the_sett$elm_pretty_printer$Pretty$words_a0, _List_fromArray([
            $the_sett$elm_pretty_printer$Pretty$string("port module"),
            $mdgriffith$elm_codegen$Internal$Write$prettyModuleName($mdgriffith$elm_codegen$Internal$Compiler$denode(moduleData.bt)),
            $mdgriffith$elm_codegen$Internal$Write$prettyExposing($mdgriffith$elm_codegen$Internal$Compiler$denode(moduleData.cX))
        ]));
    };
    var $mdgriffith$elm_codegen$Internal$Write$prettyModule = function (mod) {
        switch (mod.$) {
            case 0:
                var defaultModuleData = mod.a;
                return $mdgriffith$elm_codegen$Internal$Write$prettyDefaultModuleData(defaultModuleData);
            case 1:
                var defaultModuleData = mod.a;
                return $mdgriffith$elm_codegen$Internal$Write$prettyPortModuleData(defaultModuleData);
            default:
                var effectModuleData = mod.a;
                return $mdgriffith$elm_codegen$Internal$Write$prettyEffectModuleData(effectModuleData);
        }
    };
    var $mdgriffith$elm_codegen$Internal$Write$prepareLayout_fn = function (width, file) {
        return $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $mdgriffith$elm_codegen$Internal$Write$prettyDeclarations_fn(file.gJ, file.t), $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $mdgriffith$elm_codegen$Internal$Write$importsPretty(file.d), function (doc) {
            var _v0 = file.gU;
            if (_v0.$ === 1) {
                return doc;
            }
            else {
                var fileComment = _v0.a;
                var _v1 = $mdgriffith$elm_codegen$Internal$Comments$prettyFileComment_fn(width, fileComment);
                var fileCommentStr = _v1.a;
                var innerTags = _v1.b;
                return $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $mdgriffith$elm_codegen$Internal$Write$prettyComments(_List_fromArray([fileCommentStr])), doc));
            }
        }($elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $elm_community$basics_extra$Basics$Extra$flip_fn($the_sett$elm_pretty_printer$Pretty$a_a0, $the_sett$elm_pretty_printer$Pretty$line, $mdgriffith$elm_codegen$Internal$Write$prettyModule(file.ao))))));
    }, $mdgriffith$elm_codegen$Internal$Write$prepareLayout = F2($mdgriffith$elm_codegen$Internal$Write$prepareLayout_fn);
    var $mdgriffith$elm_codegen$Internal$Write$pretty_fn = function (width, file) {
        return $the_sett$elm_pretty_printer$Pretty$pretty_fn(width, $mdgriffith$elm_codegen$Internal$Write$prepareLayout_fn(width, file));
    }, $mdgriffith$elm_codegen$Internal$Write$pretty = F2($mdgriffith$elm_codegen$Internal$Write$pretty_fn);
    var $mdgriffith$elm_codegen$Internal$Write$write_a0 = 80, $mdgriffith$elm_codegen$Internal$Write$write = $mdgriffith$elm_codegen$Internal$Write$pretty($mdgriffith$elm_codegen$Internal$Write$write_a0);
    var $mdgriffith$elm_codegen$Internal$Render$render_fn = function (toDocComment, fileDetails) {
        var rendered = $elm$core$List$foldl_fn_unwrapped(function (decl, gathered) {
            switch (decl.$) {
                case 1:
                    var comm = decl.a;
                    return _Utils_update(gathered, {
                        t: _List_Cons($mdgriffith$elm_codegen$Internal$Compiler$RenderedComment(comm), gathered.t)
                    });
                case 2:
                    var block = decl.a;
                    return _Utils_update(gathered, {
                        t: _List_Cons($mdgriffith$elm_codegen$Internal$Compiler$RenderedBlock(block), gathered.t)
                    });
                default:
                    var decDetails = decl.a;
                    var result = decDetails.h2(fileDetails.aP);
                    return {
                        t: _List_Cons($mdgriffith$elm_codegen$Internal$Compiler$RenderedDecl($mdgriffith$elm_codegen$Internal$Render$addDocs_fn(decDetails.g1, result.gX)), gathered.t),
                        ah: $mdgriffith$elm_codegen$Internal$Render$addExposed_fn(decDetails.ah, result.gX, gathered.ah),
                        ai: function () {
                            var _v5 = decDetails.ah;
                            if (!_v5.$) {
                                return gathered.ai;
                            }
                            else {
                                var details = _v5.a;
                                return _List_Cons(_Utils_Tuple2(details.hj, decDetails.c), gathered.ai);
                            }
                        }(),
                        aD: function () {
                            if (gathered.aD) {
                                return gathered.aD;
                            }
                            else {
                                var _v6 = result.gX;
                                if (_v6.$ === 3) {
                                    return true;
                                }
                                else {
                                    return false;
                                }
                            }
                        }(),
                        d: _Utils_ap(result.ag, _Utils_ap(decDetails.d, gathered.d)),
                        ie: function () {
                            var _v7 = result.id;
                            if (_v7.$ === 1) {
                                return gathered.ie;
                            }
                            else {
                                var warn = _v7.a;
                                return _List_Cons(warn, gathered.ie);
                            }
                        }()
                    };
            }
        }, { t: _List_Nil, ah: _List_Nil, ai: _List_Nil, aD: false, d: _List_Nil, ie: _List_Nil }, fileDetails.t);
        var body = $mdgriffith$elm_codegen$Internal$Write$pretty_fn($mdgriffith$elm_codegen$Internal$Write$write_a0, {
            gJ: fileDetails.gJ,
            gU: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Internal$Comments$addPart_fn($mdgriffith$elm_codegen$Internal$Comments$emptyComment, $mdgriffith$elm_codegen$Internal$Comments$Markdown(function () {
                var _v0 = rendered.ai;
                if (!_v0.b) {
                    return "";
                }
                else {
                    return "\n" + $elm$core$String$join_fn("\n\n", toDocComment($mdgriffith$elm_codegen$Internal$Render$groupExposing(_List_sortBy_fn(function (_v1) {
                        var group = _v1.a;
                        if (group.$ === 1) {
                            return "zzzzzzzzz";
                        }
                        else {
                            var name = group.a;
                            return name;
                        }
                    }, rendered.ai))));
                }
            }()))),
            t: $elm$core$List$reverse(rendered.t),
            d: $elm$core$List$filterMap_fn($mdgriffith$elm_codegen$Internal$Compiler$makeImport(fileDetails.gJ), $mdgriffith$elm_codegen$Internal$Render$dedupImports(rendered.d)),
            ao: (rendered.aD ? $stil4m$elm_syntax$Elm$Syntax$Module$PortModule : $stil4m$elm_syntax$Elm$Syntax$Module$NormalModule)({
                cX: function () {
                    var _v3 = rendered.ah;
                    if (!_v3.b) {
                        return $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Exposing$All($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange));
                    }
                    else {
                        return $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Exposing$Explicit($elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$nodifyAll_a0, rendered.ah)));
                    }
                }(),
                bt: $mdgriffith$elm_codegen$Internal$Compiler$nodify(fileDetails.bt)
            })
        });
        return {
            gW: body,
            hH: $elm$core$String$join_fn("/", fileDetails.bt) + ".elm",
            ie: rendered.ie
        };
    }, $mdgriffith$elm_codegen$Internal$Render$render = F2($mdgriffith$elm_codegen$Internal$Render$render_fn);
    var $mdgriffith$elm_codegen$Internal$Index$startChecked = function (checked) {
        return $mdgriffith$elm_codegen$Internal$Index$Index_fn(0, _List_Nil, $elm$core$Set$empty, checked);
    };
    var $mdgriffith$elm_codegen$Elm$fileWith_fn = function (mod, options, decs) {
        return $mdgriffith$elm_codegen$Internal$Render$render_fn(options.g1, {
            gJ: options.gJ,
            t: decs,
            aP: $mdgriffith$elm_codegen$Internal$Index$startChecked(true),
            bt: mod
        });
    }, $mdgriffith$elm_codegen$Elm$fileWith = F3($mdgriffith$elm_codegen$Elm$fileWith_fn);
    var $stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression = function (a) {
        return { $: 17, a: a };
    };
    var $stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern = function (a) {
        return { $: 11, a: a };
    };
    var $mdgriffith$elm_codegen$Internal$Index$getName_fn = function (desiredName, index) {
        var top = index.a;
        var tail = index.b;
        var scope = index.c;
        var check = index.d;
        var formattedName = $mdgriffith$elm_codegen$Internal$Format$formatValue(desiredName);
        if (!$elm$core$Set$member_fn(formattedName, scope)) {
            return _Utils_Tuple2(formattedName, $mdgriffith$elm_codegen$Internal$Index$Index_fn(top, tail, $elm$core$Set$insert_fn(formattedName, scope), check));
        }
        else {
            var protectedName = _Utils_ap(formattedName, $elm$core$String$fromInt(top));
            if (!$elm$core$Set$member_fn(protectedName, scope)) {
                return _Utils_Tuple2(protectedName, $mdgriffith$elm_codegen$Internal$Index$Index_fn(top + 1, tail, $elm$core$Set$insert_fn(protectedName, scope), check));
            }
            else {
                var protectedNameLevel2 = _Utils_ap(formattedName, $mdgriffith$elm_codegen$Internal$Index$indexToString(index));
                return _Utils_Tuple2(protectedNameLevel2, $mdgriffith$elm_codegen$Internal$Index$Index_fn(top + 1, tail, $elm$core$Set$insert_fn(protectedNameLevel2, scope), check));
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Index$getName = F2($mdgriffith$elm_codegen$Internal$Index$getName_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$toVarMaybeType_fn = function (index, desiredName, maybeAnnotation) {
        var _v0 = $mdgriffith$elm_codegen$Internal$Index$getName_fn(desiredName, index);
        var name = _v0.a;
        var newIndex = _v0.b;
        var _v1 = function () {
            if (maybeAnnotation.$ === 1) {
                return {
                    gJ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases,
                    a: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType($mdgriffith$elm_codegen$Internal$Index$protectTypeName_fn(desiredName, index)),
                    d: _List_Nil
                };
            }
            else {
                var ann = maybeAnnotation.a;
                return ann;
            }
        }();
        var aliases = _v1.gJ;
        var annotation = _v1.a;
        var imports = _v1.d;
        return {
            aP: newIndex,
            c: name,
            aK: annotation,
            gp: function (ignoredIndex_) {
                return {
                    a: $elm$core$Result$Ok({ gJ: aliases, f: $elm$core$Dict$empty, aK: annotation }),
                    _: $stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue_fn(_List_Nil, name),
                    d: imports
                };
            }
        };
    }, $mdgriffith$elm_codegen$Internal$Compiler$toVarMaybeType = F3($mdgriffith$elm_codegen$Internal$Compiler$toVarMaybeType_fn);
    var $mdgriffith$elm_codegen$Elm$fn_fn = function (_v0, toExpression) {
        var oneBaseName = _v0.a;
        var maybeAnnotation = _v0.b;
        return $mdgriffith$elm_codegen$Internal$Compiler$expression(function (index) {
            var one = $mdgriffith$elm_codegen$Internal$Compiler$toVarMaybeType_fn(index, oneBaseName, maybeAnnotation);
            var _v1 = toExpression(one.gp);
            var toExpr = _v1;
            var _return = toExpr(one.aP);
            return {
                a: function () {
                    var _v2 = _return.a;
                    if (_v2.$ === 1) {
                        var err = _v2.a;
                        return _return.a;
                    }
                    else {
                        var returnAnnotation = _v2.a;
                        return $elm$core$Result$Ok({
                            gJ: returnAnnotation.gJ,
                            f: returnAnnotation.f,
                            aK: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation_fn($mdgriffith$elm_codegen$Internal$Compiler$nodify(one.aK), $mdgriffith$elm_codegen$Internal$Compiler$nodify(returnAnnotation.aK))
                        });
                    }
                }(),
                _: $stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression({
                    r: _List_fromArray([
                        $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern(one.c))
                    ]),
                    _: $mdgriffith$elm_codegen$Internal$Compiler$nodify(_return._)
                }),
                d: _return.d
            };
        });
    }, $mdgriffith$elm_codegen$Elm$fn = F2($mdgriffith$elm_codegen$Elm$fn_fn);
    var $mdgriffith$elm_codegen$Elm$fn2_fn = function (_v0, _v1, toExpression) {
        var oneBaseName = _v0.a;
        var maybeOneType = _v0.b;
        var twoBaseName = _v1.a;
        var maybeTwoType = _v1.b;
        return $mdgriffith$elm_codegen$Internal$Compiler$expression(function (index) {
            var one = $mdgriffith$elm_codegen$Internal$Compiler$toVarMaybeType_fn(index, oneBaseName, maybeOneType);
            var two = $mdgriffith$elm_codegen$Internal$Compiler$toVarMaybeType_fn(one.aP, twoBaseName, maybeTwoType);
            var _v2 = $mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails_fn(two.aP, A2(toExpression, one.gp, two.gp));
            var newIndex_ = _v2.a;
            var _return = _v2.b;
            return {
                a: function () {
                    var _v3 = _return.a;
                    if (_v3.$ === 1) {
                        var err = _v3.a;
                        return _return.a;
                    }
                    else {
                        var returnAnnotation = _v3.a;
                        return $elm$core$Result$Ok({
                            gJ: returnAnnotation.gJ,
                            f: returnAnnotation.f,
                            aK: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation_fn($mdgriffith$elm_codegen$Internal$Compiler$nodify(one.aK), $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation_fn($mdgriffith$elm_codegen$Internal$Compiler$nodify(two.aK), $mdgriffith$elm_codegen$Internal$Compiler$nodify(returnAnnotation.aK))))
                        });
                    }
                }(),
                _: $stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression({
                    r: _List_fromArray([
                        $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern(one.c)),
                        $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern(two.c))
                    ]),
                    _: $mdgriffith$elm_codegen$Internal$Compiler$nodify(_return._)
                }),
                d: _return.d
            };
        });
    }, $mdgriffith$elm_codegen$Elm$fn2_fn_unwrapped = function (_v0, _v1, toExpression) {
        var oneBaseName = _v0.a;
        var maybeOneType = _v0.b;
        var twoBaseName = _v1.a;
        var maybeTwoType = _v1.b;
        return $mdgriffith$elm_codegen$Internal$Compiler$expression(function (index) {
            var one = $mdgriffith$elm_codegen$Internal$Compiler$toVarMaybeType_fn(index, oneBaseName, maybeOneType);
            var two = $mdgriffith$elm_codegen$Internal$Compiler$toVarMaybeType_fn(one.aP, twoBaseName, maybeTwoType);
            var _v2 = $mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails_fn(two.aP, toExpression(one.gp, two.gp));
            var newIndex_ = _v2.a;
            var _return = _v2.b;
            return {
                a: function () {
                    var _v3 = _return.a;
                    if (_v3.$ === 1) {
                        var err = _v3.a;
                        return _return.a;
                    }
                    else {
                        var returnAnnotation = _v3.a;
                        return $elm$core$Result$Ok({
                            gJ: returnAnnotation.gJ,
                            f: returnAnnotation.f,
                            aK: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation_fn($mdgriffith$elm_codegen$Internal$Compiler$nodify(one.aK), $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation_fn($mdgriffith$elm_codegen$Internal$Compiler$nodify(two.aK), $mdgriffith$elm_codegen$Internal$Compiler$nodify(returnAnnotation.aK))))
                        });
                    }
                }(),
                _: $stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression({
                    r: _List_fromArray([
                        $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern(one.c)),
                        $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern(two.c))
                    ]),
                    _: $mdgriffith$elm_codegen$Internal$Compiler$nodify(_return._)
                }),
                d: _return.d
            };
        });
    }, $mdgriffith$elm_codegen$Elm$fn2 = F3($mdgriffith$elm_codegen$Elm$fn2_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$addAlias_fn = function (mod, name, ann, aliasCache) {
        var annDetails = ann;
        return $elm$core$Dict$insert_fn($mdgriffith$elm_codegen$Internal$Compiler$formatAliasKey_fn(mod, name), {
            T: annDetails.a,
            af: $mdgriffith$elm_codegen$Internal$Compiler$getGenerics(ann)
        }, aliasCache);
    }, $mdgriffith$elm_codegen$Internal$Compiler$addAlias = F4($mdgriffith$elm_codegen$Internal$Compiler$addAlias_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$getAliases = function (_v0) {
        var ann = _v0;
        return ann.gJ;
    };
    var $mdgriffith$elm_codegen$Elm$Annotation$alias_fn = function (mod, name, vars, target) {
        return {
            gJ: $mdgriffith$elm_codegen$Internal$Compiler$addAlias_fn(mod, name, target, $elm$core$List$foldl_fn_unwrapped(function (ann, aliases) {
                return $elm$core$Dict$union_fn($mdgriffith$elm_codegen$Internal$Compiler$getAliases(ann), aliases);
            }, $mdgriffith$elm_codegen$Internal$Compiler$getAliases(target), vars)),
            a: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed_fn($mdgriffith$elm_codegen$Internal$Compiler$nodify(_Utils_Tuple2(mod, $mdgriffith$elm_codegen$Internal$Format$formatType(name))), $elm$core$List$map_fn(A2($elm$core$Basics$composeL, $mdgriffith$elm_codegen$Internal$Compiler$nodify, $mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation), vars)),
            d: function () {
                if (!mod.b) {
                    return $elm$core$List$concatMap_fn($mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports, vars);
                }
                else {
                    return _Utils_ap(_List_fromArray([mod]), $elm$core$List$concatMap_fn($mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports, vars));
                }
            }()
        };
    }, $mdgriffith$elm_codegen$Elm$Annotation$alias = F4($mdgriffith$elm_codegen$Elm$Annotation$alias_fn);
    var $author$project$Gen$Json$Decode$moduleName_ = _List_fromArray(["Json", "Decode"]);
    var $author$project$Gen$Json$Decode$annotation_ = {
        gY: function (decoderArg0) {
            return $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([decoderArg0]));
        },
        cT: $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Error", _List_Nil),
        bK: $mdgriffith$elm_codegen$Elm$Annotation$alias_fn($author$project$Gen$Json$Decode$moduleName_, "Value", _List_Nil, $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))
    };
    var $author$project$Gen$Json$Encode$annotation_ = {
        bK: $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil)
    };
    var $mdgriffith$elm_codegen$Elm$Case$Branch = $elm$core$Basics$identity;
    var $stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern_fn = function (a, b) {
        return { $: 12, a: a, b: b };
    }, $stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern = F2($stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$toVarWithType_fn = function (index, desiredName, _v0) {
        var ann = _v0;
        var _v1 = $mdgriffith$elm_codegen$Internal$Index$getName_fn(desiredName, index);
        var name = _v1.a;
        var newIndex = _v1.b;
        return {
            g7: function (ignoredIndex_) {
                return {
                    a: $elm$core$Result$Ok({ gJ: ann.gJ, f: $elm$core$Dict$empty, aK: ann.a }),
                    _: $stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue_fn(_List_Nil, name),
                    d: ann.d
                };
            },
            aP: newIndex,
            c: name
        };
    }, $mdgriffith$elm_codegen$Internal$Compiler$toVarWithType = F3($mdgriffith$elm_codegen$Internal$Compiler$toVarWithType_fn);
    var $mdgriffith$elm_codegen$Elm$Case$branch1_fn = function (name, _v0, toExp) {
        var argName = _v0.a;
        var argType = _v0.b;
        return function (index) {
            var _var = $mdgriffith$elm_codegen$Internal$Compiler$toVarWithType_fn(index, argName, argType);
            return _Utils_Tuple3(_var.aP, $stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern_fn({
                bt: _List_Nil,
                c: $mdgriffith$elm_codegen$Internal$Format$formatType(name)
            }, _List_fromArray([
                $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern(_var.c))
            ])), toExp(_var.g7));
        };
    }, $mdgriffith$elm_codegen$Elm$Case$branch1 = F3($mdgriffith$elm_codegen$Elm$Case$branch1_fn);
    var $author$project$Generate$Scalar$builtIn = _List_fromArray(["int", "float", "string", "boolean"]);
    var $mdgriffith$elm_codegen$Elm$Annotation$maybe = function (maybeArg) {
        return $mdgriffith$elm_codegen$Elm$Annotation$typed_fn(_List_Nil, "Maybe", _List_fromArray([maybeArg]));
    };
    var $mdgriffith$elm_codegen$Elm$Annotation$unit = { gJ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, a: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit, d: _List_Nil };
    var $author$project$Gen$Json$Decode$call_ = {
        bZ: F2(function (andThenArg, andThenArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("b")
                    ]))),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("b")
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "andThen"
            }), _List_fromArray([andThenArg, andThenArg0]));
        }),
        b7: function (arrayArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Array"]), "Array", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]))
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "array"
            }), _List_fromArray([arrayArg]));
        },
        b8: F2(function (atArg, atArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$string),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "at"
            }), _List_fromArray([atArg, atArg0]));
        }),
        cv: F2(function (decodeStringArg, decodeStringArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$string
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Result"]), "Result", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Error", _List_Nil),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "decodeString"
            }), _List_fromArray([decodeStringArg, decodeStringArg0]));
        }),
        cw: F2(function (decodeValueArg, decodeValueArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Value", _List_Nil)
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Result"]), "Result", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Error", _List_Nil),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "decodeValue"
            }), _List_fromArray([decodeValueArg, decodeValueArg0]));
        }),
        cA: function (dictArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Dict"]), "Dict", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$string,
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]))
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "dict"
            }), _List_fromArray([dictArg]));
        },
        cU: function (errorToStringArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Error", _List_Nil)
                ]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["Json", "Decode"]),
                c: "errorToString"
            }), _List_fromArray([errorToStringArg]));
        },
        cY: function (failArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "fail"
            }), _List_fromArray([failArg]));
        },
        c_: F2(function (fieldArg, fieldArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$string,
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "field"
            }), _List_fromArray([fieldArg, fieldArg0]));
        }),
        aP: F2(function (indexArg, indexArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$int,
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "index"
            }), _List_fromArray([indexArg, indexArg0]));
        }),
        d6: function (keyValuePairsArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$tuple_fn($mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$var("a")))
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "keyValuePairs"
            }), _List_fromArray([keyValuePairsArg]));
        },
        ea: function (lazyArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$unit]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ])))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "lazy"
            }), _List_fromArray([lazyArg]));
        },
        ef: function (listArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "list"
            }), _List_fromArray([listArg]));
        },
        ei: F2(function (mapArg, mapArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$var("value")),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "map"
            }), _List_fromArray([mapArg, mapArg0]));
        }),
        ej: F3(function (map2Arg, map2Arg0, map2Arg1) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("b")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$var("value")),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("b")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "map2"
            }), _List_fromArray([map2Arg, map2Arg0, map2Arg1]));
        }),
        ek: F4(function (map3Arg, map3Arg0, map3Arg1, map3Arg2) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("c")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$var("value")),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("b")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("c")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "map3"
            }), _List_fromArray([map3Arg, map3Arg0, map3Arg1, map3Arg2]));
        }),
        el: F5(function (map4Arg, map4Arg0, map4Arg1, map4Arg2, map4Arg3) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("c"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("d")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$var("value")),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("b")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("c")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("d")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "map4"
            }), _List_fromArray([map4Arg, map4Arg0, map4Arg1, map4Arg2, map4Arg3]));
        }),
        em: F6(function (map5Arg, map5Arg0, map5Arg1, map5Arg2, map5Arg3, map5Arg4) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("c"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("d"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("e")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$var("value")),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("b")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("c")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("d")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("e")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "map5"
            }), _List_fromArray([map5Arg, map5Arg0, map5Arg1, map5Arg2, map5Arg3, map5Arg4]));
        }),
        en: F7(function (map6Arg, map6Arg0, map6Arg1, map6Arg2, map6Arg3, map6Arg4, map6Arg5) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("c"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("d"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("e"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("f")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$var("value")),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("b")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("c")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("d")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("e")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("f")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "map6"
            }), _List_fromArray([map6Arg, map6Arg0, map6Arg1, map6Arg2, map6Arg3, map6Arg4, map6Arg5]));
        }),
        eo: F8(function (map7Arg, map7Arg0, map7Arg1, map7Arg2, map7Arg3, map7Arg4, map7Arg5, map7Arg6) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("c"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("d"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("e"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("f"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("g")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$var("value")),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("b")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("c")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("d")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("e")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("f")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("g")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "map7"
            }), _List_fromArray([map7Arg, map7Arg0, map7Arg1, map7Arg2, map7Arg3, map7Arg4, map7Arg5, map7Arg6]));
        }),
        ep: F9(function (map8Arg, map8Arg0, map8Arg1, map8Arg2, map8Arg3, map8Arg4, map8Arg5, map8Arg6, map8Arg7) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("c"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("d"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("e"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("f"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("g"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("h")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$var("value")),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("b")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("c")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("d")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("e")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("f")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("g")
                    ])),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("h")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "map8"
            }), _List_fromArray([map8Arg, map8Arg0, map8Arg1, map8Arg2, map8Arg3, map8Arg4, map8Arg5, map8Arg6, map8Arg7]));
        }),
        et: function (maybeArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "maybe"
            }), _List_fromArray([maybeArg]));
        },
        eM: function (nullArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "null"
            }), _List_fromArray([nullArg]));
        },
        eN: function (nullableArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "nullable"
            }), _List_fromArray([nullableArg]));
        },
        aX: function (oneOfArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ])))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "oneOf"
            }), _List_fromArray([oneOfArg]));
        },
        eV: F2(function (oneOrMoreArg, oneOrMoreArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
                        $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$var("value")),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "oneOrMore"
            }), _List_fromArray([oneOrMoreArg, oneOrMoreArg0]));
        }),
        fX: function (succeedArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ])))),
                b: _List_fromArray(["Json", "Decode"]),
                c: "succeed"
            }), _List_fromArray([succeedArg]));
        }
    };
    var $mdgriffith$elm_codegen$Elm$Annotation$bool = $mdgriffith$elm_codegen$Elm$Annotation$typed_fn(_List_Nil, "Bool", _List_Nil);
    var $author$project$Gen$Json$Encode$call_ = {
        b7: F2(function (arrayArg, arrayArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil)),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Array"]), "Array", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
                b: _List_fromArray(["Json", "Encode"]),
                c: "array"
            }), _List_fromArray([arrayArg, arrayArg0]));
        }),
        gN: function (boolArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$bool]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
                b: _List_fromArray(["Json", "Encode"]),
                c: "bool"
            }), _List_fromArray([boolArg]));
        },
        cA: F3(function (dictArg, dictArg0, dictArg1) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("k")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$string),
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("v")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil)),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Dict"]), "Dict", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("k"),
                        $mdgriffith$elm_codegen$Elm$Annotation$var("v")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
                b: _List_fromArray(["Json", "Encode"]),
                c: "dict"
            }), _List_fromArray([dictArg, dictArg0, dictArg1]));
        }),
        cH: F2(function (encodeArg, encodeArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$int,
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil)
                ]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["Json", "Encode"]),
                c: "encode"
            }), _List_fromArray([encodeArg, encodeArg0]));
        }),
        he: function (floatArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
                b: _List_fromArray(["Json", "Encode"]),
                c: "float"
            }), _List_fromArray([floatArg]));
        },
        ho: function (intArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
                b: _List_fromArray(["Json", "Encode"]),
                c: "int"
            }), _List_fromArray([intArg]));
        },
        ef: F2(function (listArg, listArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil)),
                    $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
                b: _List_fromArray(["Json", "Encode"]),
                c: "list"
            }), _List_fromArray([listArg, listArg0]));
        }),
        eO: function (objectArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$tuple_fn($mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil)))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
                b: _List_fromArray(["Json", "Encode"]),
                c: "object"
            }), _List_fromArray([objectArg]));
        },
        fJ: F2(function (setArg, setArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil)),
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Set"]), "Set", _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]))
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
                b: _List_fromArray(["Json", "Encode"]),
                c: "set"
            }), _List_fromArray([setArg, setArg0]));
        }),
        hZ: function (stringArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
                b: _List_fromArray(["Json", "Encode"]),
                c: "string"
            }), _List_fromArray([stringArg]));
        }
    };
    var $stil4m$elm_syntax$Elm$Syntax$Expression$CaseExpression = function (a) {
        return { $: 16, a: a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$EmptyCaseStatement = { $: 2 };
    var $mdgriffith$elm_codegen$Elm$Case$combineInferences_fn = function (infs, infResult) {
        if (!infResult.$) {
            var inferred = infResult.a;
            return $elm$core$Result$Ok(_Utils_update(inferred, {
                f: $mdgriffith$elm_codegen$Internal$Compiler$mergeInferences_fn(infs, inferred.f)
            }));
        }
        else {
            var err = infResult.a;
            return $elm$core$Result$Err(err);
        }
    }, $mdgriffith$elm_codegen$Elm$Case$combineInferences = F2($mdgriffith$elm_codegen$Elm$Case$combineInferences_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$unifyOn_fn = function (_v0, res) {
        var annDetails = _v0;
        if (res.$ === 1) {
            return res;
        }
        else {
            var inf = res.a;
            var _v2 = $mdgriffith$elm_codegen$Internal$Compiler$unifiable_fn(inf.gJ, inf.f, annDetails.a, inf.aK);
            var newInferences = _v2.a;
            var finalResult = _v2.b;
            if (!finalResult.$) {
                var finalType = finalResult.a;
                return $elm$core$Result$Ok({
                    gJ: $elm$core$Dict$union_fn(annDetails.gJ, inf.gJ),
                    f: newInferences,
                    aK: finalType
                });
            }
            else {
                var err = finalResult.a;
                return $elm$core$Result$Err(_List_fromArray([err]));
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$unifyOn = F2($mdgriffith$elm_codegen$Internal$Compiler$unifyOn_fn);
    var $mdgriffith$elm_codegen$Elm$Case$captureCaseHelper_fn = function (mainCaseExpressionModule, _v0, accum) {
        var toBranch = _v0;
        var _v1 = toBranch($mdgriffith$elm_codegen$Internal$Index$dive(accum.aP));
        var branchIndex = _v1.a;
        var originalPattern = _v1.b;
        var caseExpression = _v1.c;
        var _v2 = $mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails_fn(branchIndex, caseExpression);
        var newIndex = _v2.a;
        var exp = _v2.b;
        var pattern = function () {
            if (!mainCaseExpressionModule.b) {
                return originalPattern;
            }
            else {
                if (originalPattern.$ === 12) {
                    var named = originalPattern.a;
                    var vars = originalPattern.b;
                    return $stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern_fn({ bt: mainCaseExpressionModule, c: named.c }, vars);
                }
                else {
                    return originalPattern;
                }
            }
        }();
        return {
            a: function () {
                var _v3 = accum.a;
                if (_v3.$ === 1) {
                    return $elm$core$Maybe$Just(exp.a);
                }
                else {
                    if (!_v3.a.$) {
                        var gatheredAnnotation = _v3.a.a;
                        return $elm$core$Maybe$Just($mdgriffith$elm_codegen$Internal$Compiler$unifyOn_fn({ gJ: gatheredAnnotation.gJ, a: gatheredAnnotation.aK, d: _List_Nil }, $mdgriffith$elm_codegen$Elm$Case$combineInferences_fn(gatheredAnnotation.f, exp.a)));
                    }
                    else {
                        var err = _v3.a;
                        return $elm$core$Maybe$Just(err);
                    }
                }
            }(),
            gP: _List_Cons(_Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$nodify(pattern), $mdgriffith$elm_codegen$Internal$Compiler$nodify(exp._)), accum.gP),
            d: _Utils_ap(accum.d, exp.d),
            aP: accum.aP
        };
    }, $mdgriffith$elm_codegen$Elm$Case$captureCaseHelper = F3($mdgriffith$elm_codegen$Elm$Case$captureCaseHelper_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$importInferences_fn = function (one, two) {
        return {
            gJ: $elm$core$Dict$union_fn(one.gJ, two.gJ),
            f: $mdgriffith$elm_codegen$Internal$Compiler$mergeInferences_fn(one.f, two.f),
            aK: two.aK
        };
    }, $mdgriffith$elm_codegen$Internal$Compiler$importInferences = F2($mdgriffith$elm_codegen$Internal$Compiler$importInferences_fn);
    var $mdgriffith$elm_codegen$Elm$Case$captureCase_fn = function (mainExpression, mainExpressionTypeModule, index, branches) {
        var _v0 = $mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails_fn(index, mainExpression);
        var branchIndex = _v0.a;
        var mainExpressionDetails = _v0.b;
        var caseExp = $elm$core$List$foldl_fn($mdgriffith$elm_codegen$Elm$Case$captureCaseHelper(mainExpressionTypeModule), { a: $elm$core$Maybe$Nothing, gP: _List_Nil, d: _List_Nil, aP: branchIndex }, branches);
        return _Utils_Tuple2(mainExpressionDetails, _Utils_update(caseExp, {
            a: function () {
                var _v1 = caseExp.a;
                if ((!_v1.$) && (!_v1.a.$)) {
                    var inference = _v1.a.a;
                    var _v2 = mainExpressionDetails.a;
                    if (_v2.$ === 1) {
                        var err = _v2.a;
                        return $elm$core$Maybe$Just($elm$core$Result$Err(err));
                    }
                    else {
                        var mainAnn = _v2.a;
                        return $elm$core$Maybe$Just($elm$core$Result$Ok($mdgriffith$elm_codegen$Internal$Compiler$importInferences_fn(mainAnn, inference)));
                    }
                }
                else {
                    return caseExp.a;
                }
            }()
        }));
    }, $mdgriffith$elm_codegen$Elm$Case$captureCase = F4($mdgriffith$elm_codegen$Elm$Case$captureCase_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$getTypeModule = function (_v0) {
        var annotation = _v0;
        var _v1 = annotation.a;
        if (_v1.$ === 1) {
            var _v2 = _v1.a;
            var _v3 = _v2.b;
            var mod = _v3.a;
            var typeName = _v3.b;
            return mod;
        }
        else {
            return _List_Nil;
        }
    };
    var $mdgriffith$elm_codegen$Elm$withType_fn = function (ann, _v0) {
        var annDetails = ann;
        var toExp = _v0;
        return function (index) {
            var exp = toExp(index);
            return _Utils_update(exp, {
                a: function () {
                    var _v1 = $mdgriffith$elm_codegen$Internal$Compiler$unifyOn_fn(ann, exp.a);
                    if (!_v1.$) {
                        var unified = _v1.a;
                        return $elm$core$Result$Ok(unified);
                    }
                    else {
                        var _v2 = exp.a;
                        if (!_v2.$) {
                            var expressionAnnotation = _v2.a;
                            return $elm$core$Result$Ok({ gJ: expressionAnnotation.gJ, f: expressionAnnotation.f, aK: annDetails.a });
                        }
                        else {
                            var err = _v2.a;
                            return $elm$core$Result$Ok({ gJ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, f: $elm$core$Dict$empty, aK: annDetails.a });
                        }
                    }
                }(),
                d: _Utils_ap(exp.d, annDetails.d)
            });
        };
    }, $mdgriffith$elm_codegen$Elm$withType = F2($mdgriffith$elm_codegen$Elm$withType_fn);
    var $mdgriffith$elm_codegen$Elm$Case$custom_fn = function (mainExpression, annotation, branches) {
        return function (index) {
            var myMain = $mdgriffith$elm_codegen$Elm$withType_fn(annotation, mainExpression);
            var _v0 = $mdgriffith$elm_codegen$Elm$Case$captureCase_fn(myMain, $mdgriffith$elm_codegen$Internal$Compiler$getTypeModule(annotation), $mdgriffith$elm_codegen$Internal$Index$dive(index), branches);
            var expr = _v0.a;
            var gathered = _v0.b;
            return {
                a: function () {
                    var _v1 = gathered.a;
                    if (_v1.$ === 1) {
                        return $elm$core$Result$Err(_List_fromArray([$mdgriffith$elm_codegen$Internal$Compiler$EmptyCaseStatement]));
                    }
                    else {
                        var ann = _v1.a;
                        return ann;
                    }
                }(),
                _: $stil4m$elm_syntax$Elm$Syntax$Expression$CaseExpression({
                    gP: $elm$core$List$reverse(gathered.gP),
                    _: $mdgriffith$elm_codegen$Internal$Compiler$nodify(expr._)
                }),
                d: _Utils_ap(expr.d, gathered.d)
            };
        };
    }, $mdgriffith$elm_codegen$Elm$Case$custom = F3($mdgriffith$elm_codegen$Elm$Case$custom_fn);
    var $mdgriffith$elm_codegen$Elm$customType_fn = function (name, variants) {
        return $mdgriffith$elm_codegen$Internal$Compiler$Declaration({
            g1: $elm$core$Maybe$Nothing,
            ah: $mdgriffith$elm_codegen$Internal$Compiler$NotExposed,
            d: $elm$core$List$concatMap_fn(function (_v0) {
                var listAnn = _v0.b;
                return $elm$core$List$concatMap_fn($mdgriffith$elm_codegen$Internal$Compiler$getAnnotationImports, listAnn);
            }, variants),
            c: name,
            h2: function (index) {
                return {
                    ag: _List_Nil,
                    gX: $stil4m$elm_syntax$Elm$Syntax$Declaration$CustomTypeDeclaration({
                        gV: $elm$core$List$map_fn(function (_v1) {
                            var varName = _v1.a;
                            var vars = _v1.b;
                            return $mdgriffith$elm_codegen$Internal$Compiler$nodify({
                                b6: $elm$core$List$map_fn(A2($elm$core$Basics$composeR, $mdgriffith$elm_codegen$Internal$Compiler$getInnerAnnotation, $mdgriffith$elm_codegen$Internal$Compiler$nodify), vars),
                                c: $mdgriffith$elm_codegen$Internal$Compiler$nodify($mdgriffith$elm_codegen$Internal$Format$formatType(varName))
                            });
                        }, variants),
                        be: $elm$core$Maybe$Nothing,
                        dz: $elm$core$List$concatMap_fn(function (_v2) {
                            var listAnn = _v2.b;
                            return $elm$core$List$concatMap_fn(A2($elm$core$Basics$composeL, $elm$core$List$map($mdgriffith$elm_codegen$Internal$Compiler$nodify), $mdgriffith$elm_codegen$Internal$Compiler$getGenerics), listAnn);
                        }, variants),
                        c: $mdgriffith$elm_codegen$Internal$Compiler$nodify($mdgriffith$elm_codegen$Internal$Format$formatType(name))
                    }),
                    id: $elm$core$Maybe$Nothing
                };
            }
        });
    }, $mdgriffith$elm_codegen$Elm$customType = F2($mdgriffith$elm_codegen$Elm$customType_fn);
    var $author$project$Utils$String$elmify_fn = function (_char, _v0) {
        var passedLower = _v0.a;
        var gathered = _v0.b;
        return ($elm$core$Char$isUpper(_char) && passedLower) ? _Utils_Tuple2($elm$core$Char$isLower(_char) || passedLower, _Utils_ap(gathered, $elm$core$String$fromChar(_char))) : _Utils_Tuple2($elm$core$Char$isLower(_char) || passedLower, _Utils_ap(gathered, $elm$core$String$toLower($elm$core$String$fromChar(_char))));
    }, $author$project$Utils$String$elmify = F2($author$project$Utils$String$elmify_fn);
    var $elm$core$String$foldl = _String_foldl;
    var $author$project$Utils$String$getLeadingUnderscoresHelper_fn = function (leading, string) {
        getLeadingUnderscoresHelper: while (true) {
            var _v0 = $elm$core$String$uncons(string);
            if (_v0.$ === 1) {
                return _Utils_Tuple2(leading, string);
            }
            else {
                if ("_" === _v0.a.a) {
                    var _v1 = _v0.a;
                    var tail = _v1.b;
                    var $temp$leading = _String_cons_fn("_", leading), $temp$string = tail;
                    leading = $temp$leading;
                    string = $temp$string;
                    continue getLeadingUnderscoresHelper;
                }
                else {
                    return _Utils_Tuple2("", string);
                }
            }
        }
    }, $author$project$Utils$String$getLeadingUnderscoresHelper = F2($author$project$Utils$String$getLeadingUnderscoresHelper_fn);
    var $author$project$Utils$String$getLeadingUnderscores = function (string) {
        return $author$project$Utils$String$getLeadingUnderscoresHelper_fn("", string);
    };
    var $author$project$Utils$String$formatScalar = function (introName) {
        var _v0 = $author$project$Utils$String$getLeadingUnderscores(introName);
        var leadingUnderscores = _v0.a;
        var name = _v0.b;
        var first = $elm$core$String$left_fn(1, name);
        var remaining = $elm$core$String$dropLeft_fn(1, name);
        var body = _String_foldl_fn($author$project$Utils$String$elmify, _Utils_Tuple2(false, ""), remaining).b;
        return _Utils_ap($elm$core$String$toUpper(first), _Utils_ap(body, leadingUnderscores));
    };
    var $author$project$Utils$String$sanitize = function (name) {
        switch (name) {
            case "in":
                return "in_";
            case "type":
                return "type_";
            case "case":
                return "case_";
            case "let":
                return "let_";
            case "module":
                return "module_";
            case "exposing":
                return "exposing_";
            default:
                return name;
        }
    };
    var $author$project$Utils$String$formatValue = function (introName) {
        var _v0 = $author$project$Utils$String$getLeadingUnderscores(introName);
        var leadingUnderscores = _v0.a;
        var name = _v0.b;
        var first = $elm$core$String$left_fn(1, name);
        var remaining = $elm$core$String$dropLeft_fn(1, name);
        var body = _String_foldl_fn($author$project$Utils$String$elmify, _Utils_Tuple2(false, ""), remaining).b;
        return $author$project$Utils$String$sanitize(_Utils_ap($elm$core$String$toLower(first), _Utils_ap(body, leadingUnderscores)));
    };
    var $mdgriffith$elm_codegen$Elm$Annotation$named_fn = function (mod, name) {
        return {
            gJ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases,
            a: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed_fn($mdgriffith$elm_codegen$Internal$Compiler$nodify(_Utils_Tuple2(mod, $mdgriffith$elm_codegen$Internal$Format$formatType(name))), _List_Nil),
            d: function () {
                if (!mod.b) {
                    return _List_Nil;
                }
                else {
                    return _List_fromArray([mod]);
                }
            }()
        };
    }, $mdgriffith$elm_codegen$Elm$Annotation$named = F2($mdgriffith$elm_codegen$Elm$Annotation$named_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$DuplicateFieldInRecord = function (a) {
        return { $: 5, a: a };
    };
    var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr = function (a) {
        return { $: 18, a: a };
    };
    var $mdgriffith$elm_codegen$Elm$record = function (fields) {
        return $mdgriffith$elm_codegen$Internal$Compiler$expression(function (index) {
            var unified = $elm$core$List$foldl_fn_unwrapped(function (_v4, found) {
                var unformattedFieldName = _v4.a;
                var fieldExpression = _v4.b;
                var fieldName = $mdgriffith$elm_codegen$Internal$Format$formatValue(unformattedFieldName);
                var _v5 = $mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails_fn(found.aP, fieldExpression);
                var newIndex = _v5.a;
                var exp = _v5.b;
                return {
                    Y: function () {
                        if ($elm$core$Set$member_fn(fieldName, found.a_)) {
                            return _List_Cons($mdgriffith$elm_codegen$Internal$Compiler$DuplicateFieldInRecord(fieldName), found.Y);
                        }
                        else {
                            var _v6 = exp.a;
                            if (_v6.$ === 1) {
                                if (!_v6.a.b) {
                                    return found.Y;
                                }
                                else {
                                    var errs = _v6.a;
                                    return _Utils_ap(errs, found.Y);
                                }
                            }
                            else {
                                var ann = _v6.a;
                                return found.Y;
                            }
                        }
                    }(),
                    aa: function () {
                        var _v7 = exp.a;
                        if (_v7.$ === 1) {
                            var err = _v7.a;
                            return found.aa;
                        }
                        else {
                            var ann = _v7.a;
                            return _List_Cons(_Utils_Tuple2($mdgriffith$elm_codegen$Internal$Format$formatValue(fieldName), ann), found.aa);
                        }
                    }(),
                    hc: _List_Cons(_Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$nodify(fieldName), $mdgriffith$elm_codegen$Internal$Compiler$nodify(exp._)), found.hc),
                    d: _Utils_ap(exp.d, found.d),
                    aP: newIndex,
                    a_: $elm$core$Set$insert_fn(fieldName, found.a_)
                };
            }, { Y: _List_Nil, aa: _List_Nil, hc: _List_Nil, d: _List_Nil, aP: index, a_: $elm$core$Set$empty }, fields);
            return {
                a: function () {
                    var _v0 = unified.Y;
                    if (!_v0.b) {
                        return $elm$core$Result$Ok({
                            gJ: $elm$core$List$foldl_fn_unwrapped(function (_v1, gathered) {
                                var name = _v1.a;
                                var ann = _v1.b;
                                return $elm$core$Dict$union_fn(ann.gJ, gathered);
                            }, $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, unified.aa),
                            f: $elm$core$List$foldl_fn_unwrapped(function (_v2, gathered) {
                                var name = _v2.a;
                                var ann = _v2.b;
                                return $mdgriffith$elm_codegen$Internal$Compiler$mergeInferences_fn(ann.f, gathered);
                            }, $elm$core$Dict$empty, unified.aa),
                            aK: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Record($elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$nodifyAll_a0, $elm$core$List$map_fn(function (_v3) {
                                var name = _v3.a;
                                var ann = _v3.b;
                                return _Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$nodify(name), $mdgriffith$elm_codegen$Internal$Compiler$nodify(ann.aK));
                            }, $elm$core$List$reverse(unified.aa))))
                        });
                    }
                    else {
                        var errs = _v0;
                        return $elm$core$Result$Err(errs);
                    }
                }(),
                _: $stil4m$elm_syntax$Elm$Syntax$Expression$RecordExpr($elm$core$List$map_fn($mdgriffith$elm_codegen$Internal$Compiler$nodifyAll_a0, $elm$core$List$reverse(unified.hc))),
                d: unified.d
            };
        });
    };
    var $author$project$Gen$Json$Decode$string = $mdgriffith$elm_codegen$Elm$value({
        a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]))),
        b: _List_fromArray(["Json", "Decode"]),
        c: "string"
    });
    var $mdgriffith$elm_codegen$Elm$val = function (name) {
        return $mdgriffith$elm_codegen$Elm$value({ a: $elm$core$Maybe$Nothing, b: _List_Nil, c: name });
    };
    var $mdgriffith$elm_codegen$Elm$Variant_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $mdgriffith$elm_codegen$Elm$Variant = F2($mdgriffith$elm_codegen$Elm$Variant_fn);
    var $mdgriffith$elm_codegen$Elm$variantWith = $mdgriffith$elm_codegen$Elm$Variant;
    var $author$project$Generate$Scalar$generateScalarCodec = function (_v0) {
        var rawname = _v0.a;
        var details = _v0.b;
        if ($elm$core$List$member_fn($elm$core$String$toLower(rawname), $author$project$Generate$Scalar$builtIn)) {
            return _List_Nil;
        }
        else {
            var typename = $author$project$Utils$String$formatScalar(rawname);
            var name = $author$project$Utils$String$formatValue(typename);
            return _List_fromArray([
                $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                    g9: true,
                    hj: $elm$core$Maybe$Just("Scalar Decoders and Encoders")
                }, $mdgriffith$elm_codegen$Elm$customType_fn(typename, _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Variant_fn(typename, _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]))
                ]))),
                $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                    g9: true,
                    hj: $elm$core$Maybe$Just("Scalar Decoders and Encoders")
                }, $mdgriffith$elm_codegen$Elm$declaration_fn(name, $mdgriffith$elm_codegen$Elm$withType_fn($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Codec", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, typename)
                ])), $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
                    _Utils_Tuple2("encode", $mdgriffith$elm_codegen$Elm$fn_fn(_Utils_Tuple2("val", $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, typename))), function (val) {
                        return $mdgriffith$elm_codegen$Elm$Case$custom_fn(val, $mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, typename), _List_fromArray([
                            $mdgriffith$elm_codegen$Elm$Case$branch1_fn(typename, _Utils_Tuple2("str", $mdgriffith$elm_codegen$Elm$Annotation$string), $author$project$Gen$Json$Encode$call_.hZ)
                        ]));
                    })),
                    _Utils_Tuple2("decoder", A2($author$project$Gen$Json$Decode$call_.ei, $mdgriffith$elm_codegen$Elm$val(typename), $author$project$Gen$Json$Decode$string))
                ])))))
            ]);
        }
    };
    var $author$project$Generate$Scalar$generate_fn = function (namespace, schema) {
        return _List_Cons($mdgriffith$elm_codegen$Elm$alias_fn("Codec", $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
            _Utils_Tuple2("encode", $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("scalar")
            ]), $author$project$Gen$Json$Encode$annotation_.bK)),
            _Utils_Tuple2("decoder", $author$project$Gen$Json$Decode$annotation_.gY($mdgriffith$elm_codegen$Elm$Annotation$var("scalar")))
        ]))), $elm$core$List$concatMap_fn($author$project$Generate$Scalar$generateScalarCodec, $elm$core$Dict$toList(schema.hP)));
    }, $author$project$Generate$Scalar$generate = F2($author$project$Generate$Scalar$generate_fn);
    var $author$project$Generate$Root$groups = { aT: "Batching and Mapping", hv: "Mutations", bz: "Optional Inputs", hK: "Queries" };
    var $author$project$Generate$Root$groupOrder = function (group) {
        var _v0 = group.hj;
        if (_v0.$ === 1) {
            return 1000;
        }
        else {
            var name = _v0.a;
            return _Utils_eq(name, $author$project$Generate$Root$groups.hK) ? 1 : (_Utils_eq(name, $author$project$Generate$Root$groups.hv) ? 2 : (_Utils_eq(name, $author$project$Generate$Root$groups.bz) ? 3 : 4));
        }
    };
    var $author$project$Gen$GraphQL$Engine$make_ = {
        bN: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Option", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("value")
            ]))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "Absent"
        }),
        b4: F2(function (ar0, ar1) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Argument", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("obj")
                ]))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "ArgValue"
            }), _List_fromArray([ar0, ar1]));
        }),
        ca: function (ar0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil)),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "BadBody"
            }), _List_fromArray([ar0]));
        },
        cb: function (ar0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil)),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "BadStatus"
            }), _List_fromArray([ar0]));
        },
        cc: function (ar0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil)),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "BadUrl"
            }), _List_fromArray([ar0]));
        },
        eJ: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil)),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "NetworkError"
        }),
        eM: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Option", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("value")
            ]))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "Null"
        }),
        e6: function (ar0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Option", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ]))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "Present"
            }), _List_fromArray([ar0]));
        },
        R: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil)),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "Timeout"
        }),
        gr: function (ar0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Argument", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("obj")
                ]))),
                b: _List_fromArray(["GraphQL", "Engine"]),
                c: "Var"
            }), _List_fromArray([ar0]));
        }
    };
    var $author$project$Gen$GraphQL$Engine$values_ = {
        bQ: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$string,
                $mdgriffith$elm_codegen$Elm$Annotation$string,
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil),
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "InputObject", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "InputObject", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("value")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "addField"
        }),
        bS: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$string,
                $mdgriffith$elm_codegen$Elm$Annotation$string,
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Option", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ])),
                $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil)),
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "InputObject", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("input")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "InputObject", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("input")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "addOptionalField"
        }),
        bY: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ])),
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("b")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "andMap"
        }),
        b0: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil),
                $mdgriffith$elm_codegen$Elm$Annotation$string
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Argument", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("obj")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "arg"
        }),
        b1: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Argument", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("obj")
                ]))),
                $mdgriffith$elm_codegen$Elm$Annotation$string
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Argument", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("input")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "argList"
        }),
        cd: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string])),
                $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                    _Utils_Tuple2("args", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$tuple_fn($mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "VariableDetails", _List_Nil)))),
                    _Utils_Tuple2("body", $mdgriffith$elm_codegen$Elm$Annotation$string),
                    _Utils_Tuple2("fragments", $mdgriffith$elm_codegen$Elm$Annotation$string)
                ]))),
                $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ])))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                $mdgriffith$elm_codegen$Elm$Annotation$var("data")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "bakeToSelection"
        }),
        ce: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ])))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("data"))
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "batch"
        }),
        ct: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                $mdgriffith$elm_codegen$Elm$Annotation$var("data")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "decode"
        }),
        cu: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ]))
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "decodeNullable"
        }),
        cI: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Argument", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("obj")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "encodeArgument"
        }),
        cJ: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$tuple_fn($mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Argument", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("obj")
                ])))),
                $mdgriffith$elm_codegen$Elm$Annotation$string
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Argument", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("input")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "encodeInputObject"
        }),
        cK: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "InputObject", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Value", _List_Nil))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "encodeInputObjectAsJson"
        }),
        cL: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Optional", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("arg")
                ])))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$tuple_fn($mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Argument", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("arg")
            ])))))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "encodeOptionals"
        }),
        cM: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Optional", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("arg")
                ])))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$tuple_fn($mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "encodeOptionalsAsJson"
        }),
        cO: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$tuple_fn($mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$var("item")))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("item")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "enum"
        }),
        c_: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$string,
                $mdgriffith$elm_codegen$Elm$Annotation$string,
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                $mdgriffith$elm_codegen$Elm$Annotation$var("data")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "field"
        }),
        da: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "InputObject", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("args")
                ])),
                $mdgriffith$elm_codegen$Elm$Annotation$string,
                $mdgriffith$elm_codegen$Elm$Annotation$string,
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                $mdgriffith$elm_codegen$Elm$Annotation$var("data")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "fieldWith"
        }),
        bo: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "InputObject", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("value")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "inputObject"
        }),
        dV: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "InputObject", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$tuple_fn($mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "VariableDetails", _List_Nil))))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "inputObjectToFieldList"
        }),
        d4: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$string,
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ])),
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("b")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "jsonField"
        }),
        ef: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("data"))
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "list"
        }),
        ei: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                $mdgriffith$elm_codegen$Elm$Annotation$var("b")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "map"
        }),
        ej: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("b")
                ]), $mdgriffith$elm_codegen$Elm$Annotation$var("c")),
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ])),
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("b")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                $mdgriffith$elm_codegen$Elm$Annotation$var("c")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "map2"
        }),
        er: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Request", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Request", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("b")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "mapRequest"
        }),
        eu: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$tuple_fn($mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$var("item")))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("item")
                ]))
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "maybeEnum"
        }),
        ev: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil)),
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "maybeScalarEncode"
        }),
        bu: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Mutation", _List_Nil),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
                ])),
                $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                    _Utils_Tuple2("headers", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Http"]), "Header", _List_Nil))),
                    _Utils_Tuple2("url", $mdgriffith$elm_codegen$Elm$Annotation$string),
                    _Utils_Tuple2("timeout", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float]))),
                    _Utils_Tuple2("tracker", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string])))
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Cmd", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Result", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
                ]))
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "mutation"
        }),
        eE: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Mutation", _List_Nil),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
                ])),
                $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                    _Utils_Tuple2("headers", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Http"]), "Header", _List_Nil))),
                    _Utils_Tuple2("url", $mdgriffith$elm_codegen$Elm$Annotation$string),
                    _Utils_Tuple2("timeout", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float]))),
                    _Utils_Tuple2("tracker", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string])))
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Cmd", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Result", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("msg")
                ]))
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "mutationRisky"
        }),
        eF: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Mutation", _List_Nil),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ])),
                $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                    _Utils_Tuple2("headers", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Http"]), "Header", _List_Nil))),
                    _Utils_Tuple2("url", $mdgriffith$elm_codegen$Elm$Annotation$string),
                    _Utils_Tuple2("timeout", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float])))
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Task", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil),
                $mdgriffith$elm_codegen$Elm$Annotation$var("value")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "mutationRiskyTask"
        }),
        eG: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Mutation", _List_Nil),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ])),
                $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                    _Utils_Tuple2("headers", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Http"]), "Header", _List_Nil))),
                    _Utils_Tuple2("url", $mdgriffith$elm_codegen$Elm$Annotation$string),
                    _Utils_Tuple2("timeout", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float])))
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Task", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil),
                $mdgriffith$elm_codegen$Elm$Annotation$var("value")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "mutationTask"
        }),
        eN: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ]))
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "nullable"
        }),
        eO: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$string,
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("otherSource"),
                $mdgriffith$elm_codegen$Elm$Annotation$var("data")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "object"
        }),
        eS: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "InputObject", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("args")
                ])),
                $mdgriffith$elm_codegen$Elm$Annotation$string,
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("otherSource"),
                $mdgriffith$elm_codegen$Elm$Annotation$var("data")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "objectWith"
        }),
        bz: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$string,
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Argument", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("arg")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Optional", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("arg")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "optional"
        }),
        bC: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Query", _List_Nil),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ])),
                $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                    _Utils_Tuple2("headers", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Http"]), "Header", _List_Nil))),
                    _Utils_Tuple2("url", $mdgriffith$elm_codegen$Elm$Annotation$string),
                    _Utils_Tuple2("timeout", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float]))),
                    _Utils_Tuple2("tracker", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string])))
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Cmd", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Result", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ]))
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "query"
        }),
        e9: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Query", _List_Nil),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ])),
                $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                    _Utils_Tuple2("headers", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Http"]), "Header", _List_Nil))),
                    _Utils_Tuple2("url", $mdgriffith$elm_codegen$Elm$Annotation$string),
                    _Utils_Tuple2("timeout", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float]))),
                    _Utils_Tuple2("tracker", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string])))
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Cmd", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Result", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ]))
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "queryRisky"
        }),
        fa: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Query", _List_Nil),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ])),
                $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                    _Utils_Tuple2("headers", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Http"]), "Header", _List_Nil))),
                    _Utils_Tuple2("url", $mdgriffith$elm_codegen$Elm$Annotation$string),
                    _Utils_Tuple2("timeout", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float])))
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Task", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil),
                $mdgriffith$elm_codegen$Elm$Annotation$var("value")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "queryRiskyTask"
        }),
        fb: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$string,
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "queryString"
        }),
        fc: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Query", _List_Nil),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ])),
                $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                    _Utils_Tuple2("headers", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Http"]), "Header", _List_Nil))),
                    _Utils_Tuple2("url", $mdgriffith$elm_codegen$Elm$Annotation$string),
                    _Utils_Tuple2("timeout", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float])))
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Task", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil),
                $mdgriffith$elm_codegen$Elm$Annotation$var("value")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "queryTask"
        }),
        fe: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("recovered"),
                $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ]), $mdgriffith$elm_codegen$Elm$Annotation$var("recovered")),
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                $mdgriffith$elm_codegen$Elm$Annotation$var("recovered")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "recover"
        }),
        fF: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("data")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                $mdgriffith$elm_codegen$Elm$Annotation$var("data")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "select"
        }),
        hS: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                $mdgriffith$elm_codegen$Elm$Annotation$unit
            ]))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "selectTypeNameButSkip"
        }),
        fI: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Request", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Cmd", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Result", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ]))
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "send"
        }),
        fK: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                    _Utils_Tuple2("toHeader", $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$var("header"))),
                    _Utils_Tuple2("toExpectation", $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                            $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Http"]), "Response", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]))
                        ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Result", _List_fromArray([
                            $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Error", _List_Nil),
                            $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                        ])))
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$var("expectation"))),
                    _Utils_Tuple2("toBody", $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil)
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$var("body"))),
                    _Utils_Tuple2("toRequest", $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                            _Utils_Tuple2("method", $mdgriffith$elm_codegen$Elm$Annotation$string),
                            _Utils_Tuple2("headers", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("header"))),
                            _Utils_Tuple2("url", $mdgriffith$elm_codegen$Elm$Annotation$string),
                            _Utils_Tuple2("body", $mdgriffith$elm_codegen$Elm$Annotation$var("body")),
                            _Utils_Tuple2("expect", $mdgriffith$elm_codegen$Elm$Annotation$var("expectation")),
                            _Utils_Tuple2("timeout", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float]))),
                            _Utils_Tuple2("tracker", $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string])))
                        ]))
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$var("simulated")))
                ])),
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Request", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$var("simulated"))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "simulate"
        }),
        gi: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$tuple_fn($mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ]))))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                $mdgriffith$elm_codegen$Elm$Annotation$var("data")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "union"
        }),
        gl: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("selected")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("unsafe"),
                $mdgriffith$elm_codegen$Elm$Annotation$var("selected")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "unsafe"
        }),
        gx: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "versionedAlias"
        }),
        gy: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$int,
                $mdgriffith$elm_codegen$Elm$Annotation$string,
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ])),
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("b")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "versionedJsonField"
        }),
        gz: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "versionedName"
        }),
        gA: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ])),
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                $mdgriffith$elm_codegen$Elm$Annotation$var("b")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "with"
        }),
        gC: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$string,
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Selection", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("source"),
                $mdgriffith$elm_codegen$Elm$Annotation$var("data")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "withName"
        })
    };
    var $author$project$Generate$Root$generate_fn = function (namespace, schema) {
        return $mdgriffith$elm_codegen$Elm$fileWith_fn(_List_fromArray([namespace.bv]), {
            gJ: _List_Nil,
            g1: function (docs) {
                return _List_Cons("This is a file generated by `elm-gql` when you ran `elm-gql init`!", _List_Cons("It's yours now to do whatever you want with.", _List_Cons("This file does include decoders and encoders for all the Scalars for your GQL endpoint.  You'll need to make sure they are implemented correctly.", $elm$core$List$map_fn($mdgriffith$elm_codegen$Elm$docs, _List_sortBy_fn($author$project$Generate$Root$groupOrder, docs)))));
            }
        }, _Utils_ap(_List_fromArray([
            $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                g9: true,
                hj: $elm$core$Maybe$Just($author$project$Generate$Root$groups.hK)
            }, $mdgriffith$elm_codegen$Elm$alias_fn("Query", A2($author$project$Gen$GraphQL$Engine$annotation_.hT, $author$project$Gen$GraphQL$Engine$annotation_.bC, $mdgriffith$elm_codegen$Elm$Annotation$var("data")))),
            $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                g9: true,
                hj: $elm$core$Maybe$Just($author$project$Generate$Root$groups.hv)
            }, $mdgriffith$elm_codegen$Elm$alias_fn("Mutation", A2($author$project$Gen$GraphQL$Engine$annotation_.hT, $author$project$Gen$GraphQL$Engine$annotation_.bu, $mdgriffith$elm_codegen$Elm$Annotation$var("data")))),
            $mdgriffith$elm_codegen$Elm$alias_fn("Selection", A2($author$project$Gen$GraphQL$Engine$annotation_.hT, $mdgriffith$elm_codegen$Elm$Annotation$var("source"), $mdgriffith$elm_codegen$Elm$Annotation$var("data"))),
            $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                g9: true,
                hj: $elm$core$Maybe$Just($author$project$Generate$Root$groups.hK)
            }, $mdgriffith$elm_codegen$Elm$declaration_fn("query", $mdgriffith$elm_codegen$Elm$fn2_fn_unwrapped(_Utils_Tuple2("sel", $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Query", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("data")
            ])))), _Utils_Tuple2("options", $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                _Utils_Tuple2("headers", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_fromArray(["Http"]), "Header"))),
                _Utils_Tuple2("url", $mdgriffith$elm_codegen$Elm$Annotation$string),
                _Utils_Tuple2("timeout", $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$float)),
                _Utils_Tuple2("tracker", $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$string))
            ])))), function (sel, options) {
                return $mdgriffith$elm_codegen$Elm$withType_fn($author$project$Gen$Platform$Cmd$annotation_.gR(A2($author$project$Gen$Result$annotation_.fs, $author$project$Gen$GraphQL$Engine$annotation_.cT, $mdgriffith$elm_codegen$Elm$Annotation$var("data"))), A2($author$project$Gen$GraphQL$Engine$call_.bC, sel, options));
            }))),
            $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                g9: true,
                hj: $elm$core$Maybe$Just($author$project$Generate$Root$groups.hv)
            }, $mdgriffith$elm_codegen$Elm$declaration_fn("mutation", $mdgriffith$elm_codegen$Elm$fn2_fn_unwrapped(_Utils_Tuple2("sel", $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Mutation", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("data")
            ])))), _Utils_Tuple2("options", $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                _Utils_Tuple2("headers", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_fromArray(["Http"]), "Header"))),
                _Utils_Tuple2("url", $mdgriffith$elm_codegen$Elm$Annotation$string),
                _Utils_Tuple2("timeout", $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$float)),
                _Utils_Tuple2("tracker", $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$string))
            ])))), function (sel, options) {
                return $mdgriffith$elm_codegen$Elm$withType_fn($author$project$Gen$Platform$Cmd$annotation_.gR(A2($author$project$Gen$Result$annotation_.fs, $author$project$Gen$GraphQL$Engine$annotation_.cT, $mdgriffith$elm_codegen$Elm$Annotation$var("data"))), A2($author$project$Gen$GraphQL$Engine$call_.bu, sel, options));
            }))),
            $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                g9: true,
                hj: $elm$core$Maybe$Just($author$project$Generate$Root$groups.hK)
            }, $mdgriffith$elm_codegen$Elm$declaration_fn("queryTask", $mdgriffith$elm_codegen$Elm$fn2_fn_unwrapped(_Utils_Tuple2("sel", $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Query", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("data")
            ])))), _Utils_Tuple2("options", $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                _Utils_Tuple2("headers", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_fromArray(["Http"]), "Header"))),
                _Utils_Tuple2("url", $mdgriffith$elm_codegen$Elm$Annotation$string),
                _Utils_Tuple2("timeout", $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$float))
            ])))), function (sel, options) {
                return $mdgriffith$elm_codegen$Elm$withType_fn($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Task"]), "Task", _List_fromArray([
                    $author$project$Gen$GraphQL$Engine$annotation_.cT,
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ])), A2($author$project$Gen$GraphQL$Engine$call_.fc, sel, options));
            }))),
            $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                g9: true,
                hj: $elm$core$Maybe$Just($author$project$Generate$Root$groups.hv)
            }, $mdgriffith$elm_codegen$Elm$declaration_fn("mutationTask", $mdgriffith$elm_codegen$Elm$fn2_fn_unwrapped(_Utils_Tuple2("sel", $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Mutation", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("data")
            ])))), _Utils_Tuple2("options", $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$record(_List_fromArray([
                _Utils_Tuple2("headers", $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_fromArray(["Http"]), "Header"))),
                _Utils_Tuple2("url", $mdgriffith$elm_codegen$Elm$Annotation$string),
                _Utils_Tuple2("timeout", $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$float))
            ])))), function (sel, options) {
                return $mdgriffith$elm_codegen$Elm$withType_fn($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Task"]), "Task", _List_fromArray([
                    $author$project$Gen$GraphQL$Engine$annotation_.cT,
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ])), A2($author$project$Gen$GraphQL$Engine$call_.eG, sel, options));
            }))),
            $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                g9: true,
                hj: $elm$core$Maybe$Just($author$project$Generate$Root$groups.bz)
            }, $mdgriffith$elm_codegen$Elm$declaration_fn("null", $author$project$Gen$GraphQL$Engine$make_.eM)),
            $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                g9: true,
                hj: $elm$core$Maybe$Just($author$project$Generate$Root$groups.bz)
            }, $mdgriffith$elm_codegen$Elm$declaration_fn("absent", $author$project$Gen$GraphQL$Engine$make_.bN)),
            $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                g9: true,
                hj: $elm$core$Maybe$Just($author$project$Generate$Root$groups.bz)
            }, $mdgriffith$elm_codegen$Elm$declaration_fn("present", $mdgriffith$elm_codegen$Elm$withType_fn($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("input")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Option", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("input")
            ]))), $mdgriffith$elm_codegen$Elm$fn_fn(_Utils_Tuple2("input", $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$var("input"))), $author$project$Gen$GraphQL$Engine$make_.e6)))),
            $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                g9: false,
                hj: $elm$core$Maybe$Just($author$project$Generate$Root$groups.bz)
            }, $mdgriffith$elm_codegen$Elm$alias_fn("Option", $author$project$Gen$GraphQL$Engine$annotation_.e$($mdgriffith$elm_codegen$Elm$Annotation$var("input")))),
            $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                g9: true,
                hj: $elm$core$Maybe$Just($author$project$Generate$Root$groups.aT)
            }, $mdgriffith$elm_codegen$Elm$declaration_fn("batch", $author$project$Gen$GraphQL$Engine$values_.ce)),
            $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                g9: true,
                hj: $elm$core$Maybe$Just($author$project$Generate$Root$groups.aT)
            }, $mdgriffith$elm_codegen$Elm$declaration_fn("map", $author$project$Gen$GraphQL$Engine$values_.ei)),
            $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                g9: true,
                hj: $elm$core$Maybe$Just($author$project$Generate$Root$groups.aT)
            }, $mdgriffith$elm_codegen$Elm$declaration_fn("map2", $author$project$Gen$GraphQL$Engine$values_.ej))
        ]), $author$project$Generate$Scalar$generate_fn(namespace, schema)));
    }, $author$project$Generate$Root$generate = F2($author$project$Generate$Root$generate_fn);
    var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccessFunction = function (a) {
        return { $: 21, a: a };
    };
    var $elm$core$List$isEmpty = function (xs) {
        if (!xs.b) {
            return true;
        }
        else {
            return false;
        }
    };
    var $mdgriffith$elm_codegen$Elm$popLastAndDenodeLast = function (lst) {
        var _v0 = $elm$core$List$reverse(lst);
        if (!_v0.b) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var last = _v0.a;
            var initReverse = _v0.b;
            return $elm$core$Maybe$Just(_Utils_Tuple2($elm$core$List$reverse(initReverse), $mdgriffith$elm_codegen$Internal$Compiler$denode(last)));
        }
    };
    var $mdgriffith$elm_codegen$Elm$betaReduce = function (e) {
        var extractLastArg = function (arg) {
            _v0$2: while (true) {
                switch (arg.$) {
                    case 3:
                        if (!arg.a.b) {
                            var n = arg.b;
                            return $elm$core$Maybe$Just(n);
                        }
                        else {
                            break _v0$2;
                        }
                    case 14:
                        var p = arg.a;
                        return extractLastArg($mdgriffith$elm_codegen$Internal$Compiler$denode(p));
                    default:
                        break _v0$2;
                }
            }
            return $elm$core$Maybe$Nothing;
        };
        if (e.$ === 17) {
            var expression = e.a._;
            var args = e.a.r;
            var _v2 = $mdgriffith$elm_codegen$Elm$popLastAndDenodeLast(args);
            if ((!_v2.$) && (_v2.a.b.$ === 11)) {
                var _v3 = _v2.a;
                var initLambdaArgs = _v3.a;
                var lastLambdaArg = _v3.b.a;
                var _v4 = $mdgriffith$elm_codegen$Internal$Compiler$denode(expression);
                switch (_v4.$) {
                    case 20:
                        var argNode = _v4.a;
                        var fieldNode = _v4.b;
                        var fieldName = $mdgriffith$elm_codegen$Internal$Compiler$denode(fieldNode);
                        var arg = $mdgriffith$elm_codegen$Internal$Compiler$denode(argNode);
                        if ((arg.$ === 3) && (!arg.a.b)) {
                            var argName = arg.b;
                            return _Utils_eq(argName, lastLambdaArg) ? $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccessFunction("." + fieldName) : e;
                        }
                        else {
                            return e;
                        }
                    case 1:
                        var applicationArgs = _v4.a;
                        var _v6 = $mdgriffith$elm_codegen$Elm$popLastAndDenodeLast(applicationArgs);
                        if (!_v6.$) {
                            if (!_v6.a.a.b) {
                                var _v7 = _v6.a;
                                var uniqueApplicationArg = _v7.b;
                                return _Utils_eq(extractLastArg(uniqueApplicationArg), $elm$core$Maybe$Just(lastLambdaArg)) ? $stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue_fn(_List_Nil, "identity") : e;
                            }
                            else {
                                var _v8 = _v6.a;
                                var initApplicationArgs = _v8.a;
                                var lastApplicationArg = _v8.b;
                                if (_Utils_eq(extractLastArg(lastApplicationArg), $elm$core$Maybe$Just(lastLambdaArg))) {
                                    if ($elm$core$List$isEmpty(initLambdaArgs)) {
                                        if (initApplicationArgs.b && (!initApplicationArgs.b.b)) {
                                            var s = initApplicationArgs.a;
                                            return $mdgriffith$elm_codegen$Elm$betaReduce($mdgriffith$elm_codegen$Internal$Compiler$denode(s));
                                        }
                                        else {
                                            return $stil4m$elm_syntax$Elm$Syntax$Expression$Application(initApplicationArgs);
                                        }
                                    }
                                    else {
                                        return $mdgriffith$elm_codegen$Elm$betaReduce($stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression({
                                            r: initLambdaArgs,
                                            _: $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Expression$Application(initApplicationArgs))
                                        }));
                                    }
                                }
                                else {
                                    return e;
                                }
                            }
                        }
                        else {
                            return e;
                        }
                    default:
                        return e;
                }
            }
            else {
                return e;
            }
        }
        else {
            return e;
        }
    };
    var $mdgriffith$elm_codegen$Elm$functionReduced_fn = function (argBaseName, toExpression) {
        return $mdgriffith$elm_codegen$Internal$Compiler$expression(function (index) {
            var _v0 = $mdgriffith$elm_codegen$Internal$Index$getName_fn(argBaseName, index);
            var arg1Name = _v0.a;
            var newIndex = _v0.b;
            var argType = $mdgriffith$elm_codegen$Elm$Annotation$var(arg1Name);
            var arg1 = $mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just(argType),
                b: _List_Nil,
                c: arg1Name
            });
            var _v1 = toExpression(arg1);
            var toExpr = _v1;
            var _return = toExpr(newIndex);
            return {
                a: function () {
                    var _v2 = _return.a;
                    if (_v2.$ === 1) {
                        var err = _v2.a;
                        return _return.a;
                    }
                    else {
                        var returnAnnotation = _v2.a;
                        return $elm$core$Result$Ok({
                            gJ: returnAnnotation.gJ,
                            f: returnAnnotation.f,
                            aK: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation_fn($mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType(arg1Name)), $mdgriffith$elm_codegen$Internal$Compiler$nodify(returnAnnotation.aK))
                        });
                    }
                }(),
                _: $mdgriffith$elm_codegen$Elm$betaReduce($stil4m$elm_syntax$Elm$Syntax$Expression$LambdaExpression({
                    r: _List_fromArray([
                        $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Pattern$VarPattern(arg1Name))
                    ]),
                    _: $mdgriffith$elm_codegen$Internal$Compiler$nodify(_return._)
                })),
                d: _return.d
            };
        });
    }, $mdgriffith$elm_codegen$Elm$functionReduced = F2($mdgriffith$elm_codegen$Elm$functionReduced_fn);
    var $author$project$Gen$Json$Decode$andThen_fn = function (andThenArg, andThenArg0) {
        return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("b")
                ]))),
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("b")
            ])))),
            b: _List_fromArray(["Json", "Decode"]),
            c: "andThen"
        }), _List_fromArray([
            $mdgriffith$elm_codegen$Elm$functionReduced_fn("andThenUnpack", andThenArg),
            andThenArg0
        ]));
    }, $author$project$Gen$Json$Decode$andThen = F2($author$project$Gen$Json$Decode$andThen_fn);
    var $mdgriffith$elm_codegen$Elm$Case$branch0_fn = function (name, exp) {
        return function (index) {
            return _Utils_Tuple3(index, $stil4m$elm_syntax$Elm$Syntax$Pattern$NamedPattern_fn({
                bt: _List_Nil,
                c: $mdgriffith$elm_codegen$Internal$Format$formatType(name)
            }, _List_Nil), exp);
        };
    }, $mdgriffith$elm_codegen$Elm$Case$branch0 = F2($mdgriffith$elm_codegen$Elm$Case$branch0_fn);
    var $author$project$Utils$String$formatTypename = function (introName) {
        var _v0 = $author$project$Utils$String$getLeadingUnderscores(introName);
        var leadingUnderscores = _v0.a;
        var name = _v0.b;
        var first = $elm$core$String$left_fn(1, name);
        return _Utils_ap($elm$core$String$toUpper(first), _Utils_ap($elm$core$String$dropLeft_fn(1, name), leadingUnderscores));
    };
    var $author$project$Generate$Enums$enumNameToConstructorName = $author$project$Utils$String$formatTypename;
    var $mdgriffith$elm_codegen$Internal$Compiler$expose = function (decl) {
        switch (decl.$) {
            case 1:
                return decl;
            case 2:
                return decl;
            default:
                var details = decl.a;
                return $mdgriffith$elm_codegen$Internal$Compiler$Declaration(_Utils_update(details, {
                    ah: $mdgriffith$elm_codegen$Internal$Compiler$Exposed({ g9: false, hj: $elm$core$Maybe$Nothing })
                }));
        }
    };
    var $mdgriffith$elm_codegen$Elm$expose = $mdgriffith$elm_codegen$Internal$Compiler$expose;
    var $stil4m$elm_syntax$Elm$Syntax$Expression$Literal = function (a) {
        return { $: 11, a: a };
    };
    var $mdgriffith$elm_codegen$Internal$Types$nodify = function (exp) {
        return $stil4m$elm_syntax$Elm$Syntax$Node$Node_fn($stil4m$elm_syntax$Elm$Syntax$Range$emptyRange, exp);
    };
    var $mdgriffith$elm_codegen$Internal$Types$string = $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed_fn($mdgriffith$elm_codegen$Internal$Types$nodify(_Utils_Tuple2(_List_Nil, "String")), _List_Nil);
    var $mdgriffith$elm_codegen$Elm$string = function (literal) {
        return function (_v0) {
            return {
                a: $elm$core$Result$Ok({ gJ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, f: $elm$core$Dict$empty, aK: $mdgriffith$elm_codegen$Internal$Types$string }),
                _: $stil4m$elm_syntax$Elm$Syntax$Expression$Literal(literal),
                d: _List_Nil
            };
        };
    };
    var $author$project$Gen$Json$Decode$fail = function (failArg) {
        return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ])))),
            b: _List_fromArray(["Json", "Decode"]),
            c: "fail"
        }), _List_fromArray([
            $mdgriffith$elm_codegen$Elm$string(failArg)
        ]));
    };
    var $mdgriffith$elm_codegen$Elm$renderStandardComment = function (groups) {
        return $elm$core$List$isEmpty(groups) ? _List_Nil : $elm$core$List$map_fn($mdgriffith$elm_codegen$Elm$docs, groups);
    };
    var $mdgriffith$elm_codegen$Internal$Index$startIndex = $mdgriffith$elm_codegen$Internal$Index$Index_fn(0, _List_Nil, $elm$core$Set$empty, true);
    var $mdgriffith$elm_codegen$Elm$file_fn = function (mod, decs) {
        return $mdgriffith$elm_codegen$Internal$Render$render_fn($mdgriffith$elm_codegen$Elm$renderStandardComment, { gJ: _List_Nil, t: decs, aP: $mdgriffith$elm_codegen$Internal$Index$startIndex, bt: mod });
    }, $mdgriffith$elm_codegen$Elm$file = F2($mdgriffith$elm_codegen$Elm$file_fn);
    var $stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr = function (a) {
        return { $: 19, a: a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$MismatchedList_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $mdgriffith$elm_codegen$Internal$Compiler$MismatchedList = F2($mdgriffith$elm_codegen$Internal$Compiler$MismatchedList_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$unifyHelper_fn = function (exps, existing) {
        unifyHelper: while (true) {
            if (!exps.b) {
                return $elm$core$Result$Ok(existing);
            }
            else {
                var top = exps.a;
                var remain = exps.b;
                var _v1 = top.a;
                if (!_v1.$) {
                    var ann = _v1.a;
                    var _v2 = $mdgriffith$elm_codegen$Internal$Compiler$unifiable_fn(ann.gJ, ann.f, ann.aK, existing.aK);
                    if (_v2.b.$ === 1) {
                        var err = _v2.b.a;
                        return $elm$core$Result$Err(_List_fromArray([
                            $mdgriffith$elm_codegen$Internal$Compiler$MismatchedList_fn(ann.aK, existing.aK)
                        ]));
                    }
                    else {
                        var cache = _v2.a;
                        var _new = _v2.b.a;
                        var $temp$exps = remain, $temp$existing = {
                            gJ: existing.gJ,
                            f: $mdgriffith$elm_codegen$Internal$Compiler$mergeInferences_fn(existing.f, cache),
                            aK: _new
                        };
                        exps = $temp$exps;
                        existing = $temp$existing;
                        continue unifyHelper;
                    }
                }
                else {
                    var err = _v1.a;
                    return $elm$core$Result$Err(err);
                }
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$unifyHelper = F2($mdgriffith$elm_codegen$Internal$Compiler$unifyHelper_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$unify = function (exps) {
        if (!exps.b) {
            return $elm$core$Result$Ok({
                gJ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases,
                f: $elm$core$Dict$empty,
                aK: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType("a")
            });
        }
        else {
            var top = exps.a;
            var remain = exps.b;
            var _v1 = top.a;
            if (!_v1.$) {
                var ann = _v1.a;
                return $mdgriffith$elm_codegen$Internal$Compiler$unifyHelper_fn(remain, ann);
            }
            else {
                var err = _v1.a;
                return $elm$core$Result$Err(err);
            }
        }
    };
    var $mdgriffith$elm_codegen$Elm$list = function (exprs) {
        return $mdgriffith$elm_codegen$Internal$Compiler$expression(function (index) {
            var exprDetails = $mdgriffith$elm_codegen$Internal$Compiler$thread_fn(index, exprs);
            return {
                a: $elm$core$Result$map_fn(function (inner) {
                    return {
                        gJ: inner.gJ,
                        f: inner.f,
                        aK: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed_fn($mdgriffith$elm_codegen$Internal$Compiler$nodify(_Utils_Tuple2(_List_Nil, "List")), _List_fromArray([
                            $mdgriffith$elm_codegen$Internal$Compiler$nodify(inner.aK)
                        ]))
                    };
                }, $mdgriffith$elm_codegen$Internal$Compiler$unify(exprDetails)),
                _: $stil4m$elm_syntax$Elm$Syntax$Expression$ListExpr($elm$core$List$map_fn(A2($elm$core$Basics$composeR, function ($) {
                    return $._;
                }, $mdgriffith$elm_codegen$Internal$Compiler$nodify), exprDetails)),
                d: $elm$core$List$concatMap_fn($mdgriffith$elm_codegen$Internal$Compiler$getImports, exprDetails)
            };
        });
    };
    var $author$project$Generate$Common$modules = {
        cO: F2(function (namespace, enumName) {
            return _List_fromArray([
                namespace.cQ,
                "Enum",
                $author$project$Utils$String$formatTypename(enumName)
            ]);
        }),
        g4: F2(function (namespace, enumName) {
            return _List_fromArray([
                namespace.bv,
                "Enum",
                $author$project$Utils$String$formatTypename(enumName)
            ]);
        }),
        an: F2(function (namespace, name) {
            return _List_fromArray([
                namespace,
                $author$project$Utils$String$formatTypename(name)
            ]);
        }),
        bu: F2(function (namespace, mutationName) {
            return _List_fromArray([
                namespace,
                "Mutations",
                $author$project$Utils$String$formatTypename(mutationName)
            ]);
        }),
        bC: F2(function (namespace, queryName) {
            return _List_fromArray([
                namespace,
                "Queries",
                $author$project$Utils$String$formatTypename(queryName)
            ]);
        })
    };
    var $stil4m$elm_syntax$Elm$Syntax$Pattern$AllPattern = { $: 0 };
    var $stil4m$elm_syntax$Elm$Syntax$Pattern$StringPattern = function (a) {
        return { $: 3, a: a };
    };
    var $mdgriffith$elm_codegen$Elm$Case$string_fn = function (mainExpression, branches) {
        return function (index) {
            var allBranches = _Utils_ap($elm$core$List$map_fn(function (_v2) {
                var caseString = _v2.a;
                var caseExpression = _v2.b;
                return function (branchIndex) {
                    return _Utils_Tuple3(branchIndex, $stil4m$elm_syntax$Elm$Syntax$Pattern$StringPattern(caseString), caseExpression);
                };
            }, branches.gP), _List_fromArray([
                function (branchIndex) {
                    return _Utils_Tuple3(branchIndex, $stil4m$elm_syntax$Elm$Syntax$Pattern$AllPattern, branches.hG);
                }
            ]));
            var _v0 = $mdgriffith$elm_codegen$Elm$Case$captureCase_fn(mainExpression, _List_Nil, $mdgriffith$elm_codegen$Internal$Index$dive(index), allBranches);
            var expr = _v0.a;
            var gathered = _v0.b;
            return {
                a: function () {
                    var _v1 = gathered.a;
                    if (_v1.$ === 1) {
                        return $elm$core$Result$Err(_List_fromArray([$mdgriffith$elm_codegen$Internal$Compiler$EmptyCaseStatement]));
                    }
                    else {
                        var ann = _v1.a;
                        return ann;
                    }
                }(),
                _: $stil4m$elm_syntax$Elm$Syntax$Expression$CaseExpression({
                    gP: $elm$core$List$reverse(gathered.gP),
                    _: $mdgriffith$elm_codegen$Internal$Compiler$nodify(expr._)
                }),
                d: _Utils_ap(expr.d, gathered.d)
            };
        };
    }, $mdgriffith$elm_codegen$Elm$Case$string = F2($mdgriffith$elm_codegen$Elm$Case$string_fn);
    var $author$project$Gen$Json$Encode$string = function (stringArg) {
        return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
            b: _List_fromArray(["Json", "Encode"]),
            c: "string"
        }), _List_fromArray([
            $mdgriffith$elm_codegen$Elm$string(stringArg)
        ]));
    };
    var $author$project$Gen$Json$Decode$succeed = function (succeedArg) {
        return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ])))),
            b: _List_fromArray(["Json", "Decode"]),
            c: "succeed"
        }), _List_fromArray([succeedArg]));
    };
    var $author$project$Generate$Enums$generateFiles_fn = function (namespace, graphQLSchema) {
        return $elm$core$List$filterMap_fn(function (_v0) {
            var enumDefinition = _v0.b;
            if (_String_startsWith_fn("_", enumDefinition.c)) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var enumEncoder = $mdgriffith$elm_codegen$Elm$declaration_fn("encode", $mdgriffith$elm_codegen$Elm$fn_fn(_Utils_Tuple2("val", $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, enumDefinition.c))), function (val) {
                    return $mdgriffith$elm_codegen$Elm$Case$custom_fn(val, $mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, enumDefinition.c), $elm$core$List$map_fn(function (variant) {
                        return $mdgriffith$elm_codegen$Elm$Case$branch0_fn($author$project$Generate$Enums$enumNameToConstructorName(variant.c), $author$project$Gen$Json$Encode$string(variant.c));
                    }, enumDefinition.ia));
                }));
                var constructors = $elm$core$List$map_fn(function (name) {
                    return _Utils_Tuple2($author$project$Generate$Enums$enumNameToConstructorName(name), _List_Nil);
                }, $elm$core$List$map_fn(function ($) {
                    return $.c;
                }, enumDefinition.ia));
                var enumDecoder = $mdgriffith$elm_codegen$Elm$declaration_fn("decoder", $mdgriffith$elm_codegen$Elm$withType_fn($author$project$Gen$Json$Decode$annotation_.gY($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, enumDefinition.c)), $author$project$Gen$Json$Decode$andThen_fn(function (str) {
                    return $mdgriffith$elm_codegen$Elm$Case$string_fn(str, {
                        gP: $elm$core$List$map_fn(function (_v3) {
                            var name = _v3.a;
                            return _Utils_Tuple2(name, $author$project$Gen$Json$Decode$succeed($mdgriffith$elm_codegen$Elm$value({
                                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, enumDefinition.c)),
                                b: _List_Nil,
                                c: name
                            })));
                        }, constructors),
                        hG: $author$project$Gen$Json$Decode$fail("Invalid type")
                    });
                }, $author$project$Gen$Json$Decode$string)));
                var enumTypeDeclaration = $mdgriffith$elm_codegen$Elm$customType_fn(enumDefinition.c, $elm$core$List$map_fn(function (_v2) {
                    var name = _v2.a;
                    var vals = _v2.b;
                    return $mdgriffith$elm_codegen$Elm$Variant_fn(name, vals);
                }, constructors));
                var listOfValues = $mdgriffith$elm_codegen$Elm$declaration_fn("all", $mdgriffith$elm_codegen$Elm$list($elm$core$List$map_fn(function (_v1) {
                    var enumName = _v1.a;
                    return $mdgriffith$elm_codegen$Elm$value({
                        a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, enumDefinition.c)),
                        b: _List_Nil,
                        c: enumName
                    });
                }, constructors)));
                return $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$file_fn(A2($author$project$Generate$Common$modules.g4, namespace, enumDefinition.c), _List_fromArray([
                    $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({ g9: true, hj: $elm$core$Maybe$Nothing }, enumTypeDeclaration),
                    $mdgriffith$elm_codegen$Elm$expose(listOfValues),
                    $mdgriffith$elm_codegen$Elm$expose(enumDecoder),
                    $mdgriffith$elm_codegen$Elm$expose(enumEncoder)
                ])));
            }
        }, $elm$core$Dict$toList(graphQLSchema.cQ));
    }, $author$project$Generate$Enums$generateFiles = F2($author$project$Generate$Enums$generateFiles_fn);
    var $mdgriffith$elm_codegen$Elm$variant = function (name) {
        return $mdgriffith$elm_codegen$Elm$Variant_fn(name, _List_Nil);
    };
    var $author$project$Generate$InputObjects$renderNewOptional_fn = function (namespace, schema, input) {
        var lockName = input.c + "_";
        return _List_fromArray([
            $mdgriffith$elm_codegen$Elm$expose($mdgriffith$elm_codegen$Elm$alias_fn(input.c, $author$project$Gen$GraphQL$Engine$annotation_.bo($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, lockName)))),
            $mdgriffith$elm_codegen$Elm$expose($mdgriffith$elm_codegen$Elm$customType_fn(lockName, _List_fromArray([
                $mdgriffith$elm_codegen$Elm$variant(lockName)
            ])))
        ]);
    }, $author$project$Generate$InputObjects$renderNewOptional = F3($author$project$Generate$InputObjects$renderNewOptional_fn);
    var $author$project$Generate$InputObjects$inputMainFile_fn = function (namespace, schema, inputObjects) {
        return $mdgriffith$elm_codegen$Elm$file_fn(_List_fromArray([namespace.bv, "Input"]), $elm$core$List$concatMap_fn(A2($author$project$Generate$InputObjects$renderNewOptional, namespace, schema), inputObjects));
    }, $author$project$Generate$InputObjects$inputMainFile = F3($author$project$Generate$InputObjects$inputMainFile_fn);
    var $author$project$Generate$InputObjects$areOptional = function (field) {
        var _v0 = field.aK;
        if (_v0.$ === 7) {
            return true;
        }
        else {
            return false;
        }
    };
    var $author$project$Generate$Input$Encode$docGroups = { aE: "Creating an input", bx: "Null values", bA: "Optional fields" };
    var $author$project$Gen$GraphQL$Engine$addField_fn = function (addFieldArg, addFieldArg0, addFieldArg1, addFieldArg2) {
        return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$string,
                $mdgriffith$elm_codegen$Elm$Annotation$string,
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil),
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "InputObject", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "InputObject", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("value")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "addField"
        }), _List_fromArray([
            $mdgriffith$elm_codegen$Elm$string(addFieldArg),
            $mdgriffith$elm_codegen$Elm$string(addFieldArg0),
            addFieldArg1,
            addFieldArg2
        ]));
    }, $author$project$Gen$GraphQL$Engine$addField = F4($author$project$Gen$GraphQL$Engine$addField_fn);
    var $author$project$GraphQL$Schema$UnwrappedValue = { $: 0 };
    var $author$project$Gen$Json$Encode$values_ = {
        b7: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil)),
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Array"]), "Array", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
            b: _List_fromArray(["Json", "Encode"]),
            c: "array"
        }),
        gN: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$bool]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
            b: _List_fromArray(["Json", "Encode"]),
            c: "bool"
        }),
        cA: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("k")
                ]), $mdgriffith$elm_codegen$Elm$Annotation$string),
                $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("v")
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil)),
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Dict"]), "Dict", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("k"),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("v")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
            b: _List_fromArray(["Json", "Encode"]),
            c: "dict"
        }),
        cH: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$int,
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil)
            ]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
            b: _List_fromArray(["Json", "Encode"]),
            c: "encode"
        }),
        he: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
            b: _List_fromArray(["Json", "Encode"]),
            c: "float"
        }),
        ho: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
            b: _List_fromArray(["Json", "Encode"]),
            c: "int"
        }),
        ef: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil)),
                $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
            b: _List_fromArray(["Json", "Encode"]),
            c: "list"
        }),
        eM: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil)),
            b: _List_fromArray(["Json", "Encode"]),
            c: "null"
        }),
        eO: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$tuple_fn($mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil)))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
            b: _List_fromArray(["Json", "Encode"]),
            c: "object"
        }),
        fJ: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil)),
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Set"]), "Set", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
            b: _List_fromArray(["Json", "Encode"]),
            c: "set"
        }),
        hZ: $mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
            b: _List_fromArray(["Json", "Encode"]),
            c: "string"
        })
    };
    var $author$project$Generate$Scalar$encodeList_fn = function (fn, listExpr) {
        return $mdgriffith$elm_codegen$Elm$apply_fn($author$project$Gen$Json$Encode$values_.ef, _List_fromArray([
            $mdgriffith$elm_codegen$Elm$functionReduced_fn("listUnpack", fn),
            listExpr
        ]));
    }, $author$project$Generate$Scalar$encodeList = F2($author$project$Generate$Scalar$encodeList_fn);
    var $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess_fn = function (a, b) {
        return { $: 20, a: a, b: b };
    }, $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess = F2($stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$AttemptingGetOnTypeNameNotAnAlias = function (a) {
        return { $: 9, a: a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$AttemptingToGetOnIncorrectType = function (a) {
        return { $: 8, a: a };
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$getFieldFromList_fn = function (selector, fields) {
        getFieldFromList: while (true) {
            if (!fields.b) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var nodifiedTop = fields.a;
                var remain = fields.b;
                var _v1 = $mdgriffith$elm_codegen$Internal$Compiler$denode(nodifiedTop);
                var fieldname = _v1.a;
                var contents = _v1.b;
                if (_Utils_eq($mdgriffith$elm_codegen$Internal$Compiler$denode(fieldname), selector)) {
                    return $elm$core$Maybe$Just($mdgriffith$elm_codegen$Internal$Compiler$denode(contents));
                }
                else {
                    var $temp$selector = selector, $temp$fields = remain;
                    selector = $temp$selector;
                    fields = $temp$fields;
                    continue getFieldFromList;
                }
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$getFieldFromList = F2($mdgriffith$elm_codegen$Internal$Compiler$getFieldFromList_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$inferRecordField_fn = function (index, _v0) {
        var fieldName = _v0.bi;
        var nameOfRecord = _v0.eH;
        var fieldType = $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType($mdgriffith$elm_codegen$Internal$Format$formatValue(_Utils_ap(fieldName, $mdgriffith$elm_codegen$Internal$Index$indexToString(index))));
        return $elm$core$Result$Ok({
            gJ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases,
            f: $mdgriffith$elm_codegen$Internal$Compiler$addInference_fn(nameOfRecord, $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericRecord_fn($mdgriffith$elm_codegen$Internal$Compiler$nodify(nameOfRecord), $mdgriffith$elm_codegen$Internal$Compiler$nodify(_List_fromArray([
                $mdgriffith$elm_codegen$Internal$Compiler$nodify(_Utils_Tuple2($mdgriffith$elm_codegen$Internal$Compiler$nodify(fieldName), $mdgriffith$elm_codegen$Internal$Compiler$nodify(fieldType)))
            ]))), $elm$core$Dict$empty),
            aK: fieldType
        });
    }, $mdgriffith$elm_codegen$Internal$Compiler$inferRecordField = F2($mdgriffith$elm_codegen$Internal$Compiler$inferRecordField_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$resolveField_fn = function (index, type_, aliases, inferences, fieldName) {
        resolveField: while (true) {
            if ($mdgriffith$elm_codegen$Internal$Index$typecheck(index)) {
                switch (type_.$) {
                    case 4:
                        var fields = type_.a;
                        var _v1 = $mdgriffith$elm_codegen$Internal$Compiler$getFieldFromList_fn(fieldName, fields);
                        if (!_v1.$) {
                            var ann = _v1.a;
                            return $elm$core$Result$Ok({ gJ: aliases, f: inferences, aK: ann });
                        }
                        else {
                            return $elm$core$Result$Err(_List_fromArray([
                                $mdgriffith$elm_codegen$Internal$Compiler$CouldNotFindField({
                                    g6: $elm$core$List$map_fn(A2($elm$core$Basics$composeR, $mdgriffith$elm_codegen$Internal$Compiler$denode, A2($elm$core$Basics$composeR, $elm$core$Tuple$first, $mdgriffith$elm_codegen$Internal$Compiler$denode)), fields),
                                    c_: fieldName
                                })
                            ]));
                        }
                    case 5:
                        var name = type_.a;
                        var fields = type_.b;
                        var _v2 = $mdgriffith$elm_codegen$Internal$Compiler$getFieldFromList_fn(fieldName, $mdgriffith$elm_codegen$Internal$Compiler$denode(fields));
                        if (!_v2.$) {
                            var ann = _v2.a;
                            return $elm$core$Result$Ok({ gJ: aliases, f: inferences, aK: ann });
                        }
                        else {
                            return $elm$core$Result$Err(_List_fromArray([
                                $mdgriffith$elm_codegen$Internal$Compiler$CouldNotFindField({
                                    g6: $elm$core$List$map_fn(A2($elm$core$Basics$composeR, $mdgriffith$elm_codegen$Internal$Compiler$denode, A2($elm$core$Basics$composeR, $elm$core$Tuple$first, $mdgriffith$elm_codegen$Internal$Compiler$denode)), $mdgriffith$elm_codegen$Internal$Compiler$denode(fields)),
                                    c_: fieldName
                                })
                            ]));
                        }
                    case 0:
                        var nameOfRecord = type_.a;
                        return $mdgriffith$elm_codegen$Internal$Compiler$inferRecordField_fn(index, { bi: fieldName, eH: nameOfRecord });
                    case 1:
                        var nodedModAndName = type_.a;
                        var vars = type_.b;
                        var _v3 = $mdgriffith$elm_codegen$Internal$Compiler$getAlias_fn(nodedModAndName, aliases);
                        if (_v3.$ === 1) {
                            return $elm$core$Result$Err(_List_fromArray([
                                $mdgriffith$elm_codegen$Internal$Compiler$AttemptingGetOnTypeNameNotAnAlias({ c_: fieldName, w: type_ })
                            ]));
                        }
                        else {
                            var aliased = _v3.a;
                            var $temp$index = index, $temp$type_ = aliased.T, $temp$aliases = aliases, $temp$inferences = inferences, $temp$fieldName = fieldName;
                            index = $temp$index;
                            type_ = $temp$type_;
                            aliases = $temp$aliases;
                            inferences = $temp$inferences;
                            fieldName = $temp$fieldName;
                            continue resolveField;
                        }
                    case 3:
                        return $elm$core$Result$Err(_List_fromArray([
                            $mdgriffith$elm_codegen$Internal$Compiler$AttemptingToGetOnIncorrectType({ c_: fieldName, w: type_ })
                        ]));
                    case 2:
                        return $elm$core$Result$Err(_List_fromArray([
                            $mdgriffith$elm_codegen$Internal$Compiler$AttemptingToGetOnIncorrectType({ c_: fieldName, w: type_ })
                        ]));
                    default:
                        return $elm$core$Result$Err(_List_fromArray([
                            $mdgriffith$elm_codegen$Internal$Compiler$AttemptingToGetOnIncorrectType({ c_: fieldName, w: type_ })
                        ]));
                }
            }
            else {
                return $elm$core$Result$Err(_List_Nil);
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$resolveField = F5($mdgriffith$elm_codegen$Internal$Compiler$resolveField_fn);
    var $mdgriffith$elm_codegen$Elm$get_fn = function (unformattedFieldName, recordExpression) {
        return function (index) {
            var fieldName = $mdgriffith$elm_codegen$Internal$Format$formatValue(unformattedFieldName);
            var _v0 = $mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails_fn(index, recordExpression);
            var expr = _v0.b;
            return {
                a: function () {
                    var _v1 = expr.a;
                    if (!_v1.$) {
                        var recordAnn = _v1.a;
                        return $mdgriffith$elm_codegen$Internal$Compiler$resolveField_fn(index, recordAnn.aK, recordAnn.gJ, recordAnn.f, fieldName);
                    }
                    else {
                        var otherwise = _v1;
                        return otherwise;
                    }
                }(),
                _: $stil4m$elm_syntax$Elm$Syntax$Expression$RecordAccess_fn($mdgriffith$elm_codegen$Internal$Compiler$nodify(expr._), $mdgriffith$elm_codegen$Internal$Compiler$nodify(fieldName)),
                d: expr.d
            };
        };
    }, $mdgriffith$elm_codegen$Elm$get = F2($mdgriffith$elm_codegen$Elm$get_fn);
    var $author$project$Gen$GraphQL$Engine$maybeScalarEncode_fn = function (maybeScalarEncodeArg, maybeScalarEncodeArg0) {
        return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil)),
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "maybeScalarEncode"
        }), _List_fromArray([
            $mdgriffith$elm_codegen$Elm$functionReduced_fn("maybeScalarEncodeUnpack", maybeScalarEncodeArg),
            maybeScalarEncodeArg0
        ]));
    }, $author$project$Gen$GraphQL$Engine$maybeScalarEncode = F2($author$project$Gen$GraphQL$Engine$maybeScalarEncode_fn);
    var $author$project$Generate$Scalar$encode_fn = function (namespace, scalarName, wrapped) {
        switch (wrapped.$) {
            case 1:
                var inner = wrapped.a;
                return $author$project$Generate$Scalar$encodeList($author$project$Generate$Scalar$encode_fn(namespace, scalarName, inner));
            case 2:
                var inner = wrapped.a;
                return $author$project$Gen$GraphQL$Engine$maybeScalarEncode($author$project$Generate$Scalar$encode_fn(namespace, scalarName, inner));
            default:
                var lowered = $elm$core$String$toLower(scalarName);
                switch (lowered) {
                    case "int":
                        return $author$project$Gen$Json$Encode$call_.ho;
                    case "float":
                        return $author$project$Gen$Json$Encode$call_.he;
                    case "string":
                        return $author$project$Gen$Json$Encode$call_.hZ;
                    case "boolean":
                        return $author$project$Gen$Json$Encode$call_.gN;
                    default:
                        return function (val) {
                            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$get_fn("encode", $mdgriffith$elm_codegen$Elm$value({
                                a: $elm$core$Maybe$Nothing,
                                b: _List_fromArray([namespace.bv]),
                                c: $author$project$Utils$String$formatValue(scalarName)
                            })), _List_fromArray([val]));
                        };
                }
        }
    }, $author$project$Generate$Scalar$encode = F3($author$project$Generate$Scalar$encode_fn);
    var $author$project$Gen$GraphQL$Engine$encodeInputObjectAsJson = function (encodeInputObjectAsJsonArg) {
        return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "InputObject", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("value")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Value", _List_Nil))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "encodeInputObjectAsJson"
        }), _List_fromArray([encodeInputObjectAsJsonArg]));
    };
    var $author$project$Generate$Input$Encode$encodeList_fn = function (fn, listExpr) {
        return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil)),
                $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil))),
            b: _List_fromArray(["Json", "Encode"]),
            c: "list"
        }), _List_fromArray([
            $mdgriffith$elm_codegen$Elm$functionReduced_fn("listUnpack", fn),
            listExpr
        ]));
    }, $author$project$Generate$Input$Encode$encodeList = F2($author$project$Generate$Input$Encode$encodeList_fn);
    var $stil4m$elm_syntax$Elm$Syntax$Expression$UnitExpr = { $: 0 };
    var $mdgriffith$elm_codegen$Internal$Compiler$inference = function (type_) {
        return { gJ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, f: $elm$core$Dict$empty, aK: type_ };
    };
    var $mdgriffith$elm_codegen$Elm$unit = function (_v0) {
        return {
            a: $elm$core$Result$Ok($mdgriffith$elm_codegen$Internal$Compiler$inference($stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Unit)),
            _: $stil4m$elm_syntax$Elm$Syntax$Expression$UnitExpr,
            d: _List_Nil
        };
    };
    var $author$project$Generate$Input$Encode$valueFrom_fn = function (mod, name) {
        return $mdgriffith$elm_codegen$Elm$value({ a: $elm$core$Maybe$Nothing, b: mod, c: name });
    }, $author$project$Generate$Input$Encode$valueFrom = F2($author$project$Generate$Input$Encode$valueFrom_fn);
    var $author$project$Generate$Input$Encode$encodeHelper_fn = function (namespace, schema, type_, val) {
        switch (type_.$) {
            case 7:
                var newType = type_.a;
                return $author$project$Gen$GraphQL$Engine$maybeScalarEncode_fn(A3($author$project$Generate$Input$Encode$encodeHelper, namespace, schema, newType), val);
            case 6:
                var newType = type_.a;
                return $author$project$Generate$Input$Encode$encodeList_fn(A3($author$project$Generate$Input$Encode$encodeHelper, namespace, schema, newType), val);
            case 0:
                var scalarName = type_.a;
                return A4($author$project$Generate$Scalar$encode, namespace, scalarName, $author$project$GraphQL$Schema$UnwrappedValue, val);
            case 3:
                var enumName = type_.a;
                return (!_Utils_eq(namespace.bv, namespace.cQ)) ? $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$fn_fn(_Utils_Tuple2("enumValue_", $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_fromArray([namespace.cQ, "Enum", enumName]), enumName))), function (i) {
                    return $author$project$Gen$Json$Encode$call_.hZ($mdgriffith$elm_codegen$Elm$apply_fn($author$project$Generate$Input$Encode$valueFrom_fn(_List_fromArray([namespace.cQ, "Enum", enumName]), "toString"), _List_fromArray([i])));
                }), _List_fromArray([val])) : $mdgriffith$elm_codegen$Elm$apply_fn($author$project$Generate$Input$Encode$valueFrom_fn(_List_fromArray([namespace.cQ, "Enum", enumName]), "encode"), _List_fromArray([val]));
            case 1:
                var inputName = type_.a;
                return $author$project$Gen$GraphQL$Engine$encodeInputObjectAsJson(val);
            case 2:
                var nestedObjectName = type_.a;
                return $mdgriffith$elm_codegen$Elm$unit;
            case 4:
                var unionName = type_.a;
                return $mdgriffith$elm_codegen$Elm$unit;
            default:
                var interfaceName = type_.a;
                return $mdgriffith$elm_codegen$Elm$unit;
        }
    }, $author$project$Generate$Input$Encode$encodeHelper = F4($author$project$Generate$Input$Encode$encodeHelper_fn);
    var $author$project$Generate$Input$Encode$encode_fn = function (namespace, schema, type_, val) {
        return $author$project$Generate$Input$Encode$encodeHelper_fn(namespace, schema, type_, val);
    }, $author$project$Generate$Input$Encode$encode = F4($author$project$Generate$Input$Encode$encode_fn);
    var $author$project$GraphQL$Schema$InList = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$GraphQL$Schema$InMaybe = function (a) {
        return { $: 2, a: a };
    };
    var $author$project$GraphQL$Schema$getWrap = function (type_) {
        switch (type_.$) {
            case 7:
                var newType = type_.a;
                return $author$project$GraphQL$Schema$InMaybe($author$project$GraphQL$Schema$getWrap(newType));
            case 6:
                var newType = type_.a;
                return $author$project$GraphQL$Schema$InList($author$project$GraphQL$Schema$getWrap(newType));
            default:
                return $author$project$GraphQL$Schema$UnwrappedValue;
        }
    };
    var $author$project$Gen$GraphQL$Engine$inputObject = function (inputObjectArg) {
        return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "InputObject", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("value")
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "inputObject"
        }), _List_fromArray([
            $mdgriffith$elm_codegen$Elm$string(inputObjectArg)
        ]));
    };
    var $author$project$Generate$Scalar$type__fn = function (namespace, scalar) {
        var _v0 = $elm$core$String$toLower(scalar);
        switch (_v0) {
            case "string":
                return $mdgriffith$elm_codegen$Elm$Annotation$string;
            case "int":
                return $mdgriffith$elm_codegen$Elm$Annotation$int;
            case "float":
                return $mdgriffith$elm_codegen$Elm$Annotation$float;
            case "boolean":
                return $mdgriffith$elm_codegen$Elm$Annotation$bool;
            default:
                return $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray([namespace.bv]), $author$project$Utils$String$formatScalar(scalar), _List_Nil);
        }
    }, $author$project$Generate$Scalar$type_ = F2($author$project$Generate$Scalar$type__fn);
    var $author$project$Generate$Input$Encode$scalarType_fn = function (namespace, wrapped, scalarName) {
        switch (wrapped.$) {
            case 1:
                var inner = wrapped.a;
                return $mdgriffith$elm_codegen$Elm$Annotation$list($author$project$Generate$Input$Encode$scalarType_fn(namespace, inner, scalarName));
            case 2:
                var inner = wrapped.a;
                return $mdgriffith$elm_codegen$Elm$Annotation$maybe($author$project$Generate$Input$Encode$scalarType_fn(namespace, inner, scalarName));
            default:
                return $author$project$Generate$Scalar$type__fn(namespace, scalarName);
        }
    }, $author$project$Generate$Input$Encode$scalarType = F3($author$project$Generate$Input$Encode$scalarType_fn);
    var $author$project$Generate$Input$Encode$unwrapWith_fn = function (wrapped, expression) {
        switch (wrapped.$) {
            case 1:
                var inner = wrapped.a;
                return $mdgriffith$elm_codegen$Elm$Annotation$list($author$project$Generate$Input$Encode$unwrapWith_fn(inner, expression));
            case 2:
                var inner = wrapped.a;
                return $mdgriffith$elm_codegen$Elm$Annotation$maybe($author$project$Generate$Input$Encode$unwrapWith_fn(inner, expression));
            default:
                return expression;
        }
    }, $author$project$Generate$Input$Encode$unwrapWith = F2($author$project$Generate$Input$Encode$unwrapWith_fn);
    var $author$project$Generate$Input$Encode$toElmType_fn = function (namespace, schema, type_, wrapped) {
        toElmType: while (true) {
            switch (type_.$) {
                case 7:
                    var newType = type_.a;
                    var $temp$namespace = namespace, $temp$schema = schema, $temp$type_ = newType, $temp$wrapped = wrapped;
                    namespace = $temp$namespace;
                    schema = $temp$schema;
                    type_ = $temp$type_;
                    wrapped = $temp$wrapped;
                    continue toElmType;
                case 6:
                    var newType = type_.a;
                    var $temp$namespace = namespace, $temp$schema = schema, $temp$type_ = newType, $temp$wrapped = wrapped;
                    namespace = $temp$namespace;
                    schema = $temp$schema;
                    type_ = $temp$type_;
                    wrapped = $temp$wrapped;
                    continue toElmType;
                case 0:
                    var scalarName = type_.a;
                    return $author$project$Generate$Input$Encode$scalarType_fn(namespace, wrapped, scalarName);
                case 3:
                    var enumName = type_.a;
                    return $author$project$Generate$Input$Encode$unwrapWith_fn(wrapped, $mdgriffith$elm_codegen$Elm$Annotation$named_fn(A2($author$project$Generate$Common$modules.cO, namespace, enumName), enumName));
                case 1:
                    var inputName = type_.a;
                    return $author$project$Generate$Input$Encode$unwrapWith_fn(wrapped, $mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_fromArray([namespace.bv, "Input"]), inputName));
                case 2:
                    var nestedObjectName = type_.a;
                    return $mdgriffith$elm_codegen$Elm$Annotation$unit;
                case 4:
                    var unionName = type_.a;
                    return $mdgriffith$elm_codegen$Elm$Annotation$unit;
                default:
                    var interfaceName = type_.a;
                    return $mdgriffith$elm_codegen$Elm$Annotation$unit;
            }
        }
    }, $author$project$Generate$Input$Encode$toElmType = F4($author$project$Generate$Input$Encode$toElmType_fn);
    var $author$project$GraphQL$Schema$typeToStringHelper_fn = function (nullable, tipe) {
        typeToStringHelper: while (true) {
            var required = function (str) {
                return nullable ? str : (str + "!");
            };
            switch (tipe.$) {
                case 0:
                    var name = tipe.a;
                    return required(name);
                case 1:
                    var name = tipe.a;
                    return required(name);
                case 2:
                    var name = tipe.a;
                    return required(name);
                case 3:
                    var name = tipe.a;
                    return required(name);
                case 4:
                    var name = tipe.a;
                    return required(name);
                case 5:
                    var name = tipe.a;
                    return required(name);
                case 6:
                    var inner = tipe.a;
                    return required("[" + ($author$project$GraphQL$Schema$typeToStringHelper_fn(false, inner) + "]"));
                default:
                    var inner = tipe.a;
                    var $temp$nullable = true, $temp$tipe = inner;
                    nullable = $temp$nullable;
                    tipe = $temp$tipe;
                    continue typeToStringHelper;
            }
        }
    }, $author$project$GraphQL$Schema$typeToStringHelper = F2($author$project$GraphQL$Schema$typeToStringHelper_fn);
    var $author$project$GraphQL$Schema$typeToString = function (tipe) {
        return $author$project$GraphQL$Schema$typeToStringHelper_fn(false, tipe);
    };
    var $author$project$Generate$Input$Encode$toOneOfHelper_fn = function (namespace, schema, input) {
        return $elm$core$List$filterMap_fn(function (field) {
            var _v0 = field.aK;
            if (_v0.$ === 7) {
                var type_ = _v0.a;
                return $elm$core$Maybe$Just($mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                    g9: false,
                    hj: $elm$core$Maybe$Just($author$project$Generate$Input$Encode$docGroups.bA)
                }, $mdgriffith$elm_codegen$Elm$declaration_fn(field.c, $mdgriffith$elm_codegen$Elm$fn_fn(_Utils_Tuple2("newArg", $elm$core$Maybe$Just($author$project$Generate$Input$Encode$toElmType_fn(namespace, schema, type_, $author$project$GraphQL$Schema$getWrap(type_)))), function (_new) {
                    return $mdgriffith$elm_codegen$Elm$withType_fn($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, input.c), $author$project$Gen$GraphQL$Engine$addField_fn(field.c, $author$project$GraphQL$Schema$typeToString(field.aK), $author$project$Generate$Input$Encode$encode_fn(namespace, schema, type_, _new), $mdgriffith$elm_codegen$Elm$withType_fn($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, input.c), $author$project$Gen$GraphQL$Engine$inputObject(input.c))));
                }))));
            }
            else {
                return $elm$core$Maybe$Nothing;
            }
        }, input.hc);
    }, $author$project$Generate$Input$Encode$toOneOfHelper = F3($author$project$Generate$Input$Encode$toOneOfHelper_fn);
    var $author$project$Gen$Json$Encode$null = $mdgriffith$elm_codegen$Elm$value({
        a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Encode"]), "Value", _List_Nil)),
        b: _List_fromArray(["Json", "Encode"]),
        c: "null"
    });
    var $author$project$Generate$Input$Encode$toOneOfNulls_fn = function (inputName, fields) {
        var toOptionalInput = function (field) {
            var _v1 = field.aK;
            if (_v1.$ === 7) {
                return $elm$core$Maybe$Just($elm$core$Tuple$pair_fn(field.c, $mdgriffith$elm_codegen$Elm$withType_fn($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, inputName), $author$project$Gen$GraphQL$Engine$addField_fn(field.c, $author$project$GraphQL$Schema$typeToString(field.aK), $author$project$Gen$Json$Encode$null, $mdgriffith$elm_codegen$Elm$withType_fn($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, field.c), $author$project$Gen$GraphQL$Engine$inputObject(field.c))))));
            }
            else {
                return $elm$core$Maybe$Nothing;
            }
        };
        var _v0 = $elm$core$List$filterMap_fn(toOptionalInput, fields);
        if (!_v0.b) {
            return _List_Nil;
        }
        else {
            var options = _v0;
            return _List_fromArray([
                $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                    g9: false,
                    hj: $elm$core$Maybe$Just($author$project$Generate$Input$Encode$docGroups.bx)
                }, $mdgriffith$elm_codegen$Elm$declaration_fn("null", $mdgriffith$elm_codegen$Elm$record(options)))
            ]);
        }
    }, $author$project$Generate$Input$Encode$toOneOfNulls = F2($author$project$Generate$Input$Encode$toOneOfNulls_fn);
    var $author$project$Generate$InputObjects$oneOf_fn = function (namespace, schema, input) {
        return $elm$core$List$concat(_List_fromArray([
            $author$project$Generate$Input$Encode$toOneOfHelper_fn(namespace, schema, input),
            $author$project$Generate$Input$Encode$toOneOfNulls_fn(input.c, input.hc)
        ]));
    }, $author$project$Generate$InputObjects$oneOf = F3($author$project$Generate$InputObjects$oneOf_fn);
    var $elm$core$List$partition_fn = function (f, xs) {
        var truesHead = _List_Cons(undefined, _List_Nil);
        var falsesHead = _List_Cons(undefined, _List_Nil);
        var truesEnd = truesHead;
        var falsesEnd = falsesHead;
        for (; xs.b; xs = xs.b) {
            var next = _List_Cons(xs.
                a, _List_Nil);
            if (f(xs.a)) {
                truesEnd.b = next;
                truesEnd = next;
            }
            else {
                falsesEnd.b = next;
                falsesEnd = next;
            }
        }
        return _Utils_Tuple2(truesHead
            .b, falsesHead.b);
    }, $elm$core$List$partition = F2($elm$core$List$partition_fn);
    var $author$project$Generate$Input$Encode$toInputObject_fn = function (namespace, schema, input) {
        var _v0 = $elm$core$List$partition_fn(function (arg) {
            var _v1 = arg.aK;
            if (_v1.$ === 7) {
                var innerType = _v1.a;
                return false;
            }
            else {
                return true;
            }
        }, input.hc);
        var required = _v0.a;
        var optional = _v0.b;
        if (!required.b) {
            return $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                g9: false,
                hj: $elm$core$Maybe$Just($author$project$Generate$Input$Encode$docGroups.aE)
            }, $mdgriffith$elm_codegen$Elm$declaration_fn("input", $mdgriffith$elm_codegen$Elm$withType_fn($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, input.c), $author$project$Gen$GraphQL$Engine$inputObject(input.c))));
        }
        else {
            return $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                g9: false,
                hj: $elm$core$Maybe$Just($author$project$Generate$Input$Encode$docGroups.aE)
            }, $mdgriffith$elm_codegen$Elm$declaration_fn("input", $mdgriffith$elm_codegen$Elm$fn_fn(_Utils_Tuple2("requiredArgs", $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$record($elm$core$List$map_fn(function (reqField) {
                return _Utils_Tuple2(reqField.c, $author$project$Generate$Input$Encode$toElmType_fn(namespace, schema, reqField.aK, $author$project$GraphQL$Schema$getWrap(reqField.aK)));
            }, required)))), function (val) {
                return $mdgriffith$elm_codegen$Elm$withType_fn($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, input.c), $elm$core$List$foldl_fn_unwrapped(function (field, inputObj) {
                    return $author$project$Gen$GraphQL$Engine$addField_fn(field.c, $author$project$GraphQL$Schema$typeToString(field.aK), $author$project$Generate$Input$Encode$encode_fn(namespace, schema, field.aK, $mdgriffith$elm_codegen$Elm$get_fn(field.c, val)), inputObj);
                }, $author$project$Gen$GraphQL$Engine$inputObject(input.c), required));
            })));
        }
    }, $author$project$Generate$Input$Encode$toInputObject = F3($author$project$Generate$Input$Encode$toInputObject_fn);
    var $author$project$Generate$Input$Encode$toNulls_fn = function (inputName, fields) {
        var toOptionalInput = function (field) {
            var _v1 = field.aK;
            if (_v1.$ === 7) {
                return $elm$core$Maybe$Just($elm$core$Tuple$pair_fn($author$project$Utils$String$formatValue(field.c), $mdgriffith$elm_codegen$Elm$fn_fn(_Utils_Tuple2("inputObj", $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, inputName))), function (inputObj) {
                    return $mdgriffith$elm_codegen$Elm$withType_fn($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, inputName), $author$project$Gen$GraphQL$Engine$addField_fn(field.c, $author$project$GraphQL$Schema$typeToString(field.aK), $author$project$Gen$Json$Encode$null, inputObj));
                })));
            }
            else {
                return $elm$core$Maybe$Nothing;
            }
        };
        var _v0 = $elm$core$List$filterMap_fn(toOptionalInput, fields);
        if (!_v0.b) {
            return _List_Nil;
        }
        else {
            var options = _v0;
            return _List_fromArray([
                $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                    g9: true,
                    hj: $elm$core$Maybe$Just($author$project$Generate$Input$Encode$docGroups.bx)
                }, $mdgriffith$elm_codegen$Elm$declaration_fn("null", $mdgriffith$elm_codegen$Elm$record(options)))
            ]);
        }
    }, $author$project$Generate$Input$Encode$toNulls = F2($author$project$Generate$Input$Encode$toNulls_fn);
    var $author$project$Generate$Input$Encode$toOptionHelpers_fn = function (namespace, schema, input) {
        return $elm$core$List$filterMap_fn(function (field) {
            var _v0 = field.aK;
            if (_v0.$ === 7) {
                var type_ = _v0.a;
                return $elm$core$Maybe$Just($mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                    g9: false,
                    hj: $elm$core$Maybe$Just($author$project$Generate$Input$Encode$docGroups.bA)
                }, $mdgriffith$elm_codegen$Elm$declaration_fn($author$project$Utils$String$formatValue(function () {
                    var _v1 = field.c;
                    if (_v1 === "null") {
                        return "null_";
                    }
                    else {
                        return field.c;
                    }
                }()), $mdgriffith$elm_codegen$Elm$fn2_fn_unwrapped(_Utils_Tuple2("newArg_", $elm$core$Maybe$Just($author$project$Generate$Input$Encode$toElmType_fn(namespace, schema, type_, $author$project$GraphQL$Schema$getWrap(type_)))), _Utils_Tuple2("inputObj_", $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, input.c))), function (_new, inputObj) {
                    return $mdgriffith$elm_codegen$Elm$withType_fn($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, input.c), $author$project$Gen$GraphQL$Engine$addField_fn(field.c, $author$project$GraphQL$Schema$typeToString(field.aK), $author$project$Generate$Input$Encode$encode_fn(namespace, schema, type_, _new), inputObj));
                }))));
            }
            else {
                return $elm$core$Maybe$Nothing;
            }
        }, input.hc);
    }, $author$project$Generate$Input$Encode$toOptionHelpers = F3($author$project$Generate$Input$Encode$toOptionHelpers_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$documentation_fn = function (rawDoc, decl) {
        var doc = $elm$core$String$trim(rawDoc);
        if ($elm$core$String$isEmpty(doc)) {
            return decl;
        }
        else {
            switch (decl.$) {
                case 1:
                    return decl;
                case 2:
                    var source = decl.a;
                    return decl;
                default:
                    var details = decl.a;
                    return $mdgriffith$elm_codegen$Internal$Compiler$Declaration(_Utils_update(details, {
                        g1: function () {
                            var _v1 = details.g1;
                            if (_v1.$ === 1) {
                                return $elm$core$Maybe$Just(doc);
                            }
                            else {
                                var existing = _v1.a;
                                return $elm$core$Maybe$Just(doc + ("\n\n" + existing));
                            }
                        }()
                    }));
            }
        }
    }, $mdgriffith$elm_codegen$Internal$Compiler$documentation = F2($mdgriffith$elm_codegen$Internal$Compiler$documentation_fn);
    var $mdgriffith$elm_codegen$Elm$withDocumentation = $mdgriffith$elm_codegen$Internal$Compiler$documentation;
    var $author$project$Generate$InputObjects$renderNewOptionalSingleFile_fn = function (namespace, schema, input) {
        return ($elm$core$List$all_fn($author$project$Generate$InputObjects$areOptional, input.hc) && input.hq) ? $author$project$Generate$InputObjects$oneOf_fn(namespace, schema, input) : $elm$core$List$concat(_List_fromArray([
            _List_fromArray([
                $mdgriffith$elm_codegen$Internal$Compiler$documentation_fn("\n\n", $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                    g9: true,
                    hj: $elm$core$Maybe$Just($author$project$Generate$Input$Encode$docGroups.aE)
                }, $mdgriffith$elm_codegen$Elm$alias_fn(input.c, $mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_fromArray([namespace.bv, "Input"]), input.c))))
            ]),
            $elm$core$List$concat(_List_fromArray([
                _List_fromArray([
                    $author$project$Generate$Input$Encode$toInputObject_fn(namespace, schema, input)
                ]),
                $author$project$Generate$Input$Encode$toOptionHelpers_fn(namespace, schema, input),
                $author$project$Generate$Input$Encode$toNulls_fn(input.c, input.hc)
            ]))
        ]));
    }, $author$project$Generate$InputObjects$renderNewOptionalSingleFile = F3($author$project$Generate$InputObjects$renderNewOptionalSingleFile_fn);
    var $author$project$Generate$InputObjects$renderNewOptionalFiles_fn = function (namespace, schema, input) {
        return $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$file_fn(_List_fromArray([
            namespace.bv,
            "Input",
            $author$project$Utils$String$formatTypename(input.c)
        ]), $author$project$Generate$InputObjects$renderNewOptionalSingleFile_fn(namespace, schema, input)));
    }, $author$project$Generate$InputObjects$renderNewOptionalFiles = F3($author$project$Generate$InputObjects$renderNewOptionalFiles_fn);
    var $author$project$Generate$InputObjects$generateFiles_fn = function (namespace, schema) {
        var objects = $elm$core$List$map_fn($elm$core$Tuple$second, $elm$core$Dict$toList(schema.hn));
        var newOptionalFiles = $elm$core$List$filterMap_fn(A2($author$project$Generate$InputObjects$renderNewOptionalFiles, namespace, schema), objects);
        return _List_Cons($author$project$Generate$InputObjects$inputMainFile_fn(namespace, schema, objects), newOptionalFiles);
    }, $author$project$Generate$InputObjects$generateFiles = F2($author$project$Generate$InputObjects$generateFiles_fn);
    var $author$project$GraphQL$Operations$Canonicalize$CanSuccess_fn = function (a, b) {
        return { $: 1, a: a, b: b };
    }, $author$project$GraphQL$Operations$Canonicalize$CanSuccess = F2($author$project$GraphQL$Operations$Canonicalize$CanSuccess_fn);
    var $author$project$GraphQL$Operations$Canonicalize$CanError = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GraphQL$Operations$Canonicalize$FragmentVariableIssue = function (a) {
        return { $: 9, a: a };
    };
    var $author$project$GraphQL$Operations$CanonicalAST$Mutation = 1;
    var $author$project$GraphQL$Operations$CanonicalAST$Operation = $elm$core$Basics$identity;
    var $author$project$GraphQL$Operations$CanonicalAST$Query = 0;
    var $author$project$GraphQL$Operations$Canonicalize$VariableIssueSummary = function (a) {
        return { $: 8, a: a };
    };
    var $author$project$GraphQL$Operations$Canonicalize$FragmentInlineTopLevel = function (a) {
        return { $: 19, a: a };
    };
    var $author$project$GraphQL$Operations$Canonicalize$QueryUnknown = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GraphQL$Operations$Canonicalize$EmptySelection = function (a) {
        return { $: 6, a: a };
    };
    var $author$project$GraphQL$Operations$Canonicalize$EmptyUnionVariantSelection = function (a) {
        return { $: 13, a: a };
    };
    var $author$project$GraphQL$Operations$Canonicalize$EnumUnknown = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$GraphQL$Operations$CanonicalAST$Field = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GraphQL$Operations$Canonicalize$FieldAliasRequired = function (a) {
        return { $: 10, a: a };
    };
    var $author$project$GraphQL$Operations$CanonicalAST$FieldEnum = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$GraphQL$Operations$CanonicalAST$FieldInterface = function (a) {
        return { $: 4, a: a };
    };
    var $author$project$GraphQL$Operations$CanonicalAST$FieldObject = function (a) {
        return { $: 2, a: a };
    };
    var $author$project$GraphQL$Operations$CanonicalAST$FieldScalar = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GraphQL$Operations$CanonicalAST$FieldUnion = function (a) {
        return { $: 3, a: a };
    };
    var $author$project$GraphQL$Operations$Canonicalize$FieldUnknown = function (a) {
        return { $: 7, a: a };
    };
    var $author$project$GraphQL$Operations$CanonicalAST$Frag = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$GraphQL$Operations$Canonicalize$FragmentNotFound = function (a) {
        return { $: 15, a: a };
    };
    var $author$project$GraphQL$Operations$Canonicalize$FragmentSelectionNotAllowedInObjects = function (a) {
        return { $: 18, a: a };
    };
    var $author$project$GraphQL$Operations$Canonicalize$MissingTypename = function (a) {
        return { $: 12, a: a };
    };
    var $author$project$GraphQL$Operations$CanonicalAST$Name = $elm$core$Basics$identity;
    var $author$project$GraphQL$Operations$Canonicalize$ObjectUnknown = function (a) {
        return { $: 2, a: a };
    };
    var $author$project$GraphQL$Operations$Canonicalize$UnionUnknown = function (a) {
        return { $: 4, a: a };
    };
    var $author$project$GraphQL$Operations$Canonicalize$UnknownArgs = function (a) {
        return { $: 5, a: a };
    };
    var $author$project$GraphQL$Operations$Canonicalize$Cache$merge_fn = function (one, two) {
        return {
            dt: _Utils_ap(one.dt, two.dt),
            a9: _Utils_ap(one.a9, two.a9)
        };
    }, $author$project$GraphQL$Operations$Canonicalize$Cache$merge = F2($author$project$GraphQL$Operations$Canonicalize$Cache$merge_fn);
    var $author$project$GraphQL$Operations$Canonicalize$addCache_fn = function (newCache, result) {
        if (result.$ === 1) {
            var cache = result.a;
            var existing = result.b;
            return $author$project$GraphQL$Operations$Canonicalize$CanSuccess_fn($author$project$GraphQL$Operations$Canonicalize$Cache$merge_fn(newCache, cache), existing);
        }
        else {
            var errs = result.a;
            return $author$project$GraphQL$Operations$Canonicalize$CanError(errs);
        }
    }, $author$project$GraphQL$Operations$Canonicalize$addCache = F2($author$project$GraphQL$Operations$Canonicalize$addCache_fn);
    var $author$project$GraphQL$Operations$Canonicalize$Cache$addFragment_fn = function (frag, cache) {
        return {
            dt: _List_Cons(frag, cache.dt),
            a9: cache.a9
        };
    }, $author$project$GraphQL$Operations$Canonicalize$Cache$addFragment = F2($author$project$GraphQL$Operations$Canonicalize$Cache$addFragment_fn);
    var $author$project$GraphQL$Operations$Canonicalize$UsedNames$UsedNames = $elm$core$Basics$identity;
    var $author$project$GraphQL$Operations$Canonicalize$UsedNames$builtinNames = _List_fromArray(["List", "String", "Maybe", "Result", "Bool", "Float", "Int"]);
    var $author$project$GraphQL$Operations$Canonicalize$UsedNames$formatTypename = function (name) {
        var first = $elm$core$String$left_fn(1, name);
        var uppercase = _Utils_ap($elm$core$String$toUpper(first), $elm$core$String$dropLeft_fn(1, name));
        return $elm$core$List$member_fn(uppercase, $author$project$GraphQL$Operations$Canonicalize$UsedNames$builtinNames) ? (uppercase + "_") : uppercase;
    };
    var $author$project$GraphQL$Operations$Canonicalize$UsedNames$addLevel_fn = function (level, _v0) {
        var used = _v0;
        return _Utils_update(used, {
            x: _List_Cons({
                aR: level.aR,
                c: $author$project$GraphQL$Operations$Canonicalize$UsedNames$formatTypename(level.c)
            }, used.x),
            S: _List_Nil,
            au: _List_Cons(used.S, used.au)
        });
    }, $author$project$GraphQL$Operations$Canonicalize$UsedNames$addLevel = F2($author$project$GraphQL$Operations$Canonicalize$UsedNames$addLevel_fn);
    var $author$project$GraphQL$Operations$Canonicalize$UsedNames$addLevelKeepSiblingStack_fn = function (level, _v0) {
        var used = _v0;
        return _Utils_update(used, {
            x: _List_Cons({
                aR: level.aR,
                c: $author$project$GraphQL$Operations$Canonicalize$UsedNames$formatTypename(level.c)
            }, used.x)
        });
    }, $author$project$GraphQL$Operations$Canonicalize$UsedNames$addLevelKeepSiblingStack = F2($author$project$GraphQL$Operations$Canonicalize$UsedNames$addLevelKeepSiblingStack_fn);
    var $author$project$GraphQL$Operations$Canonicalize$addToResult_fn = function (newCache, newItem, result) {
        if (result.$ === 1) {
            var cache = result.a;
            var existing = result.b;
            return $author$project$GraphQL$Operations$Canonicalize$CanSuccess_fn($author$project$GraphQL$Operations$Canonicalize$Cache$merge_fn(newCache, cache), _List_Cons(newItem, existing));
        }
        else {
            var errs = result.a;
            return $author$project$GraphQL$Operations$Canonicalize$CanError(errs);
        }
    }, $author$project$GraphQL$Operations$Canonicalize$addToResult = F3($author$project$GraphQL$Operations$Canonicalize$addToResult_fn);
    var $author$project$GraphQL$Operations$Canonicalize$Cache$addVars_fn = function (vars, cache) {
        return {
            dt: cache.dt,
            a9: _Utils_ap(vars, cache.a9)
        };
    }, $author$project$GraphQL$Operations$Canonicalize$Cache$addVars = F2($author$project$GraphQL$Operations$Canonicalize$Cache$addVars_fn);
    var $author$project$GraphQL$Operations$Canonicalize$IncorrectInlineInput = function (a) {
        return { $: 14, a: a };
    };
    var $author$project$GraphQL$Operations$Canonicalize$Error = $elm$core$Basics$identity;
    var $author$project$GraphQL$Operations$Canonicalize$zeroPosition = { cj: 0, ed: 0 };
    var $author$project$GraphQL$Operations$Canonicalize$error = function (deets) {
        return {
            cq: { bg: $author$project$GraphQL$Operations$Canonicalize$zeroPosition, bF: $author$project$GraphQL$Operations$Canonicalize$zeroPosition },
            cT: deets
        };
    };
    var $elm$core$List$filter_fn = function (f, xs) {
        var tmp = _List_Cons(undefined, _List_Nil);
        var end = tmp;
        for (; xs.b; xs = xs.b) {
            if (f(xs.a)) {
                var next = _List_Cons(xs.a, _List_Nil);
                end.b = next;
                end = next;
            }
        }
        return tmp.
            b;
    }, $elm$core$List$filter = F2($elm$core$List$filter_fn);
    var $elm$core$List$head = function (list) {
        if (list.b) {
            var x = list.a;
            var xs = list.b;
            return $elm$core$Maybe$Just(x);
        }
        else {
            return $elm$core$Maybe$Nothing;
        }
    };
    var $author$project$GraphQL$Operations$AST$nameToString = function (_v0) {
        var str = _v0;
        return str;
    };
    var $author$project$GraphQL$Operations$Canonicalize$Mismatch = { $: 2 };
    var $author$project$GraphQL$Operations$Canonicalize$Valid = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GraphQL$Operations$Canonicalize$validateInput_fn = function (refs, schemaType, fieldName, astValue) {
        validateInput: while (true) {
            switch (astValue.$) {
                case 6:
                    var _var = astValue.a;
                    var varname = $author$project$GraphQL$Operations$AST$nameToString(_var.c);
                    return $author$project$GraphQL$Operations$Canonicalize$Valid(_List_fromArray([
                        _Utils_Tuple2(varname, schemaType)
                    ]));
                case 7:
                    var keyValues = astValue.a;
                    _v5$3: while (true) {
                        switch (schemaType.$) {
                            case 1:
                                var inputObjectName = schemaType.a;
                                var _v6 = $elm$core$Dict$get_fn(inputObjectName, refs.hQ.hn);
                                if (_v6.$ === 1) {
                                    return $author$project$GraphQL$Operations$Canonicalize$Mismatch;
                                }
                                else {
                                    var inputObject = _v6.a;
                                    return $author$project$GraphQL$Operations$Canonicalize$validateObject_fn(refs, fieldName, keyValues, inputObject);
                                }
                            case 7:
                                if (schemaType.a.$ === 1) {
                                    var inputObjectName = schemaType.a.a;
                                    var _v7 = $elm$core$Dict$get_fn(inputObjectName, refs.hQ.hn);
                                    if (_v7.$ === 1) {
                                        return $author$project$GraphQL$Operations$Canonicalize$Mismatch;
                                    }
                                    else {
                                        var inputObject = _v7.a;
                                        return $author$project$GraphQL$Operations$Canonicalize$validateObject_fn(refs, fieldName, keyValues, inputObject);
                                    }
                                }
                                else {
                                    break _v5$3;
                                }
                            case 6:
                                var inner = schemaType.a;
                                var $temp$refs = refs, $temp$schemaType = inner, $temp$fieldName = fieldName, $temp$astValue = astValue;
                                refs = $temp$refs;
                                schemaType = $temp$schemaType;
                                fieldName = $temp$fieldName;
                                astValue = $temp$astValue;
                                continue validateInput;
                            default:
                                break _v5$3;
                        }
                    }
                    return $author$project$GraphQL$Operations$Canonicalize$Mismatch;
                case 0:
                    var str = astValue.a;
                    switch (schemaType.$) {
                        case 0:
                            switch (schemaType.a) {
                                case "Int":
                                    return $author$project$GraphQL$Operations$Canonicalize$Mismatch;
                                case "Float":
                                    return $author$project$GraphQL$Operations$Canonicalize$Mismatch;
                                case "Boolean":
                                    return $author$project$GraphQL$Operations$Canonicalize$Mismatch;
                                default:
                                    return $author$project$GraphQL$Operations$Canonicalize$Valid(_List_Nil);
                            }
                        case 7:
                            var inner = schemaType.a;
                            var $temp$refs = refs, $temp$schemaType = inner, $temp$fieldName = fieldName, $temp$astValue = astValue;
                            refs = $temp$refs;
                            schemaType = $temp$schemaType;
                            fieldName = $temp$fieldName;
                            astValue = $temp$astValue;
                            continue validateInput;
                        case 6:
                            var inner = schemaType.a;
                            var $temp$refs = refs, $temp$schemaType = inner, $temp$fieldName = fieldName, $temp$astValue = astValue;
                            refs = $temp$refs;
                            schemaType = $temp$schemaType;
                            fieldName = $temp$fieldName;
                            astValue = $temp$astValue;
                            continue validateInput;
                        default:
                            return $author$project$GraphQL$Operations$Canonicalize$Mismatch;
                    }
                case 1:
                    var _int = astValue.a;
                    _v9$4: while (true) {
                        switch (schemaType.$) {
                            case 0:
                                switch (schemaType.a) {
                                    case "Int":
                                        return $author$project$GraphQL$Operations$Canonicalize$Valid(_List_Nil);
                                    case "Float":
                                        return $author$project$GraphQL$Operations$Canonicalize$Valid(_List_Nil);
                                    default:
                                        break _v9$4;
                                }
                            case 7:
                                var inner = schemaType.a;
                                var $temp$refs = refs, $temp$schemaType = inner, $temp$fieldName = fieldName, $temp$astValue = astValue;
                                refs = $temp$refs;
                                schemaType = $temp$schemaType;
                                fieldName = $temp$fieldName;
                                astValue = $temp$astValue;
                                continue validateInput;
                            case 6:
                                var inner = schemaType.a;
                                var $temp$refs = refs, $temp$schemaType = inner, $temp$fieldName = fieldName, $temp$astValue = astValue;
                                refs = $temp$refs;
                                schemaType = $temp$schemaType;
                                fieldName = $temp$fieldName;
                                astValue = $temp$astValue;
                                continue validateInput;
                            default:
                                break _v9$4;
                        }
                    }
                    return $author$project$GraphQL$Operations$Canonicalize$Mismatch;
                case 2:
                    var _float = astValue.a;
                    _v10$3: while (true) {
                        switch (schemaType.$) {
                            case 0:
                                if (schemaType.a === "Float") {
                                    return $author$project$GraphQL$Operations$Canonicalize$Valid(_List_Nil);
                                }
                                else {
                                    break _v10$3;
                                }
                            case 7:
                                var inner = schemaType.a;
                                var $temp$refs = refs, $temp$schemaType = inner, $temp$fieldName = fieldName, $temp$astValue = astValue;
                                refs = $temp$refs;
                                schemaType = $temp$schemaType;
                                fieldName = $temp$fieldName;
                                astValue = $temp$astValue;
                                continue validateInput;
                            case 6:
                                var inner = schemaType.a;
                                var $temp$refs = refs, $temp$schemaType = inner, $temp$fieldName = fieldName, $temp$astValue = astValue;
                                refs = $temp$refs;
                                schemaType = $temp$schemaType;
                                fieldName = $temp$fieldName;
                                astValue = $temp$astValue;
                                continue validateInput;
                            default:
                                break _v10$3;
                        }
                    }
                    return $author$project$GraphQL$Operations$Canonicalize$Mismatch;
                case 3:
                    var bool = astValue.a;
                    _v11$3: while (true) {
                        switch (schemaType.$) {
                            case 0:
                                if (schemaType.a === "Boolean") {
                                    return $author$project$GraphQL$Operations$Canonicalize$Valid(_List_Nil);
                                }
                                else {
                                    break _v11$3;
                                }
                            case 7:
                                var inner = schemaType.a;
                                var $temp$refs = refs, $temp$schemaType = inner, $temp$fieldName = fieldName, $temp$astValue = astValue;
                                refs = $temp$refs;
                                schemaType = $temp$schemaType;
                                fieldName = $temp$fieldName;
                                astValue = $temp$astValue;
                                continue validateInput;
                            case 6:
                                var inner = schemaType.a;
                                var $temp$refs = refs, $temp$schemaType = inner, $temp$fieldName = fieldName, $temp$astValue = astValue;
                                refs = $temp$refs;
                                schemaType = $temp$schemaType;
                                fieldName = $temp$fieldName;
                                astValue = $temp$astValue;
                                continue validateInput;
                            default:
                                break _v11$3;
                        }
                    }
                    return $author$project$GraphQL$Operations$Canonicalize$Mismatch;
                case 4:
                    if (schemaType.$ === 7) {
                        return $author$project$GraphQL$Operations$Canonicalize$Valid(_List_Nil);
                    }
                    else {
                        return $author$project$GraphQL$Operations$Canonicalize$Mismatch;
                    }
                case 5:
                    var enumName = astValue.a;
                    switch (schemaType.$) {
                        case 3:
                            return $author$project$GraphQL$Operations$Canonicalize$Valid(_List_Nil);
                        case 7:
                            var inner = schemaType.a;
                            var $temp$refs = refs, $temp$schemaType = inner, $temp$fieldName = fieldName, $temp$astValue = astValue;
                            refs = $temp$refs;
                            schemaType = $temp$schemaType;
                            fieldName = $temp$fieldName;
                            astValue = $temp$astValue;
                            continue validateInput;
                        case 6:
                            var inner = schemaType.a;
                            var $temp$refs = refs, $temp$schemaType = inner, $temp$fieldName = fieldName, $temp$astValue = astValue;
                            refs = $temp$refs;
                            schemaType = $temp$schemaType;
                            fieldName = $temp$fieldName;
                            astValue = $temp$astValue;
                            continue validateInput;
                        default:
                            return $author$project$GraphQL$Operations$Canonicalize$Mismatch;
                    }
                default:
                    var list = astValue.a;
                    switch (schemaType.$) {
                        case 6:
                            var innerList = schemaType.a;
                            return $elm$core$List$foldl_fn_unwrapped(function (item, current) {
                                if (!current.$) {
                                    var validArgs = current.a;
                                    var _v16 = $author$project$GraphQL$Operations$Canonicalize$validateInput_fn(refs, innerList, fieldName, item);
                                    if (!_v16.$) {
                                        var newArgs = _v16.a;
                                        return $author$project$GraphQL$Operations$Canonicalize$Valid(_Utils_ap(newArgs, validArgs));
                                    }
                                    else {
                                        var validationError = _v16;
                                        return validationError;
                                    }
                                }
                                else {
                                    return current;
                                }
                            }, $author$project$GraphQL$Operations$Canonicalize$Valid(_List_Nil), list);
                        case 7:
                            var inner = schemaType.a;
                            var $temp$refs = refs, $temp$schemaType = inner, $temp$fieldName = fieldName, $temp$astValue = astValue;
                            refs = $temp$refs;
                            schemaType = $temp$schemaType;
                            fieldName = $temp$fieldName;
                            astValue = $temp$astValue;
                            continue validateInput;
                        default:
                            return $author$project$GraphQL$Operations$Canonicalize$Mismatch;
                    }
            }
        }
    }, $author$project$GraphQL$Operations$Canonicalize$validateInput = F4($author$project$GraphQL$Operations$Canonicalize$validateInput_fn);
    var $author$project$GraphQL$Operations$Canonicalize$validateObject_fn = function (refs, fieldName, keyValues, inputObject) {
        return $elm$core$List$foldl_fn_unwrapped(function (_v0, current) {
            var keyName = _v0.a;
            var value = _v0.b;
            var key = $author$project$GraphQL$Operations$AST$nameToString(keyName);
            if (!current.$) {
                var argValues = current.a;
                var _v2 = $elm$core$List$head($elm$core$List$filter_fn(function (a) {
                    return _Utils_eq(a.c, key);
                }, inputObject.hc));
                if (_v2.$ === 1) {
                    return $author$project$GraphQL$Operations$Canonicalize$Mismatch;
                }
                else {
                    var field = _v2.a;
                    var _v3 = $author$project$GraphQL$Operations$Canonicalize$validateInput_fn(refs, field.aK, fieldName, value);
                    if (!_v3.$) {
                        var fieldArgs = _v3.a;
                        return $author$project$GraphQL$Operations$Canonicalize$Valid(_Utils_ap(argValues, fieldArgs));
                    }
                    else {
                        var validationError = _v3;
                        return validationError;
                    }
                }
            }
            else {
                return current;
            }
        }, $author$project$GraphQL$Operations$Canonicalize$Valid(_List_Nil), keyValues);
    }, $author$project$GraphQL$Operations$Canonicalize$validateObject = F4($author$project$GraphQL$Operations$Canonicalize$validateObject_fn);
    var $author$project$GraphQL$Operations$Canonicalize$canonicalizeArguments_fn = function (refs, schemaArguments, _arguments) {
        return $elm$core$List$foldl_fn_unwrapped(function (arg, found) {
            var fieldname = $author$project$GraphQL$Operations$AST$nameToString(arg.c);
            var _v0 = $elm$core$List$head($elm$core$List$filter_fn(function (a) {
                return _Utils_eq(a.c, fieldname);
            }, schemaArguments));
            if (_v0.$ === 1) {
                return _Utils_update(found, {
                    aL: _List_Cons(fieldname, found.aL)
                });
            }
            else {
                var schemaVar = _v0.a;
                var _v1 = $author$project$GraphQL$Operations$Canonicalize$validateInput_fn(refs, schemaVar.aK, fieldname, arg.bK);
                switch (_v1.$) {
                    case 0:
                        var vars = _v1.a;
                        return _Utils_update(found, {
                            C: _Utils_ap(vars, found.C)
                        });
                    case 1:
                        var errorDetails = _v1.a;
                        return _Utils_update(found, {
                            Z: _List_Cons($author$project$GraphQL$Operations$Canonicalize$error(errorDetails), found.Z)
                        });
                    default:
                        return _Utils_update(found, {
                            Z: _List_Cons($author$project$GraphQL$Operations$Canonicalize$error($author$project$GraphQL$Operations$Canonicalize$IncorrectInlineInput({ b0: fieldname, z: arg.bK, hQ: schemaVar.aK })), found.Z)
                        });
                }
            }
        }, { Z: _List_Nil, aL: _List_Nil, C: _List_Nil }, _arguments);
    }, $author$project$GraphQL$Operations$Canonicalize$canonicalizeArguments = F3($author$project$GraphQL$Operations$Canonicalize$canonicalizeArguments_fn);
    var $author$project$GraphQL$Operations$Canonicalize$convertName = function (_v0) {
        var str = _v0;
        return str;
    };
    var $author$project$GraphQL$Operations$Canonicalize$convertDirective = function (dir) {
        return {
            b6: dir.b6,
            c: $author$project$GraphQL$Operations$Canonicalize$convertName(dir.c)
        };
    };
    var $elm$core$List$drop_fn = function (n, list) {
        drop: while (true) {
            if (n <= 0) {
                return list;
            }
            else {
                if (!list.b) {
                    return list;
                }
                else {
                    var x = list.a;
                    var xs = list.b;
                    var $temp$n = n - 1, $temp$list = xs;
                    n = $temp$n;
                    list = $temp$list;
                    continue drop;
                }
            }
        }
    }, $elm$core$List$drop = F2($elm$core$List$drop_fn);
    var $author$project$GraphQL$Operations$Canonicalize$UsedNames$dropLevel = function (_v0) {
        var used = _v0;
        return _Utils_update(used, {
            x: $elm$core$List$drop_fn(1, used.x),
            S: $elm$core$Maybe$withDefault_fn(_List_Nil, $elm$core$List$head(used.au)),
            au: $elm$core$List$drop_fn(1, used.au)
        });
    };
    var $author$project$GraphQL$Operations$Canonicalize$UsedNames$dropLevelNotSiblings = function (_v0) {
        var used = _v0;
        return _Utils_update(used, {
            x: $elm$core$List$drop_fn(1, used.x)
        });
    };
    var $author$project$GraphQL$Operations$Canonicalize$Cache$empty = { dt: _List_Nil, a9: _List_Nil };
    var $author$project$GraphQL$Operations$Canonicalize$emptySuccess = $author$project$GraphQL$Operations$Canonicalize$CanSuccess_fn($author$project$GraphQL$Operations$Canonicalize$Cache$empty, _List_Nil);
    var $author$project$GraphQL$Operations$Canonicalize$err = $author$project$GraphQL$Operations$Canonicalize$CanError;
    var $author$project$GraphQL$Operations$Canonicalize$extractUnionTags_fn = function (vars, captured) {
        extractUnionTags: while (true) {
            if (!vars.b) {
                return $elm$core$Maybe$Just(captured);
            }
            else {
                var top = vars.a;
                var remain = vars.b;
                var _v1 = top.bq;
                if (!_v1.$) {
                    var name = _v1.a;
                    var $temp$vars = remain, $temp$captured = _List_Cons(name, captured);
                    vars = $temp$vars;
                    captured = $temp$captured;
                    continue extractUnionTags;
                }
                else {
                    return $elm$core$Maybe$Nothing;
                }
            }
        }
    }, $author$project$GraphQL$Operations$Canonicalize$extractUnionTags = F2($author$project$GraphQL$Operations$Canonicalize$extractUnionTags_fn);
    var $author$project$GraphQL$Operations$Canonicalize$UsedNames$getGlobalName_fn = function (rawName, _v0) {
        var used = _v0;
        if (rawName === "__typename") {
            return { ab: "__typename", J: used };
        }
        else {
            var name = $author$project$GraphQL$Operations$Canonicalize$UsedNames$formatTypename(rawName);
            var newGlobalName = function () {
                if ($elm$core$List$member_fn(name, used.ak)) {
                    var allAliases = $elm$core$List$filter_fn(function ($) {
                        return $.aR;
                    }, used.x);
                    if (!allAliases.b) {
                        var _v2 = used.x;
                        if (!_v2.b) {
                            return name;
                        }
                        else {
                            var top = _v2.a;
                            var remain = _v2.b;
                            var unaliasedName = top.c + ("_" + name);
                            return $elm$core$List$member_fn(unaliasedName, used.ak) ? ($elm$core$String$join_fn("_", $elm$core$List$reverse($elm$core$List$map_fn(function ($) {
                                return $.c;
                            }, used.x))) + ("_" + name)) : unaliasedName;
                        }
                    }
                    else {
                        var topAlias = allAliases.a;
                        var remainingAliases = allAliases.b;
                        var aliasedName = topAlias.c + ("_" + name);
                        return $elm$core$List$member_fn(aliasedName, used.ak) ? ($elm$core$String$join_fn("_", $elm$core$List$reverse($elm$core$List$map_fn(function ($) {
                            return $.c;
                        }, used.x))) + ("_" + name)) : aliasedName;
                    }
                }
                else {
                    return name;
                }
            }();
            return {
                ab: newGlobalName,
                J: _Utils_update(used, {
                    ak: _List_Cons(newGlobalName, used.ak)
                })
            };
        }
    }, $author$project$GraphQL$Operations$Canonicalize$UsedNames$getGlobalName = F2($author$project$GraphQL$Operations$Canonicalize$UsedNames$getGlobalName_fn);
    var $author$project$GraphQL$Operations$Canonicalize$gatherRemaining_fn = function (tag, _v0) {
        var used = _v0.a;
        var gathered = _v0.b;
        var global = $author$project$GraphQL$Operations$Canonicalize$UsedNames$getGlobalName_fn(tag, used);
        return _Utils_Tuple2(global.J, _List_Cons({ hg: global.ab, h0: tag }, gathered));
    }, $author$project$GraphQL$Operations$Canonicalize$gatherRemaining = F2($author$project$GraphQL$Operations$Canonicalize$gatherRemaining_fn);
    var $author$project$GraphQL$Operations$AST$getAliasedName = function (deets) {
        return $author$project$GraphQL$Operations$AST$nameToString($elm$core$Maybe$withDefault_fn(deets.c, deets.gI));
    };
    var $author$project$GraphQL$Operations$Canonicalize$getGlobalNameWithFragmentAlias_fn = function (selection, name, usedNames) {
        return $author$project$GraphQL$Operations$Canonicalize$UsedNames$getGlobalName_fn(name, usedNames);
    }, $author$project$GraphQL$Operations$Canonicalize$getGlobalNameWithFragmentAlias = F3($author$project$GraphQL$Operations$Canonicalize$getGlobalNameWithFragmentAlias_fn);
    var $author$project$GraphQL$Schema$getInner = function (type_) {
        getInner: while (true) {
            switch (type_.$) {
                case 7:
                    var newType = type_.a;
                    var $temp$type_ = newType;
                    type_ = $temp$type_;
                    continue getInner;
                case 6:
                    var newType = type_.a;
                    var $temp$type_ = newType;
                    type_ = $temp$type_;
                    continue getInner;
                default:
                    var inner = type_;
                    return inner;
            }
        }
    };
    var $author$project$GraphQL$Operations$Canonicalize$getInterfaceNames_fn = function (kind, found) {
        if (!kind.$) {
            var name = kind.a;
            return _List_Cons(name, found);
        }
        else {
            return found;
        }
    }, $author$project$GraphQL$Operations$Canonicalize$getInterfaceNames = F2($author$project$GraphQL$Operations$Canonicalize$getInterfaceNames_fn);
    var $author$project$GraphQL$Schema$isScalar = function (tipe) {
        isScalar: while (true) {
            switch (tipe.$) {
                case 0:
                    return true;
                case 7:
                    var inner = tipe.a;
                    var $temp$tipe = inner;
                    tipe = $temp$tipe;
                    continue isScalar;
                case 6:
                    var inner = tipe.a;
                    var $temp$tipe = inner;
                    tipe = $temp$tipe;
                    continue isScalar;
                default:
                    return false;
            }
        }
    };
    var $author$project$GraphQL$Operations$Canonicalize$UsedNames$convertName = function (_v0) {
        var str = _v0;
        return str;
    };
    var $author$project$GraphQL$Operations$CanonicalAST$nameToString = function (_v0) {
        var str = _v0;
        return str;
    };
    var $author$project$GraphQL$Operations$Canonicalize$UsedNames$levelFromField = function (field) {
        var aliased = $author$project$GraphQL$Operations$CanonicalAST$nameToString($author$project$GraphQL$Operations$Canonicalize$UsedNames$convertName($elm$core$Maybe$withDefault_fn(field.c, field.gI)));
        return {
            aR: !_Utils_eq(field.gI, $elm$core$Maybe$Nothing),
            c: $author$project$GraphQL$Operations$Canonicalize$UsedNames$formatTypename(aliased)
        };
    };
    var $author$project$GraphQL$Operations$Canonicalize$matchTag_fn = function (tag, tags, _v0) {
        matchTag: while (true) {
            var matched = _v0.a;
            var captured = _v0.b;
            if (!tags.b) {
                return _Utils_Tuple2(matched, captured);
            }
            else {
                var top = tags.a;
                var remain = tags.b;
                if (_Utils_eq(top, tag)) {
                    return _Utils_Tuple2(true, _Utils_ap(remain, captured));
                }
                else {
                    var $temp$tag = tag, $temp$tags = remain, $temp$_v0 = _Utils_Tuple2(matched, _List_Cons(top, captured));
                    tag = $temp$tag;
                    tags = $temp$tags;
                    _v0 = $temp$_v0;
                    continue matchTag;
                }
            }
        }
    }, $author$project$GraphQL$Operations$Canonicalize$matchTag = F3($author$project$GraphQL$Operations$Canonicalize$matchTag_fn);
    var $author$project$GraphQL$Operations$Canonicalize$UsedNames$saveSibling_fn = function (sibling, _v0) {
        var used = _v0;
        return _Utils_update(used, {
            S: _List_Cons(sibling, used.S)
        });
    }, $author$project$GraphQL$Operations$Canonicalize$UsedNames$saveSibling = F2($author$project$GraphQL$Operations$Canonicalize$UsedNames$saveSibling_fn);
    var $author$project$Generate$Path$removePrefix_fn = function (prefix, list) {
        removePrefix: while (true) {
            if (!prefix.b) {
                return list;
            }
            else {
                var pref = prefix.a;
                var remainPref = prefix.b;
                if (!list.b) {
                    return list;
                }
                else {
                    var first = list.a;
                    var remain = list.b;
                    var $temp$prefix = remainPref, $temp$list = remain;
                    prefix = $temp$prefix;
                    list = $temp$list;
                    continue removePrefix;
                }
            }
        }
    }, $author$project$Generate$Path$removePrefix = F2($author$project$Generate$Path$removePrefix_fn);
    var $author$project$Generate$Path$fragment = function (_v0) {
        var name = _v0.c;
        var path = _v0.hH;
        var gqlDir = _v0.al;
        var pathFromElmRootToGqlFile = $elm$core$List$map_fn($author$project$Utils$String$formatTypename, $author$project$Generate$Path$removePrefix_fn(gqlDir, $elm$core$List$map_fn(A2($elm$core$Basics$composeR, A2($elm$core$String$replace, ".gql", ""), A2($elm$core$String$replace, ".graphql", "")), $elm$core$String$split_fn("/", path))));
        var fragName = $author$project$Utils$String$formatTypename(name);
        var filePathPieces = _Utils_ap(gqlDir, _Utils_ap(pathFromElmRootToGqlFile, _List_fromArray(["Fragments", fragName])));
        return {
            db: $elm$core$String$join_fn("/", filePathPieces) + ".elm",
            eB: _Utils_ap(pathFromElmRootToGqlFile, _List_fromArray(["Fragments", fragName]))
        };
    };
    var $author$project$GraphQL$Operations$Canonicalize$selectsSingleFragment_fn = function (refs, fields) {
        if ((fields.b && (fields.a.$ === 1)) && (!fields.b.b)) {
            var fragment = fields.a.a;
            var fragName = $author$project$Utils$String$formatTypename($author$project$GraphQL$Operations$AST$nameToString(fragment.c));
            var paths = $author$project$Generate$Path$fragment({ al: refs.ad.al, c: fragName, hH: refs.ad.hH });
            return $elm$core$Maybe$Just({ b: paths.eB, c: fragName });
        }
        else {
            return $elm$core$Maybe$Nothing;
        }
    }, $author$project$GraphQL$Operations$Canonicalize$selectsSingleFragment = F2($author$project$GraphQL$Operations$Canonicalize$selectsSingleFragment_fn);
    var $author$project$GraphQL$Operations$Canonicalize$UsedNames$siblingCollision_fn = function (sib, _v0) {
        var used = _v0;
        return $elm$core$List$any_fn(function (sibAlias) {
            if (_Utils_eq(sibAlias.bU, sib.bU)) {
                var _v1 = _Utils_Tuple2(sibAlias.fz, sib.fz);
                if ((!_v1.a.$) && (!_v1.b.$)) {
                    var scalarOneName = _v1.a.a;
                    var scalarTwoName = _v1.b.a;
                    return !_Utils_eq(scalarOneName, scalarTwoName);
                }
                else {
                    return true;
                }
            }
            else {
                return false;
            }
        }, used.S);
    }, $author$project$GraphQL$Operations$Canonicalize$UsedNames$siblingCollision = F2($author$project$GraphQL$Operations$Canonicalize$UsedNames$siblingCollision_fn);
    var $author$project$GraphQL$Operations$Canonicalize$success = $author$project$GraphQL$Operations$Canonicalize$CanSuccess;
    var $author$project$GraphQL$Operations$Canonicalize$Todo = function (a) {
        return { $: 20, a: a };
    };
    var $author$project$GraphQL$Operations$Canonicalize$todo = function (msg) {
        return {
            cq: { bg: $author$project$GraphQL$Operations$Canonicalize$zeroPosition, bF: $author$project$GraphQL$Operations$Canonicalize$zeroPosition },
            cT: $author$project$GraphQL$Operations$Canonicalize$Todo(msg)
        };
    };
    var $elm$core$Dict$values = function (dict) {
        return $elm$core$Dict$foldr_fn_unwrapped(function (key, value, valueList) {
            return _List_Cons(value, valueList);
        }, _List_Nil, dict);
    };
    var $author$project$GraphQL$Operations$Canonicalize$canonicalizeField_fn = function (refs, object, selection, found) {
        switch (selection.$) {
            case 0:
                var field = selection.a;
                var fieldName = $author$project$GraphQL$Operations$AST$nameToString(field.c);
                var aliased = $author$project$GraphQL$Operations$AST$getAliasedName(field);
                if (fieldName === "__typename") {
                    return {
                        e: found.e,
                        fs: $author$project$GraphQL$Operations$Canonicalize$addToResult_fn($author$project$GraphQL$Operations$Canonicalize$Cache$empty, $author$project$GraphQL$Operations$CanonicalAST$Field({
                            gI: $elm$core$Maybe$map_fn($author$project$GraphQL$Operations$Canonicalize$convertName, field.gI),
                            b6: _List_Nil,
                            aB: $elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$convertDirective, field.aB),
                            hg: $author$project$GraphQL$Operations$Canonicalize$convertName($elm$core$Maybe$withDefault_fn(field.c, field.gI)),
                            c: $author$project$GraphQL$Operations$Canonicalize$convertName(field.c),
                            hT: $author$project$GraphQL$Operations$CanonicalAST$FieldScalar($author$project$GraphQL$Schema$Scalar("typename")),
                            hU: $elm$core$Maybe$Nothing,
                            gF: $author$project$GraphQL$Schema$UnwrappedValue
                        }), found.fs)
                    };
                }
                else {
                    var matchedField = $elm$core$List$head($elm$core$List$filter_fn(function (fld) {
                        return _Utils_eq(fld.c, fieldName);
                    }, object.hc));
                    if (!matchedField.$) {
                        var matched = matchedField.a;
                        var siblingID = {
                            bU: aliased,
                            fz: $author$project$GraphQL$Schema$isScalar(matched.aK) ? $elm$core$Maybe$Just($author$project$GraphQL$Schema$typeToString(matched.aK)) : $elm$core$Maybe$Nothing
                        };
                        var _v27 = $author$project$GraphQL$Operations$Canonicalize$canonicalizeFieldType_fn(refs, field, found.e, matched);
                        var newNames = _v27.a;
                        var cannedSelection = _v27.b;
                        return $author$project$GraphQL$Operations$Canonicalize$UsedNames$siblingCollision_fn(siblingID, found.e) ? {
                            e: found.e,
                            fs: $author$project$GraphQL$Operations$Canonicalize$err(_List_fromArray([
                                $author$project$GraphQL$Operations$Canonicalize$error($author$project$GraphQL$Operations$Canonicalize$FieldAliasRequired({ bi: aliased }))
                            ]))
                        } : {
                            e: $author$project$GraphQL$Operations$Canonicalize$UsedNames$saveSibling_fn(siblingID, newNames),
                            fs: function () {
                                if (cannedSelection.$ === 1) {
                                    var cache = cannedSelection.a;
                                    var sel = cannedSelection.b;
                                    return $author$project$GraphQL$Operations$Canonicalize$addToResult_fn(cache, sel, found.fs);
                                }
                                else {
                                    var errMsg = cannedSelection.a;
                                    return $author$project$GraphQL$Operations$Canonicalize$CanError(errMsg);
                                }
                            }()
                        };
                    }
                    else {
                        return {
                            e: found.e,
                            fs: $author$project$GraphQL$Operations$Canonicalize$err(_List_fromArray([
                                $author$project$GraphQL$Operations$Canonicalize$error($author$project$GraphQL$Operations$Canonicalize$FieldUnknown({ c_: fieldName, eO: object.c }))
                            ]))
                        };
                    }
                }
            case 1:
                var frag = selection.a;
                var fragName = $author$project$GraphQL$Operations$AST$nameToString(frag.c);
                var _v29 = $elm$core$Dict$get_fn(fragName, refs.hf);
                if (_v29.$ === 1) {
                    return {
                        e: found.e,
                        fs: $author$project$GraphQL$Operations$Canonicalize$err(_List_fromArray([
                            $author$project$GraphQL$Operations$Canonicalize$error($author$project$GraphQL$Operations$Canonicalize$FragmentNotFound({
                                z: fragName,
                                eO: object.c,
                                e0: $elm$core$Dict$values(refs.hf)
                            }))
                        ]))
                    };
                }
                else {
                    var foundFrag = _v29.a;
                    return _Utils_eq($author$project$GraphQL$Operations$CanonicalAST$nameToString(foundFrag.h6), object.c) ? {
                        e: found.e,
                        fs: $author$project$GraphQL$Operations$Canonicalize$addToResult_fn($author$project$GraphQL$Operations$Canonicalize$Cache$addFragment_fn({ bX: false, dj: foundFrag }, $author$project$GraphQL$Operations$Canonicalize$Cache$empty), $author$project$GraphQL$Operations$CanonicalAST$Frag({
                            aB: $elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$convertDirective, frag.aB),
                            dj: foundFrag
                        }), found.fs)
                    } : {
                        e: found.e,
                        fs: $author$project$GraphQL$Operations$Canonicalize$err(_List_fromArray([
                            $author$project$GraphQL$Operations$Canonicalize$error($author$project$GraphQL$Operations$Canonicalize$FragmentNotFound({
                                z: fragName,
                                eO: object.c,
                                e0: $elm$core$Dict$values(refs.hf)
                            }))
                        ]))
                    };
                }
            default:
                var inline = selection.a;
                return {
                    e: found.e,
                    fs: $author$project$GraphQL$Operations$Canonicalize$err(_List_fromArray([
                        $author$project$GraphQL$Operations$Canonicalize$error($author$project$GraphQL$Operations$Canonicalize$FragmentSelectionNotAllowedInObjects({ dj: inline, eR: object.c }))
                    ]))
                };
        }
    }, $author$project$GraphQL$Operations$Canonicalize$canonicalizeField = F4($author$project$GraphQL$Operations$Canonicalize$canonicalizeField_fn);
    var $author$project$GraphQL$Operations$Canonicalize$canonicalizeFieldType_fn = function (refs, field, usedNames, schemaField) {
        return $author$project$GraphQL$Operations$Canonicalize$canonicalizeFieldTypeHelper_fn(refs, field, schemaField.aK, usedNames, $author$project$GraphQL$Operations$Canonicalize$Cache$empty, schemaField);
    }, $author$project$GraphQL$Operations$Canonicalize$canonicalizeFieldType = F4($author$project$GraphQL$Operations$Canonicalize$canonicalizeFieldType_fn);
    var $author$project$GraphQL$Operations$Canonicalize$canonicalizeFieldTypeHelper_fn = function (refs, field, type_, usedNames, initialVarCache, schemaField) {
        canonicalizeFieldTypeHelper: while (true) {
            var argValidation = $author$project$GraphQL$Operations$Canonicalize$canonicalizeArguments_fn(refs, schemaField.b6, field.b6);
            if (!$elm$core$List$isEmpty(argValidation.aL)) {
                return _Utils_Tuple2(usedNames, $author$project$GraphQL$Operations$Canonicalize$CanError(_List_fromArray([
                    $author$project$GraphQL$Operations$Canonicalize$error($author$project$GraphQL$Operations$Canonicalize$UnknownArgs({
                        ba: schemaField.b6,
                        c_: $author$project$GraphQL$Operations$AST$nameToString(field.c),
                        bJ: argValidation.aL
                    }))
                ])));
            }
            else {
                if (!$elm$core$List$isEmpty(argValidation.Z)) {
                    return _Utils_Tuple2(usedNames, $author$project$GraphQL$Operations$Canonicalize$CanError(argValidation.Z));
                }
                else {
                    var vars = $elm$core$List$reverse(argValidation.C);
                    var newCache = $author$project$GraphQL$Operations$Canonicalize$Cache$addVars_fn(vars, initialVarCache);
                    switch (type_.$) {
                        case 0:
                            var name = type_.a;
                            return _Utils_Tuple2(usedNames, $author$project$GraphQL$Operations$Canonicalize$CanSuccess_fn(newCache, $author$project$GraphQL$Operations$CanonicalAST$Field({
                                gI: $elm$core$Maybe$map_fn($author$project$GraphQL$Operations$Canonicalize$convertName, field.gI),
                                b6: field.b6,
                                aB: $elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$convertDirective, field.aB),
                                hg: $author$project$GraphQL$Operations$Canonicalize$convertName($elm$core$Maybe$withDefault_fn(field.c, field.gI)),
                                c: $author$project$GraphQL$Operations$Canonicalize$convertName(field.c),
                                hT: $author$project$GraphQL$Operations$CanonicalAST$FieldScalar($author$project$GraphQL$Schema$getInner(schemaField.aK)),
                                hU: $elm$core$Maybe$Nothing,
                                gF: $author$project$GraphQL$Schema$getWrap(schemaField.aK)
                            })));
                        case 1:
                            var name = type_.a;
                            return _Utils_Tuple2(usedNames, $author$project$GraphQL$Operations$Canonicalize$err(_List_fromArray([
                                $author$project$GraphQL$Operations$Canonicalize$todo("Invalid schema!  Weird InputObject")
                            ])));
                        case 2:
                            var name = type_.a;
                            var _v16 = $elm$core$Dict$get_fn(name, refs.hQ.hF);
                            if (_v16.$ === 1) {
                                return _Utils_Tuple2(usedNames, $author$project$GraphQL$Operations$Canonicalize$err(_List_fromArray([
                                    $author$project$GraphQL$Operations$Canonicalize$error($author$project$GraphQL$Operations$Canonicalize$ObjectUnknown(name))
                                ])));
                            }
                            else {
                                var obj = _v16.a;
                                return $author$project$GraphQL$Operations$Canonicalize$canonicalizeObject_fn(refs, field, usedNames, schemaField, newCache, obj);
                            }
                        case 3:
                            var name = type_.a;
                            var _v17 = $elm$core$Dict$get_fn(name, refs.hQ.cQ);
                            if (_v17.$ === 1) {
                                return _Utils_Tuple2(usedNames, $author$project$GraphQL$Operations$Canonicalize$err(_List_fromArray([
                                    $author$project$GraphQL$Operations$Canonicalize$error($author$project$GraphQL$Operations$Canonicalize$EnumUnknown(name))
                                ])));
                            }
                            else {
                                var _enum = _v17.a;
                                return _Utils_Tuple2(usedNames, $author$project$GraphQL$Operations$Canonicalize$CanSuccess_fn(newCache, $author$project$GraphQL$Operations$CanonicalAST$Field({
                                    gI: $elm$core$Maybe$map_fn($author$project$GraphQL$Operations$Canonicalize$convertName, field.gI),
                                    b6: field.b6,
                                    aB: $elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$convertDirective, field.aB),
                                    hg: $author$project$GraphQL$Operations$Canonicalize$convertName($elm$core$Maybe$withDefault_fn(field.c, field.gI)),
                                    c: $author$project$GraphQL$Operations$Canonicalize$convertName(field.c),
                                    hT: $author$project$GraphQL$Operations$CanonicalAST$FieldEnum({ g3: _enum.c, ia: _enum.ia }),
                                    hU: $elm$core$Maybe$Nothing,
                                    gF: $author$project$GraphQL$Schema$getWrap(schemaField.aK)
                                })));
                            }
                        case 4:
                            var name = type_.a;
                            var _v18 = $elm$core$Dict$get_fn(name, refs.hQ.h8);
                            if (_v18.$ === 1) {
                                return _Utils_Tuple2(usedNames, $author$project$GraphQL$Operations$Canonicalize$err(_List_fromArray([
                                    $author$project$GraphQL$Operations$Canonicalize$error($author$project$GraphQL$Operations$Canonicalize$UnionUnknown(name))
                                ])));
                            }
                            else {
                                var union = _v18.a;
                                var _v19 = $author$project$GraphQL$Operations$Canonicalize$extractUnionTags_fn(union.gw, _List_Nil);
                                if (_v19.$ === 1) {
                                    return _Utils_Tuple2(usedNames, $author$project$GraphQL$Operations$Canonicalize$err(_List_fromArray([
                                        $author$project$GraphQL$Operations$Canonicalize$todo("Things in a union are not objects!")
                                    ])));
                                }
                                else {
                                    var variants = _v19.a;
                                    var aliasedName = $author$project$GraphQL$Operations$CanonicalAST$nameToString($author$project$GraphQL$Operations$Canonicalize$convertName($elm$core$Maybe$withDefault_fn(field.c, field.gI)));
                                    var global = $author$project$GraphQL$Operations$Canonicalize$getGlobalNameWithFragmentAlias_fn(field.hT, aliasedName, usedNames);
                                    var _v20 = $author$project$GraphQL$Operations$Canonicalize$canonicalizeVariantSelection_fn(refs, $author$project$GraphQL$Operations$Canonicalize$UsedNames$addLevel_fn($author$project$GraphQL$Operations$Canonicalize$UsedNames$levelFromField(field), global.J), { bd: union.bd, hc: _List_Nil, c: union.c }, field.hT, variants);
                                    var finalUsedNames = _v20.a;
                                    var canVarSelectionResult = _v20.b;
                                    return _Utils_Tuple2(finalUsedNames, function () {
                                        if (canVarSelectionResult.$ === 1) {
                                            var cache = canVarSelectionResult.a;
                                            var variantSelection = canVarSelectionResult.b;
                                            return $author$project$GraphQL$Operations$Canonicalize$CanSuccess_fn($author$project$GraphQL$Operations$Canonicalize$Cache$merge_fn(newCache, cache), $author$project$GraphQL$Operations$CanonicalAST$Field({
                                                gI: $elm$core$Maybe$map_fn($author$project$GraphQL$Operations$Canonicalize$convertName, field.gI),
                                                b6: field.b6,
                                                aB: $elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$convertDirective, field.aB),
                                                hg: global.ab,
                                                c: $author$project$GraphQL$Operations$Canonicalize$convertName(field.c),
                                                hT: $author$project$GraphQL$Operations$CanonicalAST$FieldUnion(variantSelection),
                                                hU: $author$project$GraphQL$Operations$Canonicalize$selectsSingleFragment_fn(refs, field.hT),
                                                gF: $author$project$GraphQL$Schema$getWrap(schemaField.aK)
                                            }));
                                        }
                                        else {
                                            var errorMsg = canVarSelectionResult.a;
                                            return $author$project$GraphQL$Operations$Canonicalize$CanError(errorMsg);
                                        }
                                    }());
                                }
                            }
                        case 5:
                            var name = type_.a;
                            var _v22 = $elm$core$Dict$get_fn(name, refs.hQ.d_);
                            if (_v22.$ === 1) {
                                return _Utils_Tuple2(usedNames, $author$project$GraphQL$Operations$Canonicalize$err(_List_fromArray([
                                    $author$project$GraphQL$Operations$Canonicalize$error($author$project$GraphQL$Operations$Canonicalize$UnionUnknown(name))
                                ])));
                            }
                            else {
                                var _interface = _v22.a;
                                var variants = $elm$core$List$foldl_fn($author$project$GraphQL$Operations$Canonicalize$getInterfaceNames, _List_Nil, _interface.hk);
                                var aliasedName = $author$project$GraphQL$Operations$CanonicalAST$nameToString($author$project$GraphQL$Operations$Canonicalize$convertName($elm$core$Maybe$withDefault_fn(field.c, field.gI)));
                                var global = $author$project$GraphQL$Operations$Canonicalize$getGlobalNameWithFragmentAlias_fn(field.hT, aliasedName, usedNames);
                                var _v23 = $author$project$GraphQL$Operations$Canonicalize$canonicalizeVariantSelection_fn(refs, $author$project$GraphQL$Operations$Canonicalize$UsedNames$addLevel_fn($author$project$GraphQL$Operations$Canonicalize$UsedNames$levelFromField(field), global.J), { bd: _interface.bd, hc: _interface.hc, c: _interface.c }, field.hT, variants);
                                var finalUsedNames = _v23.a;
                                var canVarSelectionResult = _v23.b;
                                return _Utils_Tuple2(finalUsedNames, function () {
                                    if (canVarSelectionResult.$ === 1) {
                                        var cache = canVarSelectionResult.a;
                                        var variantSelection = canVarSelectionResult.b;
                                        return $author$project$GraphQL$Operations$Canonicalize$CanSuccess_fn($author$project$GraphQL$Operations$Canonicalize$Cache$merge_fn(newCache, cache), $author$project$GraphQL$Operations$CanonicalAST$Field({
                                            gI: $elm$core$Maybe$map_fn($author$project$GraphQL$Operations$Canonicalize$convertName, field.gI),
                                            b6: field.b6,
                                            aB: $elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$convertDirective, field.aB),
                                            hg: global.ab,
                                            c: $author$project$GraphQL$Operations$Canonicalize$convertName(field.c),
                                            hT: $author$project$GraphQL$Operations$CanonicalAST$FieldInterface(variantSelection),
                                            hU: $author$project$GraphQL$Operations$Canonicalize$selectsSingleFragment_fn(refs, field.hT),
                                            gF: $author$project$GraphQL$Schema$getWrap(schemaField.aK)
                                        }));
                                    }
                                    else {
                                        var errorMsg = canVarSelectionResult.a;
                                        return $author$project$GraphQL$Operations$Canonicalize$CanError(errorMsg);
                                    }
                                }());
                            }
                        case 6:
                            var inner = type_.a;
                            var $temp$refs = refs, $temp$field = field, $temp$type_ = inner, $temp$usedNames = usedNames, $temp$initialVarCache = newCache, $temp$schemaField = schemaField;
                            refs = $temp$refs;
                            field = $temp$field;
                            type_ = $temp$type_;
                            usedNames = $temp$usedNames;
                            initialVarCache = $temp$initialVarCache;
                            schemaField = $temp$schemaField;
                            continue canonicalizeFieldTypeHelper;
                        default:
                            var inner = type_.a;
                            var $temp$refs = refs, $temp$field = field, $temp$type_ = inner, $temp$usedNames = usedNames, $temp$initialVarCache = newCache, $temp$schemaField = schemaField;
                            refs = $temp$refs;
                            field = $temp$field;
                            type_ = $temp$type_;
                            usedNames = $temp$usedNames;
                            initialVarCache = $temp$initialVarCache;
                            schemaField = $temp$schemaField;
                            continue canonicalizeFieldTypeHelper;
                    }
                }
            }
        }
    }, $author$project$GraphQL$Operations$Canonicalize$canonicalizeFieldTypeHelper = F6($author$project$GraphQL$Operations$Canonicalize$canonicalizeFieldTypeHelper_fn);
    var $author$project$GraphQL$Operations$Canonicalize$canonicalizeFieldWithVariants_fn = function (refs, unionOrInterface, selection, found) {
        switch (selection.$) {
            case 0:
                var field = selection.a;
                var fieldName = $author$project$GraphQL$Operations$AST$nameToString(field.c);
                if (fieldName === "__typename") {
                    return {
                        m: found.m,
                        e: found.e,
                        fs: $author$project$GraphQL$Operations$Canonicalize$addToResult_fn($author$project$GraphQL$Operations$Canonicalize$Cache$empty, $author$project$GraphQL$Operations$CanonicalAST$Field({
                            gI: $elm$core$Maybe$map_fn($author$project$GraphQL$Operations$Canonicalize$convertName, field.gI),
                            b6: _List_Nil,
                            aB: $elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$convertDirective, field.aB),
                            hg: $author$project$GraphQL$Operations$Canonicalize$convertName($elm$core$Maybe$withDefault_fn(field.c, field.gI)),
                            c: $author$project$GraphQL$Operations$Canonicalize$convertName(field.c),
                            hT: $author$project$GraphQL$Operations$CanonicalAST$FieldScalar($author$project$GraphQL$Schema$Scalar("typename")),
                            hU: $elm$core$Maybe$Nothing,
                            gF: $author$project$GraphQL$Schema$UnwrappedValue
                        }), found.fs),
                        n: true,
                        gw: found.gw
                    };
                }
                else {
                    var canned = $author$project$GraphQL$Operations$Canonicalize$canonicalizeField_fn(refs, unionOrInterface, selection, { e: found.e, fs: found.fs });
                    return { m: found.m, e: canned.e, fs: canned.fs, n: found.n, gw: found.gw };
                }
            case 1:
                var frag = selection.a;
                var fragName = $author$project$GraphQL$Operations$AST$nameToString(frag.c);
                var _v8 = $elm$core$Dict$get_fn(fragName, refs.hf);
                if (_v8.$ === 1) {
                    return {
                        m: found.m,
                        e: found.e,
                        fs: $author$project$GraphQL$Operations$Canonicalize$err(_List_fromArray([
                            $author$project$GraphQL$Operations$Canonicalize$error($author$project$GraphQL$Operations$Canonicalize$FragmentNotFound({
                                z: fragName,
                                eO: unionOrInterface.c,
                                e0: $elm$core$Dict$values(refs.hf)
                            }))
                        ])),
                        n: found.n,
                        gw: found.gw
                    };
                }
                else {
                    var foundFrag = _v8.a;
                    return _Utils_eq($author$project$GraphQL$Operations$CanonicalAST$nameToString(foundFrag.h6), unionOrInterface.c) ? {
                        m: found.m,
                        e: found.e,
                        fs: $author$project$GraphQL$Operations$Canonicalize$addToResult_fn($author$project$GraphQL$Operations$Canonicalize$Cache$addFragment_fn({ bX: false, dj: foundFrag }, $author$project$GraphQL$Operations$Canonicalize$Cache$empty), $author$project$GraphQL$Operations$CanonicalAST$Frag({
                            aB: $elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$convertDirective, frag.aB),
                            dj: foundFrag
                        }), found.fs),
                        n: found.n,
                        gw: found.gw
                    } : {
                        m: found.m,
                        e: found.e,
                        fs: $author$project$GraphQL$Operations$Canonicalize$err(_List_fromArray([
                            $author$project$GraphQL$Operations$Canonicalize$error($author$project$GraphQL$Operations$Canonicalize$FragmentNotFound({
                                z: fragName,
                                eO: unionOrInterface.c,
                                e0: $elm$core$Dict$values(refs.hf)
                            }))
                        ])),
                        n: found.n,
                        gw: found.gw
                    };
                }
            default:
                var inline = selection.a;
                var _v9 = inline.hT;
                if (!_v9.b) {
                    return {
                        m: found.m,
                        e: found.e,
                        fs: $author$project$GraphQL$Operations$Canonicalize$err(_List_fromArray([
                            $author$project$GraphQL$Operations$Canonicalize$error($author$project$GraphQL$Operations$Canonicalize$EmptyUnionVariantSelection({
                                h0: $author$project$GraphQL$Operations$AST$nameToString(inline.h0)
                            }))
                        ])),
                        n: found.n,
                        gw: found.gw
                    };
                }
                else {
                    var tag = $author$project$GraphQL$Operations$AST$nameToString(inline.h0);
                    var _v10 = $author$project$GraphQL$Operations$Canonicalize$matchTag_fn(tag, found.gw, _Utils_Tuple2(false, _List_Nil));
                    var tagMatches = _v10.a;
                    var leftOvertags = _v10.b;
                    if (tagMatches) {
                        var _v11 = $elm$core$Dict$get_fn(tag, refs.hQ.hF);
                        if (_v11.$ === 1) {
                            return {
                                m: found.m,
                                e: found.e,
                                fs: $author$project$GraphQL$Operations$Canonicalize$err(_List_fromArray([
                                    $author$project$GraphQL$Operations$Canonicalize$error($author$project$GraphQL$Operations$Canonicalize$ObjectUnknown(tag))
                                ])),
                                n: found.n,
                                gw: leftOvertags
                            };
                        }
                        else {
                            var obj = _v11.a;
                            var selectsForTypename = found.n ? true : $elm$core$List$any_fn(function (sel) {
                                if (!sel.$) {
                                    var firstField = sel.a;
                                    var _v14 = $author$project$GraphQL$Operations$AST$nameToString(firstField.c);
                                    if (_v14 === "__typename") {
                                        return true;
                                    }
                                    else {
                                        return false;
                                    }
                                }
                                else {
                                    return false;
                                }
                            }, inline.hT);
                            var selectionResult = $elm$core$List$foldl_fn_unwrapped(function (sel, cursor) {
                                return $author$project$GraphQL$Operations$Canonicalize$canonicalizeField_fn(refs, obj, sel, cursor);
                            }, {
                                e: $author$project$GraphQL$Operations$Canonicalize$UsedNames$addLevelKeepSiblingStack_fn({ aR: false, c: tag }, found.e),
                                fs: $author$project$GraphQL$Operations$Canonicalize$emptySuccess
                            }, inline.hT);
                            if (selectsForTypename) {
                                var _v12 = selectionResult.fs;
                                if (_v12.$ === 1) {
                                    var cache = _v12.a;
                                    var canSelection = _v12.b;
                                    var global = $author$project$GraphQL$Operations$Canonicalize$UsedNames$getGlobalName_fn(tag, $author$project$GraphQL$Operations$Canonicalize$UsedNames$dropLevelNotSiblings(selectionResult.e));
                                    var globalDetailsAlias = $author$project$GraphQL$Operations$Canonicalize$getGlobalNameWithFragmentAlias_fn(inline.hT, global.ab + "_Details", global.J);
                                    return {
                                        m: _List_Cons({
                                            aB: $elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$convertDirective, inline.aB),
                                            hh: globalDetailsAlias.ab,
                                            hi: global.ab,
                                            hT: canSelection,
                                            h0: tag
                                        }, found.m),
                                        e: globalDetailsAlias.J,
                                        fs: $author$project$GraphQL$Operations$Canonicalize$addCache_fn(cache, found.fs),
                                        n: found.n,
                                        gw: leftOvertags
                                    };
                                }
                                else {
                                    var errorMsg = _v12.a;
                                    return {
                                        m: found.m,
                                        e: selectionResult.e,
                                        fs: $author$project$GraphQL$Operations$Canonicalize$CanError(errorMsg),
                                        n: found.n,
                                        gw: leftOvertags
                                    };
                                }
                            }
                            else {
                                return {
                                    m: found.m,
                                    e: found.e,
                                    fs: $author$project$GraphQL$Operations$Canonicalize$err(_List_fromArray([
                                        $author$project$GraphQL$Operations$Canonicalize$error($author$project$GraphQL$Operations$Canonicalize$MissingTypename({
                                            h0: $author$project$GraphQL$Operations$AST$nameToString(inline.h0)
                                        }))
                                    ])),
                                    n: found.n,
                                    gw: found.gw
                                };
                            }
                        }
                    }
                    else {
                        return {
                            m: found.m,
                            e: found.e,
                            fs: $author$project$GraphQL$Operations$Canonicalize$err(_List_fromArray([
                                $author$project$GraphQL$Operations$Canonicalize$todo(tag + " does not match!")
                            ])),
                            n: found.n,
                            gw: found.gw
                        };
                    }
                }
        }
    }, $author$project$GraphQL$Operations$Canonicalize$canonicalizeFieldWithVariants = F4($author$project$GraphQL$Operations$Canonicalize$canonicalizeFieldWithVariants_fn);
    var $author$project$GraphQL$Operations$Canonicalize$canonicalizeObject_fn = function (refs, field, usedNames, schemaField, varCache, obj) {
        var _v4 = field.hT;
        if (!_v4.b) {
            return _Utils_Tuple2(usedNames, $author$project$GraphQL$Operations$Canonicalize$err(_List_fromArray([
                $author$project$GraphQL$Operations$Canonicalize$error($author$project$GraphQL$Operations$Canonicalize$EmptySelection({
                    c_: function () {
                        var _v5 = field.gI;
                        if (_v5.$ === 1) {
                            return $author$project$GraphQL$Operations$AST$nameToString(field.c);
                        }
                        else {
                            var alias = _v5.a;
                            return $author$project$GraphQL$Operations$AST$nameToString(alias) + (": " + $author$project$GraphQL$Operations$AST$nameToString(field.c));
                        }
                    }(),
                    c7: obj.c,
                    e0: $elm$core$List$map_fn(function (f) {
                        return {
                            c_: f.c,
                            aK: $author$project$GraphQL$Schema$typeToString(f.aK)
                        };
                    }, obj.hc)
                }))
            ])));
        }
        else {
            var aliasedName = $author$project$GraphQL$Operations$CanonicalAST$nameToString($author$project$GraphQL$Operations$Canonicalize$convertName($elm$core$Maybe$withDefault_fn(field.c, field.gI)));
            var global = $author$project$GraphQL$Operations$Canonicalize$getGlobalNameWithFragmentAlias_fn(field.hT, aliasedName, usedNames);
            var selectionResult = $elm$core$List$foldl_fn(A2($author$project$GraphQL$Operations$Canonicalize$canonicalizeField, refs, obj), {
                e: $author$project$GraphQL$Operations$Canonicalize$UsedNames$addLevel_fn($author$project$GraphQL$Operations$Canonicalize$UsedNames$levelFromField(field), global.J),
                fs: $author$project$GraphQL$Operations$Canonicalize$emptySuccess
            }, field.hT);
            var _v6 = selectionResult.fs;
            if (_v6.$ === 1) {
                var cache = _v6.a;
                var canSelection = _v6.b;
                var siblingID = { bU: aliasedName, fz: $elm$core$Maybe$Nothing };
                return $author$project$GraphQL$Operations$Canonicalize$UsedNames$siblingCollision_fn(siblingID, global.J) ? _Utils_Tuple2($author$project$GraphQL$Operations$Canonicalize$UsedNames$dropLevel(selectionResult.e), $author$project$GraphQL$Operations$Canonicalize$err(_List_fromArray([
                    $author$project$GraphQL$Operations$Canonicalize$error($author$project$GraphQL$Operations$Canonicalize$FieldAliasRequired({ bi: aliasedName }))
                ]))) : _Utils_Tuple2($author$project$GraphQL$Operations$Canonicalize$UsedNames$saveSibling_fn(siblingID, $author$project$GraphQL$Operations$Canonicalize$UsedNames$dropLevel(selectionResult.e)), $author$project$GraphQL$Operations$Canonicalize$CanSuccess_fn($author$project$GraphQL$Operations$Canonicalize$Cache$merge_fn(varCache, cache), $author$project$GraphQL$Operations$CanonicalAST$Field({
                    gI: $elm$core$Maybe$map_fn($author$project$GraphQL$Operations$Canonicalize$convertName, field.gI),
                    b6: field.b6,
                    aB: $elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$convertDirective, field.aB),
                    hg: global.ab,
                    c: $author$project$GraphQL$Operations$Canonicalize$convertName(field.c),
                    hT: $author$project$GraphQL$Operations$CanonicalAST$FieldObject(canSelection),
                    hU: $author$project$GraphQL$Operations$Canonicalize$selectsSingleFragment_fn(refs, field.hT),
                    gF: $author$project$GraphQL$Schema$getWrap(schemaField.aK)
                })));
            }
            else {
                var errorMsg = _v6.a;
                return _Utils_Tuple2(global.J, $author$project$GraphQL$Operations$Canonicalize$CanError(errorMsg));
            }
        }
    }, $author$project$GraphQL$Operations$Canonicalize$canonicalizeObject = F6($author$project$GraphQL$Operations$Canonicalize$canonicalizeObject_fn);
    var $author$project$GraphQL$Operations$Canonicalize$canonicalizeVariantSelection_fn = function (refs, usedNames, unionOrInterface, selection, variants) {
        var selectsForTypename = $elm$core$List$any_fn(function (sel) {
            if (!sel.$) {
                var firstField = sel.a;
                var _v3 = $author$project$GraphQL$Operations$AST$nameToString(firstField.c);
                if (_v3 === "__typename") {
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        }, selection);
        var selectionResult = $elm$core$List$foldl_fn(A2($author$project$GraphQL$Operations$Canonicalize$canonicalizeFieldWithVariants, refs, unionOrInterface), { m: _List_Nil, e: usedNames, fs: $author$project$GraphQL$Operations$Canonicalize$emptySuccess, n: selectsForTypename, gw: variants }, selection);
        var _v0 = $elm$core$List$foldl_fn($author$project$GraphQL$Operations$Canonicalize$gatherRemaining, _Utils_Tuple2(selectionResult.e, _List_Nil), selectionResult.gw);
        var remainingUsedNames = _v0.a;
        var remaining = _v0.b;
        var _v1 = selectionResult.fs;
        if (_v1.$ === 1) {
            var cache = _v1.a;
            var canSelection = _v1.b;
            return _Utils_Tuple2($author$project$GraphQL$Operations$Canonicalize$UsedNames$dropLevel(remainingUsedNames), $author$project$GraphQL$Operations$Canonicalize$CanSuccess_fn(cache, {
                ff: $elm$core$List$reverse(remaining),
                hT: canSelection,
                gw: selectionResult.m
            }));
        }
        else {
            var errorMsg = _v1.a;
            return _Utils_Tuple2(remainingUsedNames, $author$project$GraphQL$Operations$Canonicalize$CanError(errorMsg));
        }
    }, $author$project$GraphQL$Operations$Canonicalize$canonicalizeVariantSelection = F5($author$project$GraphQL$Operations$Canonicalize$canonicalizeVariantSelection_fn);
    var $elm$core$Tuple$mapFirst_fn = function (func, _v0) {
        var x = _v0.a;
        var y = _v0.b;
        return _Utils_Tuple2(func(x), y);
    }, $elm$core$Tuple$mapFirst = F2($elm$core$Tuple$mapFirst_fn);
    var $author$project$GraphQL$Operations$Canonicalize$canonicalizeOperation_fn = function (refs, op, used, selection) {
        switch (selection.$) {
            case 0:
                var field = selection.a;
                var matched = function () {
                    if (!op) {
                        return $elm$core$Dict$get_fn($author$project$GraphQL$Operations$AST$nameToString(field.c), refs.hQ.hK);
                    }
                    else {
                        return $elm$core$Dict$get_fn($author$project$GraphQL$Operations$AST$nameToString(field.c), refs.hQ.hv);
                    }
                }();
                var desiredName = $author$project$GraphQL$Operations$CanonicalAST$nameToString($author$project$GraphQL$Operations$Canonicalize$convertName($elm$core$Maybe$withDefault_fn(field.c, field.gI)));
                if (matched.$ === 1) {
                    return _Utils_Tuple2(used, $author$project$GraphQL$Operations$Canonicalize$err(_List_fromArray([
                        $author$project$GraphQL$Operations$Canonicalize$error($author$project$GraphQL$Operations$Canonicalize$QueryUnknown($author$project$GraphQL$Operations$AST$nameToString(field.c)))
                    ])));
                }
                else {
                    var query = matched.a;
                    return $elm$core$Tuple$mapFirst_fn($author$project$GraphQL$Operations$Canonicalize$UsedNames$dropLevel, $author$project$GraphQL$Operations$Canonicalize$canonicalizeFieldType_fn(refs, field, used, query));
                }
            case 1:
                var frag = selection.a;
                return _Utils_Tuple2(used, $author$project$GraphQL$Operations$Canonicalize$err(_List_fromArray([
                    $author$project$GraphQL$Operations$Canonicalize$todo("Top level Fragments aren't suported yet!")
                ])));
            default:
                var inline = selection.a;
                return _Utils_Tuple2(used, $author$project$GraphQL$Operations$Canonicalize$err(_List_fromArray([
                    $author$project$GraphQL$Operations$Canonicalize$error($author$project$GraphQL$Operations$Canonicalize$FragmentInlineTopLevel({ dj: inline }))
                ])));
        }
    }, $author$project$GraphQL$Operations$Canonicalize$canonicalizeOperation = F4($author$project$GraphQL$Operations$Canonicalize$canonicalizeOperation_fn);
    var $author$project$GraphQL$Operations$AST$Val = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$GraphQL$Operations$AST$InList_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $author$project$GraphQL$Operations$AST$InList = F2($author$project$GraphQL$Operations$AST$InList_fn);
    var $author$project$GraphQL$Operations$AST$getWrapper_fn = function (t, wrap) {
        getWrapper: while (true) {
            switch (t.$) {
                case 0:
                    return wrap;
                case 1:
                    var inner = t.a;
                    var $temp$t = inner, $temp$wrap = wrap;
                    t = $temp$t;
                    wrap = $temp$wrap;
                    continue getWrapper;
                default:
                    var inner = t.a;
                    if (wrap.$ === 1) {
                        var required = wrap.a.ae;
                        var $temp$t = inner, $temp$wrap = $author$project$GraphQL$Operations$AST$Val({ ae: false });
                        t = $temp$t;
                        wrap = $temp$wrap;
                        continue getWrapper;
                    }
                    else {
                        var required = wrap.a.ae;
                        var wrapper = wrap.b;
                        var $temp$t = inner, $temp$wrap = $author$project$GraphQL$Operations$AST$InList_fn({ ae: false }, wrapper);
                        t = $temp$t;
                        wrap = $temp$wrap;
                        continue getWrapper;
                    }
            }
        }
    }, $author$project$GraphQL$Operations$AST$getWrapper = F2($author$project$GraphQL$Operations$AST$getWrapper_fn);
    var $author$project$GraphQL$Operations$AST$unwrap_fn = function (wrapper, str) {
        unwrap: while (true) {
            if (wrapper.$ === 1) {
                var required = wrapper.a.ae;
                return required ? (str + "!") : str;
            }
            else {
                var required = wrapper.a.ae;
                var inner = wrapper.b;
                if (required) {
                    var $temp$wrapper = inner, $temp$str = "[" + (str + "]!");
                    wrapper = $temp$wrapper;
                    str = $temp$str;
                    continue unwrap;
                }
                else {
                    var $temp$wrapper = inner, $temp$str = "[" + (str + "]");
                    wrapper = $temp$wrapper;
                    str = $temp$str;
                    continue unwrap;
                }
            }
        }
    }, $author$project$GraphQL$Operations$AST$unwrap = F2($author$project$GraphQL$Operations$AST$unwrap_fn);
    var $author$project$GraphQL$Operations$AST$typeToString_fn = function (wrapper, t) {
        typeToString: while (true) {
            switch (t.$) {
                case 0:
                    var str = t.a;
                    return $author$project$GraphQL$Operations$AST$unwrap_fn(wrapper, str);
                case 1:
                    var inner = t.a;
                    var $temp$wrapper = wrapper, $temp$t = inner;
                    wrapper = $temp$wrapper;
                    t = $temp$t;
                    continue typeToString;
                default:
                    var inner = t.a;
                    var $temp$wrapper = wrapper, $temp$t = inner;
                    wrapper = $temp$wrapper;
                    t = $temp$t;
                    continue typeToString;
            }
        }
    }, $author$project$GraphQL$Operations$AST$typeToString = F2($author$project$GraphQL$Operations$AST$typeToString_fn);
    var $author$project$GraphQL$Operations$AST$typeToGqlString = function (t) {
        return $author$project$GraphQL$Operations$AST$typeToString_fn($author$project$GraphQL$Operations$AST$getWrapper_fn(t, $author$project$GraphQL$Operations$AST$Val({ ae: true })), t);
    };
    var $author$project$GraphQL$Operations$Canonicalize$fragmentVariableErrors_fn = function (varDefs, frag) {
        var varSummary = {
            y: $elm$core$List$map_fn(function (def) {
                return {
                    c: $author$project$GraphQL$Operations$AST$nameToString(def.bL.c),
                    aK: $author$project$GraphQL$Operations$AST$typeToGqlString(def.aK)
                };
            }, varDefs),
            aC: $author$project$GraphQL$Operations$CanonicalAST$nameToString(frag.c),
            J: $elm$core$List$map_fn(function (_v3) {
                var name = _v3.a;
                var varType = _v3.b;
                return {
                    c: name,
                    aK: $author$project$GraphQL$Schema$typeToString(varType)
                };
            }, frag.h9)
        };
        var variableIssue = F2(function (_v2, existingIssue) {
            var name = _v2.a;
            var varType = _v2.b;
            if (!existingIssue.$) {
                return existingIssue;
            }
            else {
                var _v1 = $elm$core$List$head($elm$core$List$filter_fn(function (def) {
                    return _Utils_eq($author$project$GraphQL$Operations$AST$nameToString(def.bL.c), name);
                }, varDefs));
                if (_v1.$ === 1) {
                    return $elm$core$Maybe$Just(varSummary);
                }
                else {
                    var found = _v1.a;
                    return _Utils_eq($elm$core$String$toLower($author$project$GraphQL$Operations$AST$typeToGqlString(found.aK)), $elm$core$String$toLower($author$project$GraphQL$Schema$typeToString(varType))) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(varSummary);
                }
            }
        });
        return $elm$core$List$foldl_fn(variableIssue, $elm$core$Maybe$Nothing, frag.h9);
    }, $author$project$GraphQL$Operations$Canonicalize$fragmentVariableErrors = F2($author$project$GraphQL$Operations$Canonicalize$fragmentVariableErrors_fn);
    var $author$project$GraphQL$Operations$Canonicalize$find_fn = function (str, items) {
        find: while (true) {
            if (!items.b) {
                return $elm$core$Maybe$Nothing;
            }
            else {
                var _v1 = items.a;
                var key = _v1.a;
                var val = _v1.b;
                var remain = items.b;
                if (_Utils_eq(str, key)) {
                    return $elm$core$Maybe$Just(val);
                }
                else {
                    var $temp$str = str, $temp$items = remain;
                    str = $temp$str;
                    items = $temp$items;
                    continue find;
                }
            }
        }
    }, $author$project$GraphQL$Operations$Canonicalize$find = F2($author$project$GraphQL$Operations$Canonicalize$find_fn);
    var $author$project$GraphQL$Operations$Canonicalize$mergeVars_fn = function (varTypes, variableDefinitions) {
        var allNames = $elm$core$List$reverse($elm$core$List$foldl_fn_unwrapped(function (varName, found) {
            return $elm$core$List$member_fn(varName, found) ? found : _List_Cons(varName, found);
        }, _List_Nil, _Utils_ap($elm$core$List$map_fn(A2($elm$core$Basics$composeR, function ($) {
            return $.bL;
        }, A2($elm$core$Basics$composeR, function ($) {
            return $.c;
        }, $author$project$GraphQL$Operations$AST$nameToString)), variableDefinitions), $elm$core$List$map_fn($elm$core$Tuple$first, varTypes))));
        return $elm$core$List$map_fn(function (name) {
            return {
                cz: $elm$core$List$foldl_fn_unwrapped(function (def, found) {
                    if (found.$ === 1) {
                        return _Utils_eq($author$project$GraphQL$Operations$AST$nameToString(def.bL.c), name) ? $elm$core$Maybe$Just(def) : found;
                    }
                    else {
                        return found;
                    }
                }, $elm$core$Maybe$Nothing, variableDefinitions),
                dM: $author$project$GraphQL$Operations$Canonicalize$find_fn(name, varTypes),
                c: name
            };
        }, allNames);
    }, $author$project$GraphQL$Operations$Canonicalize$mergeVars = F2($author$project$GraphQL$Operations$Canonicalize$mergeVars_fn);
    var $author$project$GraphQL$Operations$Canonicalize$opTypeName = function (op) {
        if (!op) {
            return "Query";
        }
        else {
            return "Mutation";
        }
    };
    var $author$project$GraphQL$Operations$Canonicalize$Undeclared = function (a) {
        return { $: 2, a: a };
    };
    var $author$project$GraphQL$Operations$Canonicalize$UnexpectedType = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$GraphQL$Operations$Canonicalize$Unused = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GraphQL$Operations$Canonicalize$doTypesMatch_fn = function (schemaType, variableDefinition) {
        doTypesMatch: while (true) {
            switch (variableDefinition.$) {
                case 0:
                    var astName = variableDefinition.a;
                    switch (schemaType.$) {
                        case 0:
                            var schemaName = schemaType.a;
                            return _Utils_eq($author$project$GraphQL$Operations$AST$nameToString(astName), schemaName);
                        case 1:
                            var schemaName = schemaType.a;
                            return _Utils_eq($author$project$GraphQL$Operations$AST$nameToString(astName), schemaName);
                        case 2:
                            var schemaName = schemaType.a;
                            return _Utils_eq($author$project$GraphQL$Operations$AST$nameToString(astName), schemaName);
                        case 3:
                            var schemaName = schemaType.a;
                            return _Utils_eq($author$project$GraphQL$Operations$AST$nameToString(astName), schemaName);
                        case 4:
                            var schemaName = schemaType.a;
                            return _Utils_eq($author$project$GraphQL$Operations$AST$nameToString(astName), schemaName);
                        case 5:
                            var schemaName = schemaType.a;
                            return _Utils_eq($author$project$GraphQL$Operations$AST$nameToString(astName), schemaName);
                        case 6:
                            var innerSchema = schemaType.a;
                            return false;
                        default:
                            var innerSchema = schemaType.a;
                            var $temp$schemaType = innerSchema, $temp$variableDefinition = variableDefinition;
                            schemaType = $temp$schemaType;
                            variableDefinition = $temp$variableDefinition;
                            continue doTypesMatch;
                    }
                case 2:
                    var innerAST = variableDefinition.a;
                    if (schemaType.$ === 7) {
                        var innerSchema = schemaType.a;
                        var $temp$schemaType = innerSchema, $temp$variableDefinition = innerAST;
                        schemaType = $temp$schemaType;
                        variableDefinition = $temp$variableDefinition;
                        continue doTypesMatch;
                    }
                    else {
                        var otherwise = schemaType;
                        return false;
                    }
                default:
                    var innerAST = variableDefinition.a;
                    switch (schemaType.$) {
                        case 6:
                            var innerSchema = schemaType.a;
                            var $temp$schemaType = innerSchema, $temp$variableDefinition = innerAST;
                            schemaType = $temp$schemaType;
                            variableDefinition = $temp$variableDefinition;
                            continue doTypesMatch;
                        case 7:
                            var innerSchema = schemaType.a;
                            var $temp$schemaType = innerSchema, $temp$variableDefinition = variableDefinition;
                            schemaType = $temp$schemaType;
                            variableDefinition = $temp$variableDefinition;
                            continue doTypesMatch;
                        default:
                            return false;
                    }
            }
        }
    }, $author$project$GraphQL$Operations$Canonicalize$doTypesMatch = F2($author$project$GraphQL$Operations$Canonicalize$doTypesMatch_fn);
    var $author$project$GraphQL$Operations$Canonicalize$verifyVariables_fn = function (item, summary) {
        var _v0 = _Utils_Tuple2(item.cz, item.dM);
        if (!_v0.a.$) {
            if (!_v0.b.$) {
                var def = _v0.a.a;
                var inOp = _v0.b.a;
                var valid = {
                    gZ: def.gZ,
                    hR: inOp,
                    aK: def.aK,
                    bL: {
                        c: $author$project$GraphQL$Operations$Canonicalize$convertName(def.bL.c)
                    }
                };
                var typesMatch = $author$project$GraphQL$Operations$Canonicalize$doTypesMatch_fn(inOp, def.aK);
                var typeString = $author$project$GraphQL$Schema$typeToString(inOp);
                var suggestion = {
                    c: $author$project$GraphQL$Operations$AST$nameToString(def.bL.c),
                    aK: typeString
                };
                var declared = {
                    c: $author$project$GraphQL$Operations$AST$nameToString(def.bL.c),
                    aK: $elm$core$Maybe$Just($author$project$GraphQL$Operations$AST$typeToGqlString(def.aK))
                };
                return {
                    y: _List_Cons(declared, summary.y),
                    D: typesMatch ? summary.D : _List_Cons($author$project$GraphQL$Operations$Canonicalize$UnexpectedType({
                        cV: typeString,
                        z: $elm$core$Maybe$Just($author$project$GraphQL$Operations$AST$typeToGqlString(def.aK)),
                        c: item.c
                    }), summary.D),
                    O: typesMatch ? _List_Cons({
                        c: $author$project$GraphQL$Operations$AST$nameToString(def.bL.c),
                        aK: $author$project$GraphQL$Operations$AST$typeToGqlString(def.aK)
                    }, summary.O) : _List_Cons(suggestion, summary.O),
                    C: _List_Cons(valid, summary.C)
                };
            }
            else {
                var def = _v0.a.a;
                var _v1 = _v0.b;
                return {
                    y: _List_Cons({
                        c: $author$project$GraphQL$Operations$AST$nameToString(def.bL.c),
                        aK: $elm$core$Maybe$Nothing
                    }, summary.y),
                    D: _List_Cons($author$project$GraphQL$Operations$Canonicalize$Unused({ c: item.c, e5: _List_Nil }), summary.D),
                    O: summary.O,
                    C: summary.C
                };
            }
        }
        else {
            if (!_v0.b.$) {
                var _v2 = _v0.a;
                var inOp = _v0.b.a;
                var suggestion = {
                    c: item.c,
                    aK: $author$project$GraphQL$Schema$typeToString(inOp)
                };
                return {
                    y: summary.y,
                    D: _List_Cons($author$project$GraphQL$Operations$Canonicalize$Undeclared({ c: item.c, e5: _List_Nil }), summary.D),
                    O: _List_Cons(suggestion, summary.O),
                    C: summary.C
                };
            }
            else {
                var _v3 = _v0.a;
                var _v4 = _v0.b;
                return summary;
            }
        }
    }, $author$project$GraphQL$Operations$Canonicalize$verifyVariables = F2($author$project$GraphQL$Operations$Canonicalize$verifyVariables_fn);
    var $author$project$GraphQL$Operations$Canonicalize$canonicalizeDefinition_fn = function (refs, usedNames, def) {
        if (!def.$) {
            var details = def.a;
            return $elm$core$Maybe$Nothing;
        }
        else {
            var details = def.a;
            var operationType = function () {
                var _v6 = details.by;
                if (!_v6) {
                    return 0;
                }
                else {
                    return 1;
                }
            }();
            var globalOperationName = $elm$core$Maybe$map_fn($author$project$GraphQL$Operations$Canonicalize$convertName, details.c);
            var initialNameCache = $author$project$GraphQL$Operations$Canonicalize$UsedNames$getGlobalName_fn($elm$core$Maybe$withDefault_fn($author$project$GraphQL$Operations$Canonicalize$opTypeName(operationType), $elm$core$Maybe$map_fn($author$project$GraphQL$Operations$CanonicalAST$nameToString, globalOperationName)), usedNames);
            var fieldResult = $elm$core$List$foldl_fn_unwrapped(function (field, _v2) {
                var used = _v2.a;
                var result = _v2.b;
                if (result.$ === 1) {
                    var oldCache = result.a;
                    var oldItems = result.b;
                    var _v4 = $author$project$GraphQL$Operations$Canonicalize$canonicalizeOperation_fn(refs, details.by, used, field);
                    var newUsed = _v4.a;
                    var newResult = _v4.b;
                    return _Utils_Tuple2(newUsed, function () {
                        if (!newResult.$) {
                            var errorMessage = newResult.a;
                            return $author$project$GraphQL$Operations$Canonicalize$CanError(errorMessage);
                        }
                        else {
                            var newCache = newResult.a;
                            var validItem = newResult.b;
                            return $author$project$GraphQL$Operations$Canonicalize$CanSuccess_fn($author$project$GraphQL$Operations$Canonicalize$Cache$merge_fn(oldCache, newCache), _List_Cons(validItem, oldItems));
                        }
                    }());
                }
                else {
                    return _Utils_Tuple2(used, result);
                }
            }, _Utils_Tuple2(initialNameCache.J, $author$project$GraphQL$Operations$Canonicalize$emptySuccess), details.hc);
            return $elm$core$Maybe$Just(function () {
                var _v1 = fieldResult.b;
                if (_v1.$ === 1) {
                    var cache = _v1.a;
                    var fields = _v1.b;
                    var variableSummary = $elm$core$List$foldl_fn($author$project$GraphQL$Operations$Canonicalize$verifyVariables, { y: _List_Nil, D: _List_Nil, O: _List_Nil, C: _List_Nil }, $author$project$GraphQL$Operations$Canonicalize$mergeVars_fn(cache.a9, details.ib));
                    var fragmentVariableIssues = $elm$core$List$filterMap_fn($author$project$GraphQL$Operations$Canonicalize$fragmentVariableErrors(details.ib), $elm$core$List$map_fn(function ($) {
                        return $.dj;
                    }, cache.dt));
                    return (!$elm$core$List$isEmpty(variableSummary.D)) ? $author$project$GraphQL$Operations$Canonicalize$CanError(_List_fromArray([
                        $author$project$GraphQL$Operations$Canonicalize$error($author$project$GraphQL$Operations$Canonicalize$VariableIssueSummary(variableSummary))
                    ])) : ((!$elm$core$List$isEmpty(fragmentVariableIssues)) ? $author$project$GraphQL$Operations$Canonicalize$CanError($elm$core$List$map_fn(A2($elm$core$Basics$composeL, $author$project$GraphQL$Operations$Canonicalize$error, $author$project$GraphQL$Operations$Canonicalize$FragmentVariableIssue), fragmentVariableIssues)) : $author$project$GraphQL$Operations$Canonicalize$CanSuccess_fn(cache, {
                        aB: $elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$convertDirective, details.aB),
                        hc: fields,
                        dt: cache.dt,
                        c: globalOperationName,
                        by: operationType,
                        ib: variableSummary.C
                    }));
                }
                else {
                    var errorMsg = _v1.a;
                    return $author$project$GraphQL$Operations$Canonicalize$CanError(errorMsg);
                }
            }());
        }
    }, $author$project$GraphQL$Operations$Canonicalize$canonicalizeDefinition = F3($author$project$GraphQL$Operations$Canonicalize$canonicalizeDefinition_fn);
    var $author$project$GraphQL$Operations$CanonicalAST$FragmentInterface = function (a) {
        return { $: 2, a: a };
    };
    var $author$project$GraphQL$Operations$CanonicalAST$FragmentObject = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GraphQL$Operations$Canonicalize$FragmentTargetDoesntExist = function (a) {
        return { $: 16, a: a };
    };
    var $author$project$GraphQL$Operations$CanonicalAST$FragmentUnion = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$GraphQL$Operations$Canonicalize$canonicalizeFragment_fn = function (schema, paths, frag, _v0) {
        var usedNames = _v0.a;
        var currentResult = _v0.b;
        if (!currentResult.$) {
            var errMsg = currentResult.a;
            return _Utils_Tuple2(usedNames, $author$project$GraphQL$Operations$Canonicalize$CanError(errMsg));
        }
        else {
            var cache = currentResult.a;
            var existingFrags = currentResult.b;
            var typeCondition = $author$project$GraphQL$Operations$AST$nameToString(frag.h6);
            var fragName = $author$project$GraphQL$Operations$AST$nameToString(frag.c);
            var fragPaths = $author$project$Generate$Path$fragment({ al: paths.al, c: fragName, hH: paths.hH });
            var _v2 = $elm$core$Dict$get_fn(typeCondition, schema.hF);
            if (!_v2.$) {
                var obj = _v2.a;
                var selectionResult = $elm$core$List$foldl_fn(A2($author$project$GraphQL$Operations$Canonicalize$canonicalizeField, { hf: existingFrags, ad: paths, hQ: schema }, obj), {
                    e: $author$project$GraphQL$Operations$Canonicalize$UsedNames$addLevel_fn({
                        aR: false,
                        c: $author$project$GraphQL$Operations$AST$nameToString(frag.c)
                    }, usedNames),
                    fs: $author$project$GraphQL$Operations$Canonicalize$CanSuccess_fn($author$project$GraphQL$Operations$Canonicalize$Cache$empty, _List_Nil)
                }, frag.hT);
                return _Utils_Tuple2(selectionResult.e, function () {
                    var _v3 = selectionResult.fs;
                    if (_v3.$ === 1) {
                        var fragmentSpecificCache = _v3.a;
                        var selection = _v3.b;
                        return $author$project$GraphQL$Operations$Canonicalize$CanSuccess_fn(fragmentSpecificCache, $elm$core$Dict$insert_fn(fragName, {
                            aB: $elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$convertDirective, frag.aB),
                            dt: $elm$core$List$map_fn(A2($elm$core$Basics$composeR, function ($) {
                                return $.dj;
                            }, function ($) {
                                return $.c;
                            }), fragmentSpecificCache.dt),
                            b: fragPaths.eB,
                            c: $author$project$GraphQL$Operations$Canonicalize$convertName(frag.c),
                            hT: $author$project$GraphQL$Operations$CanonicalAST$FragmentObject({ hT: selection }),
                            h6: $author$project$GraphQL$Operations$Canonicalize$convertName(frag.h6),
                            h9: fragmentSpecificCache.a9
                        }, existingFrags));
                    }
                    else {
                        var errorMsg = _v3.a;
                        return $author$project$GraphQL$Operations$Canonicalize$CanError(errorMsg);
                    }
                }());
            }
            else {
                var _v4 = $elm$core$Dict$get_fn(typeCondition, schema.d_);
                if (!_v4.$) {
                    var _interface = _v4.a;
                    var variants = $elm$core$List$foldl_fn($author$project$GraphQL$Operations$Canonicalize$getInterfaceNames, _List_Nil, _interface.hk);
                    var _v5 = $author$project$GraphQL$Operations$Canonicalize$canonicalizeVariantSelection_fn({ hf: existingFrags, ad: paths, hQ: schema }, $author$project$GraphQL$Operations$Canonicalize$UsedNames$addLevel_fn({
                        aR: false,
                        c: $author$project$GraphQL$Operations$AST$nameToString(frag.c)
                    }, usedNames), { bd: _interface.bd, hc: _interface.hc, c: _interface.c }, frag.hT, variants);
                    var finalUsedNames = _v5.a;
                    var canVarSelectionResult = _v5.b;
                    return _Utils_Tuple2(finalUsedNames, function () {
                        if (canVarSelectionResult.$ === 1) {
                            var fragmentSpecificCache = canVarSelectionResult.a;
                            var selection = canVarSelectionResult.b;
                            return $author$project$GraphQL$Operations$Canonicalize$CanSuccess_fn(fragmentSpecificCache, $elm$core$Dict$insert_fn($author$project$GraphQL$Operations$AST$nameToString(frag.c), {
                                aB: $elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$convertDirective, frag.aB),
                                dt: $elm$core$List$map_fn(A2($elm$core$Basics$composeR, function ($) {
                                    return $.dj;
                                }, function ($) {
                                    return $.c;
                                }), fragmentSpecificCache.dt),
                                b: fragPaths.eB,
                                c: $author$project$GraphQL$Operations$Canonicalize$convertName(frag.c),
                                hT: $author$project$GraphQL$Operations$CanonicalAST$FragmentInterface(selection),
                                h6: $author$project$GraphQL$Operations$Canonicalize$convertName(frag.h6),
                                h9: fragmentSpecificCache.a9
                            }, existingFrags));
                        }
                        else {
                            var errorMsg = canVarSelectionResult.a;
                            return $author$project$GraphQL$Operations$Canonicalize$CanError(errorMsg);
                        }
                    }());
                }
                else {
                    var _v7 = $elm$core$Dict$get_fn(typeCondition, schema.h8);
                    if (!_v7.$) {
                        var union = _v7.a;
                        var variants = $elm$core$Maybe$withDefault_fn(_List_Nil, $author$project$GraphQL$Operations$Canonicalize$extractUnionTags_fn(union.gw, _List_Nil));
                        var _v8 = $author$project$GraphQL$Operations$Canonicalize$canonicalizeVariantSelection_fn({ hf: existingFrags, ad: paths, hQ: schema }, $author$project$GraphQL$Operations$Canonicalize$UsedNames$addLevel_fn({
                            aR: false,
                            c: $author$project$GraphQL$Operations$AST$nameToString(frag.c)
                        }, usedNames), { bd: union.bd, hc: _List_Nil, c: union.c }, frag.hT, variants);
                        var finalUsedNames = _v8.a;
                        var canVarSelectionResult = _v8.b;
                        return _Utils_Tuple2(finalUsedNames, function () {
                            if (canVarSelectionResult.$ === 1) {
                                var fragmentSpecificCache = canVarSelectionResult.a;
                                var selection = canVarSelectionResult.b;
                                return $author$project$GraphQL$Operations$Canonicalize$CanSuccess_fn(fragmentSpecificCache, $elm$core$Dict$insert_fn($author$project$GraphQL$Operations$AST$nameToString(frag.c), {
                                    aB: $elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$convertDirective, frag.aB),
                                    dt: $elm$core$List$map_fn(A2($elm$core$Basics$composeR, function ($) {
                                        return $.dj;
                                    }, function ($) {
                                        return $.c;
                                    }), fragmentSpecificCache.dt),
                                    b: fragPaths.eB,
                                    c: $author$project$GraphQL$Operations$Canonicalize$convertName(frag.c),
                                    hT: $author$project$GraphQL$Operations$CanonicalAST$FragmentUnion(selection),
                                    h6: $author$project$GraphQL$Operations$Canonicalize$convertName(frag.h6),
                                    h9: fragmentSpecificCache.a9
                                }, existingFrags));
                            }
                            else {
                                var errorMsg = canVarSelectionResult.a;
                                return $author$project$GraphQL$Operations$Canonicalize$CanError(errorMsg);
                            }
                        }());
                    }
                    else {
                        return _Utils_Tuple2(usedNames, $author$project$GraphQL$Operations$Canonicalize$CanError(_List_fromArray([
                            $author$project$GraphQL$Operations$Canonicalize$error($author$project$GraphQL$Operations$Canonicalize$FragmentTargetDoesntExist({
                                aC: $author$project$GraphQL$Operations$AST$nameToString(frag.c),
                                h6: $author$project$GraphQL$Operations$AST$nameToString(frag.h6)
                            }))
                        ])));
                    }
                }
            }
        }
    }, $author$project$GraphQL$Operations$Canonicalize$canonicalizeFragment = F4($author$project$GraphQL$Operations$Canonicalize$canonicalizeFragment_fn);
    var $author$project$GraphQL$Operations$AST$fragmentCountHelper_fn = function (selection, count) {
        switch (selection.$) {
            case 0:
                var field = selection.a;
                return $elm$core$List$foldl_fn($author$project$GraphQL$Operations$AST$fragmentCountHelper, count, field.hT);
            case 1:
                var spread = selection.a;
                return count + 1;
            default:
                var inline = selection.a;
                return $elm$core$List$foldl_fn($author$project$GraphQL$Operations$AST$fragmentCountHelper, count, inline.hT);
        }
    }, $author$project$GraphQL$Operations$AST$fragmentCountHelper = F2($author$project$GraphQL$Operations$AST$fragmentCountHelper_fn);
    var $author$project$GraphQL$Operations$AST$fragmentCount = function (fragment) {
        return $elm$core$List$foldl_fn($author$project$GraphQL$Operations$AST$fragmentCountHelper, 0, fragment.hT);
    };
    var $author$project$GraphQL$Operations$Canonicalize$FragmentDuplicateFound = function (a) {
        return { $: 17, a: a };
    };
    var $author$project$GraphQL$Operations$Canonicalize$getFragments_fn = function (schema, def, result) {
        if (result.$ === 1) {
            var errs = result.a;
            return $elm$core$Result$Err(errs);
        }
        else {
            var frags = result.a;
            if (def.$ === 1) {
                var op = def.a;
                return result;
            }
            else {
                var frag = def.a;
                var name = $author$project$GraphQL$Operations$AST$nameToString(frag.c);
                var _v2 = $elm$core$Dict$get_fn(name, frags);
                if (_v2.$ === 1) {
                    return $elm$core$Result$Ok($elm$core$Dict$insert_fn($author$project$GraphQL$Operations$AST$nameToString(frag.c), frag, frags));
                }
                else {
                    var found = _v2.a;
                    return $elm$core$Result$Err(_List_fromArray([
                        $author$project$GraphQL$Operations$Canonicalize$FragmentDuplicateFound({
                            de: $elm$core$List$length(frag.hT),
                            aO: $author$project$GraphQL$Operations$AST$nameToString(frag.c),
                            bj: $author$project$GraphQL$Operations$AST$nameToString(frag.h6),
                            fD: $elm$core$List$length(found.hT),
                            fE: $author$project$GraphQL$Operations$AST$nameToString(found.c),
                            bD: $author$project$GraphQL$Operations$AST$nameToString(found.h6)
                        })
                    ]));
                }
            }
        }
    }, $author$project$GraphQL$Operations$Canonicalize$getFragments = F3($author$project$GraphQL$Operations$Canonicalize$getFragments_fn);
    var $author$project$GraphQL$Operations$Canonicalize$UsedNames$init = function (names) {
        return {
            x: _List_Nil,
            ak: $elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$UsedNames$formatTypename, names),
            S: _List_Nil,
            au: _List_Nil
        };
    };
    var $author$project$GraphQL$Operations$Canonicalize$reduce_fn = function (isValid, items, res) {
        reduce: while (true) {
            if (!items.b) {
                return res;
            }
            else {
                var top = items.a;
                var remain = items.b;
                var _v1 = isValid(top);
                if (_v1.$ === 1) {
                    var $temp$isValid = isValid, $temp$items = remain, $temp$res = res;
                    isValid = $temp$isValid;
                    items = $temp$items;
                    res = $temp$res;
                    continue reduce;
                }
                else {
                    if (_v1.a.$ === 1) {
                        var _v2 = _v1.a;
                        var cache = _v2.a;
                        var valid = _v2.b;
                        if (res.$ === 1) {
                            var existingCache = res.a;
                            var existing = res.b;
                            var $temp$isValid = isValid, $temp$items = remain, $temp$res = $author$project$GraphQL$Operations$Canonicalize$CanSuccess_fn($author$project$GraphQL$Operations$Canonicalize$Cache$merge_fn(cache, existingCache), _List_Cons(valid, existing));
                            isValid = $temp$isValid;
                            items = $temp$items;
                            res = $temp$res;
                            continue reduce;
                        }
                        else {
                            return res;
                        }
                    }
                    else {
                        var errorMessage = _v1.a.a;
                        var newResult = function () {
                            if (res.$ === 1) {
                                return $author$project$GraphQL$Operations$Canonicalize$CanError(errorMessage);
                            }
                            else {
                                var existingErrors = res.a;
                                return $author$project$GraphQL$Operations$Canonicalize$CanError(_Utils_ap(errorMessage, existingErrors));
                            }
                        }();
                        var $temp$isValid = isValid, $temp$items = remain, $temp$res = newResult;
                        isValid = $temp$isValid;
                        items = $temp$items;
                        res = $temp$res;
                        continue reduce;
                    }
                }
            }
        }
    }, $author$project$GraphQL$Operations$Canonicalize$reduce = F3($author$project$GraphQL$Operations$Canonicalize$reduce_fn);
    var $author$project$GraphQL$Operations$Canonicalize$canonicalize_fn = function (schema, paths, doc) {
        var fragmentResult = $elm$core$List$foldl_fn($author$project$GraphQL$Operations$Canonicalize$getFragments(schema), $elm$core$Result$Ok($elm$core$Dict$empty), doc.g_);
        if (fragmentResult.$ === 1) {
            var fragErrorDetails = fragmentResult.a;
            return $elm$core$Result$Err($elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$error, fragErrorDetails));
        }
        else {
            var fragments = fragmentResult.a;
            var usedNames = $author$project$GraphQL$Operations$Canonicalize$UsedNames$init(_List_fromArray(["Input", "Response"]));
            var _v1 = $elm$core$List$foldl_fn(A2($author$project$GraphQL$Operations$Canonicalize$canonicalizeFragment, schema, paths), _Utils_Tuple2(usedNames, $author$project$GraphQL$Operations$Canonicalize$CanSuccess_fn($author$project$GraphQL$Operations$Canonicalize$Cache$empty, $elm$core$Dict$empty)), _List_sortBy_fn($author$project$GraphQL$Operations$AST$fragmentCount, $elm$core$Dict$values(fragments)));
            var canonicalizedFragments = _v1.b;
            if (canonicalizedFragments.$ === 1) {
                var fragmentCacne = canonicalizedFragments.a;
                var canonicalFrags = canonicalizedFragments.b;
                var canonicalizedDefinitions = $author$project$GraphQL$Operations$Canonicalize$reduce_fn(A2($author$project$GraphQL$Operations$Canonicalize$canonicalizeDefinition, { hf: canonicalFrags, ad: paths, hQ: schema }, usedNames), doc.g_, $author$project$GraphQL$Operations$Canonicalize$emptySuccess);
                if (canonicalizedDefinitions.$ === 1) {
                    var cache = canonicalizedDefinitions.a;
                    var defs = canonicalizedDefinitions.b;
                    return $elm$core$Result$Ok({
                        g_: defs,
                        hf: $elm$core$Dict$values(canonicalFrags)
                    });
                }
                else {
                    var errorMsg = canonicalizedDefinitions.a;
                    return $elm$core$Result$Err(errorMsg);
                }
            }
            else {
                var errorMsg = canonicalizedFragments.a;
                return $elm$core$Result$Err(errorMsg);
            }
        }
    }, $author$project$GraphQL$Operations$Canonicalize$canonicalize = F3($author$project$GraphQL$Operations$Canonicalize$canonicalize_fn);
    var $author$project$GraphQL$Operations$Canonicalize$color_fn = function (openCode, closeCode, content) {
        var delim = function (code) {
            return "\u001B[" + ($elm$core$String$fromInt(code) + "m");
        };
        return _Utils_ap(delim(openCode), _Utils_ap(content, delim(closeCode)));
    }, $author$project$GraphQL$Operations$Canonicalize$color = F3($author$project$GraphQL$Operations$Canonicalize$color_fn);
    var $author$project$GraphQL$Operations$Canonicalize$cyan = function (str) {
        return $author$project$GraphQL$Operations$Canonicalize$color_fn(36, 39, str);
    };
    var $author$project$GraphQL$Operations$Canonicalize$block = function (lines) {
        return "\n    " + ($elm$core$String$join_fn("\n    ", lines) + "\n");
    };
    var $author$project$GraphQL$Operations$Canonicalize$fragmentName = function (frag) {
        return $author$project$GraphQL$Operations$CanonicalAST$nameToString(frag.c) + (" on " + $author$project$GraphQL$Operations$CanonicalAST$nameToString(frag.h6));
    };
    var $author$project$GraphQL$Operations$Canonicalize$grey = function (str) {
        return $author$project$GraphQL$Operations$Canonicalize$color_fn(90, 39, str);
    };
    var $author$project$GraphQL$Operations$Canonicalize$yellow = function (str) {
        return $author$project$GraphQL$Operations$Canonicalize$color_fn(33, 39, str);
    };
    var $author$project$GraphQL$Operations$Canonicalize$renderDeclared = function (declared) {
        var _v0 = declared.aK;
        if (_v0.$ === 1) {
            return $author$project$GraphQL$Operations$Canonicalize$yellow("$" + declared.c);
        }
        else {
            var declaredType = _v0.a;
            return _Utils_ap($author$project$GraphQL$Operations$Canonicalize$yellow("$" + declared.c), _Utils_ap($author$project$GraphQL$Operations$Canonicalize$grey(": "), $author$project$GraphQL$Operations$Canonicalize$cyan(declaredType)));
        }
    };
    var $author$project$GraphQL$Operations$Canonicalize$renderIssue = function (issue) {
        switch (issue.$) {
            case 0:
                var _var = issue.a;
                return _List_fromArray([
                    $author$project$GraphQL$Operations$Canonicalize$yellow("$" + _var.c) + " is unused."
                ]);
            case 1:
                var _var = issue.a;
                var _v1 = _var.z;
                if (_v1.$ === 1) {
                    return _List_fromArray([
                        $author$project$GraphQL$Operations$Canonicalize$yellow("$" + _var.c) + " has no type declaration"
                    ]);
                }
                else {
                    var foundType = _v1.a;
                    var variableName = "$" + _var.c;
                    return _List_fromArray([
                        $author$project$GraphQL$Operations$Canonicalize$yellow(variableName) + (" is declared as " + $author$project$GraphQL$Operations$Canonicalize$cyan(foundType)),
                        $elm$core$String$repeat_fn($elm$core$String$length(variableName) - 6, " ") + ("but is expected to be " + $author$project$GraphQL$Operations$Canonicalize$cyan(_var.cV))
                    ]);
                }
            default:
                var _var = issue.a;
                return _List_fromArray([
                    $author$project$GraphQL$Operations$Canonicalize$yellow("$" + _var.c) + " is undeclared (missing from the top)."
                ]);
        }
    };
    var $author$project$GraphQL$Operations$Canonicalize$renderSuggestion = function (sug) {
        return _Utils_ap($author$project$GraphQL$Operations$Canonicalize$yellow("$" + sug.c), _Utils_ap($author$project$GraphQL$Operations$Canonicalize$grey(": "), $author$project$GraphQL$Operations$Canonicalize$cyan(sug.aK)));
    };
    var $author$project$GraphQL$Operations$Canonicalize$renderVariable = function (_var) {
        return _Utils_ap($author$project$GraphQL$Operations$Canonicalize$yellow(_var.c), _Utils_ap($author$project$GraphQL$Operations$Canonicalize$cyan(": "), $author$project$GraphQL$Operations$Canonicalize$yellow(_var.aK)));
    };
    var $author$project$GraphQL$Operations$AST$valueToString = function (v) {
        switch (v.$) {
            case 0:
                var str = v.a;
                return "\"" + (str + "\"");
            case 1:
                var i = v.a;
                return $elm$core$String$fromInt(i);
            case 2:
                var f = v.a;
                return $elm$core$String$fromFloat(f);
            case 3:
                if (v.a) {
                    return "true";
                }
                else {
                    return "false";
                }
            case 4:
                return "null";
            case 5:
                var name = v.a;
                return $author$project$GraphQL$Operations$AST$nameToString(name);
            case 6:
                var variable = v.a;
                return "$" + $author$project$GraphQL$Operations$AST$nameToString(variable.c);
            case 7:
                var fields = v.a;
                return "{ " + ($elm$core$String$join_fn(", ", $elm$core$List$map_fn(function (_v1) {
                    var name = _v1.a;
                    var value = _v1.b;
                    return $author$project$GraphQL$Operations$AST$nameToString(name) + (": " + $author$project$GraphQL$Operations$AST$valueToString(value));
                }, fields)) + " }");
            default:
                var vals = v.a;
                return "[ " + ($elm$core$String$join_fn(", ", $elm$core$List$map_fn($author$project$GraphQL$Operations$AST$valueToString, vals)) + " ]");
        }
    };
    var $author$project$GraphQL$Operations$Canonicalize$errorToString = function (_v0) {
        var details = _v0;
        var _v1 = details.cT;
        switch (_v1.$) {
            case 20:
                var msg = _v1.a;
                return "Todo: " + msg;
            case 1:
                var name = _v1.a;
                return $elm$core$String$join_fn("\n", _List_fromArray([
                    "I don't recognize this name:",
                    $author$project$GraphQL$Operations$Canonicalize$block(_List_fromArray([
                        $author$project$GraphQL$Operations$Canonicalize$yellow(name)
                    ]))
                ]));
            case 0:
                var name = _v1.a;
                return $elm$core$String$join_fn("\n", _List_fromArray([
                    "I don't recognize this query:",
                    $author$project$GraphQL$Operations$Canonicalize$block(_List_fromArray([
                        $author$project$GraphQL$Operations$Canonicalize$yellow(name)
                    ]))
                ]));
            case 2:
                var name = _v1.a;
                return $elm$core$String$join_fn("\n", _List_fromArray([
                    "I don't recognize this object:",
                    $author$project$GraphQL$Operations$Canonicalize$block(_List_fromArray([
                        $author$project$GraphQL$Operations$Canonicalize$yellow(name)
                    ]))
                ]));
            case 3:
                var name = _v1.a;
                return $elm$core$String$join_fn("\n", _List_fromArray([
                    "I don't recognize this interface:",
                    $author$project$GraphQL$Operations$Canonicalize$block(_List_fromArray([
                        $author$project$GraphQL$Operations$Canonicalize$yellow(name)
                    ]))
                ]));
            case 4:
                var name = _v1.a;
                return $elm$core$String$join_fn("\n", _List_fromArray([
                    "I don't recognize this union:",
                    $author$project$GraphQL$Operations$Canonicalize$block(_List_fromArray([
                        $author$project$GraphQL$Operations$Canonicalize$yellow(name)
                    ]))
                ]));
            case 7:
                var field = _v1.a;
                return $elm$core$String$join_fn("\n", _List_fromArray([
                    "You're trying to access",
                    $author$project$GraphQL$Operations$Canonicalize$block(_List_fromArray([
                        $author$project$GraphQL$Operations$Canonicalize$cyan(field.eO + ("." + field.c_))
                    ])),
                    "But I don't see a " + ($author$project$GraphQL$Operations$Canonicalize$cyan(field.c_) + (" field on " + $author$project$GraphQL$Operations$Canonicalize$cyan(field.eO)))
                ]));
            case 5:
                var deets = _v1.a;
                var _v2 = deets.ba;
                if (!_v2.b) {
                    return $elm$core$String$join_fn("\n", _List_fromArray([
                        $author$project$GraphQL$Operations$Canonicalize$yellow(deets.c_) + " has the following arguments:",
                        $author$project$GraphQL$Operations$Canonicalize$block($elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$yellow, deets.bJ)),
                        "but the GQL schema says it can't have any!",
                        "Maybe the arguments are on the wrong field?"
                    ]));
                }
                else {
                    return $elm$core$String$join_fn("\n", _List_fromArray([
                        $author$project$GraphQL$Operations$Canonicalize$yellow(deets.c_) + " has these arguments, but I don't recognize them!",
                        $author$project$GraphQL$Operations$Canonicalize$block($elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$yellow, deets.bJ)),
                        "Here are the arguments that this field can have:",
                        $author$project$GraphQL$Operations$Canonicalize$block($elm$core$List$map_fn(function (opt) {
                            return $author$project$GraphQL$Operations$Canonicalize$yellow(opt.c) + (": " + $author$project$GraphQL$Operations$Canonicalize$cyan($author$project$GraphQL$Schema$typeToString(opt.aK)));
                        }, deets.ba))
                    ]));
                }
            case 6:
                var deets = _v1.a;
                return $elm$core$String$join_fn("\n", _List_fromArray([
                    "This field isn't selecting anything",
                    $author$project$GraphQL$Operations$Canonicalize$block(_List_fromArray([
                        $author$project$GraphQL$Operations$Canonicalize$yellow(deets.c_)
                    ])),
                    "But it is a " + ($author$project$GraphQL$Operations$Canonicalize$yellow(deets.c7) + ", which needs to select some fields."),
                    "You can either remove it or select some of the following fields:",
                    $author$project$GraphQL$Operations$Canonicalize$block($elm$core$List$map_fn(function (opt) {
                        return $author$project$GraphQL$Operations$Canonicalize$yellow(opt.c_) + (": " + $author$project$GraphQL$Operations$Canonicalize$cyan(opt.aK));
                    }, deets.e0))
                ]));
            case 10:
                var deets = _v1.a;
                return $elm$core$String$join_fn("\n", _List_fromArray([
                    "I found two fields that have the same name:",
                    $author$project$GraphQL$Operations$Canonicalize$block(_List_fromArray([
                        $author$project$GraphQL$Operations$Canonicalize$yellow(deets.bi)
                    ])),
                    "Add an alias to one of them so there's no confusion!"
                ]));
            case 11:
                var deets = _v1.a;
                return $elm$core$String$join_fn("\n", _List_fromArray([
                    "There are still some variants that have not been covered for " + $author$project$GraphQL$Operations$Canonicalize$cyan(deets.h7),
                    $author$project$GraphQL$Operations$Canonicalize$block($elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$yellow, deets.hr)),
                    "Add them to your query so that we know what data to select if they show up!"
                ]));
            case 12:
                var deets = _v1.a;
                return $elm$core$String$join_fn("\n", _List_fromArray([
                    $author$project$GraphQL$Operations$Canonicalize$cyan(deets.h0) + (" needs to select for " + $author$project$GraphQL$Operations$Canonicalize$yellow("__typename")),
                    $author$project$GraphQL$Operations$Canonicalize$block(_List_fromArray([
                        "... on " + (deets.h0 + " {"),
                        $author$project$GraphQL$Operations$Canonicalize$yellow("    __typename"),
                        $author$project$GraphQL$Operations$Canonicalize$grey("    # ... other fields"),
                        "}"
                    ])),
                    "If we don't have this, then we can't be totally sure what type is returned."
                ]));
            case 13:
                var deets = _v1.a;
                return $elm$core$String$join_fn("\n", _List_fromArray([
                    $author$project$GraphQL$Operations$Canonicalize$cyan(deets.h0) + " needs to select at least one field.",
                    $author$project$GraphQL$Operations$Canonicalize$block(_List_fromArray([
                        "... on " + (deets.h0 + " {"),
                        $author$project$GraphQL$Operations$Canonicalize$yellow("    __typename"),
                        "}"
                    ])),
                    "If you don't need any more data, just add " + $author$project$GraphQL$Operations$Canonicalize$yellow("__typename")
                ]));
            case 14:
                var deets = _v1.a;
                return $elm$core$String$join_fn("\n", _List_fromArray([
                    $author$project$GraphQL$Operations$Canonicalize$cyan(deets.b0) + " has the wrong type. I was expecting:",
                    $author$project$GraphQL$Operations$Canonicalize$block(_List_fromArray([
                        $author$project$GraphQL$Operations$Canonicalize$yellow($author$project$GraphQL$Schema$typeToString(deets.hQ))
                    ])),
                    "But found:",
                    $author$project$GraphQL$Operations$Canonicalize$block(_List_fromArray([
                        $author$project$GraphQL$Operations$Canonicalize$yellow($author$project$GraphQL$Operations$AST$valueToString(deets.z))
                    ]))
                ]));
            case 15:
                var deets = _v1.a;
                var fragmentsThatMatchThisObject = $elm$core$List$filter_fn(function (frag) {
                    return _Utils_eq(deets.eO, $author$project$GraphQL$Operations$CanonicalAST$nameToString(frag.h6));
                }, deets.e0);
                var fragmentsThatMatchThisName = $elm$core$List$filter_fn(function (frag) {
                    return _Utils_eq(deets.z, $author$project$GraphQL$Operations$CanonicalAST$nameToString(frag.c));
                }, deets.e0);
                if (!fragmentsThatMatchThisObject.b) {
                    var _v4 = deets.e0;
                    if (!_v4.b) {
                        return $elm$core$String$join_fn("\n", _List_fromArray([
                            "I found a usage of a fragment named " + ($author$project$GraphQL$Operations$Canonicalize$cyan(deets.z) + ", but I don't see any fragments defined in this document!"),
                            "You could add one by adding this if you want.",
                            $author$project$GraphQL$Operations$Canonicalize$block(_List_fromArray([
                                $author$project$GraphQL$Operations$Canonicalize$cyan("fragment") + (" on " + ($author$project$GraphQL$Operations$Canonicalize$yellow(deets.eO) + " {")),
                                "    # select some fields here!",
                                "}"
                            ])),
                            "Check out https://graphql.org/learn/queries/#fragments to learn more!"
                        ]));
                    }
                    else {
                        var specifics = function () {
                            if (!fragmentsThatMatchThisName.b) {
                                return _List_fromArray([
                                    "Here are the fragments I know about.",
                                    $author$project$GraphQL$Operations$Canonicalize$block($elm$core$List$map_fn(A2($elm$core$Basics$composeL, $author$project$GraphQL$Operations$Canonicalize$yellow, $author$project$GraphQL$Operations$Canonicalize$fragmentName), deets.e0))
                                ]);
                            }
                            else {
                                if (!fragmentsThatMatchThisName.b.b) {
                                    var single = fragmentsThatMatchThisName.a;
                                    return _List_fromArray([
                                        "I found this fragment, is it selecting from the wrong thing?",
                                        $author$project$GraphQL$Operations$Canonicalize$block($elm$core$List$map_fn(A2($elm$core$Basics$composeL, $author$project$GraphQL$Operations$Canonicalize$yellow, $author$project$GraphQL$Operations$Canonicalize$fragmentName), fragmentsThatMatchThisName))
                                    ]);
                                }
                                else {
                                    var multiple = fragmentsThatMatchThisName;
                                    return _List_fromArray([
                                        "Here are the fragments I know about.",
                                        $author$project$GraphQL$Operations$Canonicalize$block($elm$core$List$map_fn(A2($elm$core$Basics$composeL, $author$project$GraphQL$Operations$Canonicalize$yellow, $author$project$GraphQL$Operations$Canonicalize$fragmentName), deets.e0))
                                    ]);
                                }
                            }
                        }();
                        var preamble = _List_fromArray([
                            $author$project$GraphQL$Operations$Canonicalize$cyan("..." + deets.z) + " looks a little weird to me.",
                            "From where it is in the query, it should select from " + ($author$project$GraphQL$Operations$Canonicalize$yellow(deets.eO) + "."),
                            "But I wasn't able to find a fragment with this name that selects from " + ($author$project$GraphQL$Operations$Canonicalize$yellow(deets.eO) + ".")
                        ]);
                        return $elm$core$String$join_fn("\n", _Utils_ap(preamble, specifics));
                    }
                }
                else {
                    if (!fragmentsThatMatchThisObject.b.b) {
                        var single = fragmentsThatMatchThisObject.a;
                        return $elm$core$String$join_fn("\n", _List_fromArray([
                            "I don't recognize the fragment named " + ($author$project$GraphQL$Operations$Canonicalize$cyan(deets.z) + "."),
                            "Do you mean?",
                            $author$project$GraphQL$Operations$Canonicalize$block($elm$core$List$map_fn(A2($elm$core$Basics$composeL, $author$project$GraphQL$Operations$Canonicalize$yellow, $author$project$GraphQL$Operations$Canonicalize$fragmentName), fragmentsThatMatchThisObject))
                        ]));
                    }
                    else {
                        return $elm$core$String$join_fn("\n", _List_fromArray([
                            "I don't recognize the fragment named " + ($author$project$GraphQL$Operations$Canonicalize$cyan(deets.z) + "."),
                            "Do you mean one of these?",
                            $author$project$GraphQL$Operations$Canonicalize$block($elm$core$List$map_fn(A2($elm$core$Basics$composeL, $author$project$GraphQL$Operations$Canonicalize$yellow, $author$project$GraphQL$Operations$Canonicalize$fragmentName), fragmentsThatMatchThisObject))
                        ]));
                    }
                }
            case 16:
                var deets = _v1.a;
                return $elm$core$String$join_fn("\n", _List_fromArray([
                    "I found this fragment:",
                    $author$project$GraphQL$Operations$Canonicalize$block(_List_fromArray([
                        "fragment " + ($author$project$GraphQL$Operations$Canonicalize$cyan(deets.aC) + (" on " + $author$project$GraphQL$Operations$Canonicalize$yellow(deets.h6)))
                    ])),
                    "But I wasn't able to find " + ($author$project$GraphQL$Operations$Canonicalize$yellow(deets.h6) + " in the schema."),
                    "Is there a typo?"
                ]));
            case 17:
                var deets = _v1.a;
                return (_Utils_eq(deets.bj, deets.bD) && _Utils_eq(deets.de, deets.fD)) ? $elm$core$String$join_fn("\n", _List_fromArray([
                    "I found two fragments with the name " + $author$project$GraphQL$Operations$Canonicalize$yellow(deets.aO),
                    "Maybe they're just duplicates?",
                    "Fragments need to have globally unique names. Can you rename one?"
                ])) : $elm$core$String$join_fn("\n", _List_fromArray([
                    "I found two fragments with the name " + $author$project$GraphQL$Operations$Canonicalize$yellow(deets.aO),
                    $author$project$GraphQL$Operations$Canonicalize$block(_List_fromArray([
                        "fragment " + ($author$project$GraphQL$Operations$Canonicalize$cyan(deets.aO) + (" on " + $author$project$GraphQL$Operations$Canonicalize$yellow(deets.bj))),
                        "fragment " + ($author$project$GraphQL$Operations$Canonicalize$cyan(deets.fE) + (" on " + $author$project$GraphQL$Operations$Canonicalize$yellow(deets.bD)))
                    ])),
                    "Fragments need to have globally unique names. Can you rename one?"
                ]));
            case 18:
                var deets = _v1.a;
                return $elm$core$String$join_fn("\n", _List_fromArray([
                    "I found a fragment named " + $author$project$GraphQL$Operations$Canonicalize$yellow($author$project$GraphQL$Operations$AST$nameToString(deets.dj.h0)),
                    "but it is inside the object named " + ($author$project$GraphQL$Operations$Canonicalize$cyan(deets.eR) + ", which is neither an interface or a union."),
                    "Is it in the right place?"
                ]));
            case 19:
                var deets = _v1.a;
                return $elm$core$String$join_fn("\n", _List_fromArray([
                    "I found an inline fragment named " + ($author$project$GraphQL$Operations$Canonicalize$yellow($author$project$GraphQL$Operations$AST$nameToString(deets.dj.h0)) + " at the top level of the query."),
                    "But this sort of fragment must be inside a union or an interface.",
                    "Is it in the right place?"
                ]));
            case 8:
                var summary = _v1.a;
                var _v6 = summary.y;
                if (!_v6.b) {
                    return $elm$core$String$join_fn("\n", _List_fromArray([
                        "I wasn't able to find any declared variables.",
                        "Here's what I think the variables should be:",
                        $author$project$GraphQL$Operations$Canonicalize$block($elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$renderSuggestion, $elm$core$List$reverse(summary.O)))
                    ]));
                }
                else {
                    return $elm$core$String$join_fn("\n", _List_fromArray([
                        "I found the following variables:",
                        $author$project$GraphQL$Operations$Canonicalize$block($elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$renderDeclared, $elm$core$List$reverse(summary.y))),
                        ($elm$core$List$length(summary.D) === 1) ? "But I ran into an issue:" : "But I ran into a few issues:",
                        $author$project$GraphQL$Operations$Canonicalize$block($elm$core$List$concatMap_fn($author$project$GraphQL$Operations$Canonicalize$renderIssue, summary.D)),
                        "Here's what I think the variables should be:",
                        $author$project$GraphQL$Operations$Canonicalize$block($elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$renderSuggestion, $elm$core$List$reverse(summary.O)))
                    ]));
                }
            default:
                var summary = _v1.a;
                return $elm$core$String$join_fn("\n", _List_fromArray([
                    "It looks like the " + ($author$project$GraphQL$Operations$Canonicalize$cyan(summary.aC) + " fragment uses the following variables:"),
                    $author$project$GraphQL$Operations$Canonicalize$block($elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$renderVariable, summary.J)),
                    "But the only variables that are declared are",
                    $author$project$GraphQL$Operations$Canonicalize$block($elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$renderVariable, summary.y))
                ]));
        }
    };
    var $author$project$GraphQL$Operations$Parse$problemToString = function (p) {
        switch (p.$) {
            case 0:
                var s = p.a;
                return "expecting '" + (s + "'");
            case 1:
                return "expecting int";
            case 2:
                return "expecting hex";
            case 3:
                return "expecting octal";
            case 4:
                return "expecting binary";
            case 5:
                return "expecting float";
            case 6:
                return "expecting number";
            case 7:
                return "expecting variable";
            case 8:
                var s = p.a;
                return "expecting symbol '" + (s + "'");
            case 9:
                var s = p.a;
                return "expecting keyword '" + (s + "'");
            case 10:
                return "expecting end";
            case 11:
                return "unexpected char";
            case 12:
                var s = p.a;
                return "problem " + s;
            default:
                return "bad repeat";
        }
    };
    var $author$project$GraphQL$Operations$Parse$deadEndToString = function (deadend) {
        return $author$project$GraphQL$Operations$Parse$problemToString(deadend.hJ) + (" at row " + ($elm$core$String$fromInt(deadend.fv) + (", col " + $elm$core$String$fromInt(deadend.gS))));
    };
    var $elm$core$List$intersperse_fn = function (sep, xs) {
        if (!xs.b) {
            return xs;
        }
        var tmp = _List_Cons(undefined, _List_Nil);
        var end = tmp;
        end.b = _List_Cons(xs.a, _List_Nil);
        end = end.b;
        xs = xs.b;
        for (; xs.b; xs = xs.b) {
            var valNode = _List_Cons(xs.a, _List_Nil);
            var sepNode = _List_Cons(sep, valNode);
            end.b = sepNode;
            end = valNode;
        }
        return tmp.b;
    }, $elm$core$List$intersperse = F2($elm$core$List$intersperse_fn);
    var $author$project$GraphQL$Operations$Parse$errorToString = function (deadEnds) {
        return $elm$core$String$concat($elm$core$List$intersperse_fn("; ", $elm$core$List$map_fn($author$project$GraphQL$Operations$Parse$deadEndToString, deadEnds)));
    };
    var $author$project$Generate$formatTitle_fn = function (title, path) {
        var middle = $elm$core$String$repeat_fn(78 - (($elm$core$String$length(title) + 2) + $elm$core$String$length(path)), "-");
        return _Utils_ap(title, _Utils_ap(middle, path));
    }, $author$project$Generate$formatTitle = F2($author$project$Generate$formatTitle_fn);
    var $mdgriffith$elm_codegen$Internal$Compiler$Comment = function (a) {
        return { $: 1, a: a };
    };
    var $mdgriffith$elm_codegen$Elm$comment = function (content) {
        return $mdgriffith$elm_codegen$Internal$Compiler$Comment("{- " + (content + " -}"));
    };
    var $author$project$GraphQL$Operations$GenerateSelection$generateTypesForFields_fn = function (fn, generated, fields) {
        generateTypesForFields: while (true) {
            if (!fields.b) {
                return generated;
            }
            else {
                var top = fields.a;
                var remaining = fields.b;
                var newStuff = fn(top);
                var $temp$fn = fn, $temp$generated = _Utils_ap(generated, newStuff), $temp$fields = remaining;
                fn = $temp$fn;
                generated = $temp$generated;
                fields = $temp$fields;
                continue generateTypesForFields;
            }
        }
    }, $author$project$GraphQL$Operations$GenerateSelection$generateTypesForFields = F3($author$project$GraphQL$Operations$GenerateSelection$generateTypesForFields_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$removeTypename = function (field) {
        if (!field.$) {
            var details = field.a;
            return $author$project$GraphQL$Operations$CanonicalAST$nameToString(details.c) !== "__typename";
        }
        else {
            return true;
        }
    };
    var $author$project$GraphQL$Operations$CanonicalAST$getAliasedName = function (details) {
        return $author$project$GraphQL$Operations$CanonicalAST$nameToString($elm$core$Maybe$withDefault_fn(details.c, details.gI));
    };
    var $author$project$GraphQL$Operations$CanonicalAST$isTypeNameSelection = function (field) {
        if (!field.$) {
            var details = field.a;
            return $author$project$GraphQL$Operations$CanonicalAST$nameToString(details.c) === "__typename";
        }
        else {
            var frag = field.a;
            return false;
        }
    };
    var $author$project$GraphQL$Operations$GenerateSelection$enumType_fn = function (namespace, enumName) {
        return $mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_fromArray([
            namespace.cQ,
            "Enum",
            $author$project$Utils$String$formatTypename(enumName)
        ]), enumName);
    }, $author$project$GraphQL$Operations$GenerateSelection$enumType = F2($author$project$GraphQL$Operations$GenerateSelection$enumType_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$schemaTypeToPrefab_fn = function (namespace, schemaType) {
        switch (schemaType.$) {
            case 0:
                var scalarName = schemaType.a;
                return $author$project$Generate$Scalar$type__fn(namespace, scalarName);
            case 1:
                var input = schemaType.a;
                return $mdgriffith$elm_codegen$Elm$Annotation$unit;
            case 2:
                var obj = schemaType.a;
                return $mdgriffith$elm_codegen$Elm$Annotation$unit;
            case 3:
                var name = schemaType.a;
                return $mdgriffith$elm_codegen$Elm$Annotation$unit;
            case 4:
                var name = schemaType.a;
                return $mdgriffith$elm_codegen$Elm$Annotation$unit;
            case 5:
                var name = schemaType.a;
                return $mdgriffith$elm_codegen$Elm$Annotation$unit;
            case 6:
                var inner = schemaType.a;
                return $mdgriffith$elm_codegen$Elm$Annotation$list($author$project$GraphQL$Operations$GenerateSelection$schemaTypeToPrefab_fn(namespace, inner));
            default:
                var inner = schemaType.a;
                return $mdgriffith$elm_codegen$Elm$Annotation$maybe($author$project$GraphQL$Operations$GenerateSelection$schemaTypeToPrefab_fn(namespace, inner));
        }
    }, $author$project$GraphQL$Operations$GenerateSelection$schemaTypeToPrefab = F2($author$project$GraphQL$Operations$GenerateSelection$schemaTypeToPrefab_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$selectionAliasedAnnotation_fn = function (namespace, field) {
        var _v0 = field.hU;
        if (!_v0.$) {
            var fragment = _v0.a;
            return $mdgriffith$elm_codegen$Elm$Annotation$named_fn(fragment.b, fragment.c);
        }
        else {
            var _v1 = field.hT;
            switch (_v1.$) {
                case 2:
                    var obj = _v1.a;
                    return $mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, $author$project$GraphQL$Operations$CanonicalAST$nameToString(field.hg));
                case 0:
                    var type_ = _v1.a;
                    return $author$project$GraphQL$Operations$GenerateSelection$schemaTypeToPrefab_fn(namespace, type_);
                case 1:
                    var _enum = _v1.a;
                    return $author$project$GraphQL$Operations$GenerateSelection$enumType_fn(namespace, _enum.g3);
                case 3:
                    return $mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, $author$project$GraphQL$Operations$CanonicalAST$nameToString(field.hg));
                default:
                    return $mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, $author$project$GraphQL$Operations$CanonicalAST$nameToString(field.hg));
            }
        }
    }, $author$project$GraphQL$Operations$GenerateSelection$selectionAliasedAnnotation = F2($author$project$GraphQL$Operations$GenerateSelection$selectionAliasedAnnotation_fn);
    var $author$project$Generate$Input$wrapElmType_fn = function (wrapper, exp) {
        switch (wrapper.$) {
            case 1:
                var inner = wrapper.a;
                return $mdgriffith$elm_codegen$Elm$Annotation$list($author$project$Generate$Input$wrapElmType_fn(inner, exp));
            case 2:
                var inner = wrapper.a;
                return $mdgriffith$elm_codegen$Elm$Annotation$maybe($author$project$Generate$Input$wrapElmType_fn(inner, exp));
            default:
                return exp;
        }
    }, $author$project$Generate$Input$wrapElmType = F2($author$project$Generate$Input$wrapElmType_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$fieldAliasedAnnotation_fn = function (namespace, field) {
        if ($author$project$GraphQL$Operations$CanonicalAST$isTypeNameSelection(field)) {
            return _List_Nil;
        }
        else {
            if (!field.$) {
                var details = field.a;
                return _List_fromArray([
                    _Utils_Tuple2($author$project$Utils$String$formatValue($author$project$GraphQL$Operations$CanonicalAST$getAliasedName(details)), $author$project$Generate$Input$wrapElmType_fn(details.gF, $author$project$GraphQL$Operations$GenerateSelection$selectionAliasedAnnotation_fn(namespace, details)))
                ]);
            }
            else {
                var frag = field.a;
                var _v1 = frag.dj.hT;
                switch (_v1.$) {
                    case 0:
                        var selection = _v1.a.hT;
                        return $elm$core$List$concatMap_fn($author$project$GraphQL$Operations$GenerateSelection$fieldAliasedAnnotation(namespace), selection);
                    case 1:
                        var union = _v1.a;
                        return $elm$core$List$concatMap_fn($author$project$GraphQL$Operations$GenerateSelection$fieldAliasedAnnotation(namespace), union.hT);
                    default:
                        var _interface = _v1.a;
                        if ((!$elm$core$List$isEmpty(_interface.gw)) || (!$elm$core$List$isEmpty(_interface.ff))) {
                            var name = $author$project$GraphQL$Operations$CanonicalAST$nameToString(frag.dj.c);
                            return _Utils_ap($elm$core$List$concatMap_fn($author$project$GraphQL$Operations$GenerateSelection$fieldAliasedAnnotation(namespace), _interface.hT), _List_fromArray([
                                _Utils_Tuple2(name, $mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, name + "_Specifics"))
                            ]));
                        }
                        else {
                            return $elm$core$List$concatMap_fn($author$project$GraphQL$Operations$GenerateSelection$fieldAliasedAnnotation(namespace), _interface.hT);
                        }
                }
            }
        }
    }, $author$project$GraphQL$Operations$GenerateSelection$fieldAliasedAnnotation = F2($author$project$GraphQL$Operations$GenerateSelection$fieldAliasedAnnotation_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$aliasedFieldRecord_fn = function (namespace, sel, fields) {
        return $author$project$GraphQL$Operations$CanonicalAST$isTypeNameSelection(sel) ? fields : _Utils_ap($author$project$GraphQL$Operations$GenerateSelection$fieldAliasedAnnotation_fn(namespace, sel), fields);
    }, $author$project$GraphQL$Operations$GenerateSelection$aliasedFieldRecord = F3($author$project$GraphQL$Operations$GenerateSelection$aliasedFieldRecord_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$toAliasedFields_fn = function (namespace, additionalFields, selection) {
        return $mdgriffith$elm_codegen$Elm$Annotation$record($elm$core$List$foldl_fn($author$project$GraphQL$Operations$GenerateSelection$aliasedFieldRecord(namespace), additionalFields, selection));
    }, $author$project$GraphQL$Operations$GenerateSelection$toAliasedFields = F3($author$project$GraphQL$Operations$GenerateSelection$toAliasedFields_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$unionVariantName = function (tag) {
        return $author$project$GraphQL$Operations$CanonicalAST$nameToString(tag.hg);
    };
    var $author$project$GraphQL$Operations$GenerateSelection$genAliasedTypes_fn = function (namespace, fieldOrFrag) {
        if (fieldOrFrag.$ === 1) {
            var frag = fieldOrFrag.a;
            return _List_Nil;
        }
        else {
            var field = fieldOrFrag.a;
            var _v3 = field.hU;
            if (!_v3.$) {
                var fragmentSelected = _v3.a;
                return _List_Nil;
            }
            else {
                var name = $author$project$GraphQL$Operations$CanonicalAST$nameToString(field.hg);
                var _v4 = field.hT;
                switch (_v4.$) {
                    case 2:
                        var selection = _v4.a;
                        var newDecls = $author$project$GraphQL$Operations$GenerateSelection$generateTypesForFields_fn($author$project$GraphQL$Operations$GenerateSelection$genAliasedTypes(namespace), _List_Nil, selection);
                        var fieldResult = $author$project$GraphQL$Operations$GenerateSelection$toAliasedFields_fn(namespace, _List_Nil, selection);
                        return _List_Cons($mdgriffith$elm_codegen$Elm$expose($mdgriffith$elm_codegen$Elm$alias_fn(name, fieldResult)), newDecls);
                    case 3:
                        var union = _v4.a;
                        var newDecls = $author$project$GraphQL$Operations$GenerateSelection$generateTypesForFields_fn($author$project$GraphQL$Operations$GenerateSelection$genAliasedTypes(namespace), _List_Nil, union.hT);
                        var ghostVariants = $elm$core$List$map_fn(A2($elm$core$Basics$composeL, $mdgriffith$elm_codegen$Elm$variant, $author$project$GraphQL$Operations$GenerateSelection$unionVariantName), union.ff);
                        var _final = $elm$core$List$foldl_fn($author$project$GraphQL$Operations$GenerateSelection$unionVars(namespace), { t: _List_Nil, gw: _List_Nil }, union.gw);
                        return _List_Cons($mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                            g9: true,
                            hj: $elm$core$Maybe$Just("unions")
                        }, $mdgriffith$elm_codegen$Elm$customType_fn(name, _Utils_ap(_final.gw, ghostVariants))), _Utils_ap(_final.t, newDecls));
                    case 4:
                        var _interface = _v4.a;
                        var selectingForVariants = function () {
                            var _v5 = _interface.gw;
                            if (!_v5.b) {
                                return false;
                            }
                            else {
                                return true;
                            }
                        }();
                        var newDecls = $author$project$GraphQL$Operations$GenerateSelection$generateTypesForFields_fn($author$project$GraphQL$Operations$GenerateSelection$genAliasedTypes(namespace), _List_Nil, _interface.hT);
                        var interfaceRecord = $author$project$GraphQL$Operations$GenerateSelection$toAliasedFields_fn(namespace, selectingForVariants ? _List_fromArray([
                            _Utils_Tuple2("specifics_", $mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, name + "_Specifics"))
                        ]) : _List_Nil, _interface.hT);
                        var ghostVariants = $elm$core$List$map_fn(A2($elm$core$Basics$composeL, $mdgriffith$elm_codegen$Elm$variant, $author$project$GraphQL$Operations$GenerateSelection$unionVariantName), _interface.ff);
                        var _final = $elm$core$List$foldl_fn($author$project$GraphQL$Operations$GenerateSelection$interfaceVariants(namespace), { t: _List_Nil, gw: _List_Nil }, _interface.gw);
                        var withSpecificType = function (existingList) {
                            return selectingForVariants ? _List_Cons($mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                                g9: true,
                                hj: $elm$core$Maybe$Just("unions")
                            }, $mdgriffith$elm_codegen$Elm$customType_fn(name + "_Specifics", _Utils_ap(_final.gw, ghostVariants))), existingList) : existingList;
                        };
                        return _List_Cons($mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                            g9: true,
                            hj: $elm$core$Maybe$Just("necessary")
                        }, $mdgriffith$elm_codegen$Elm$alias_fn(name, interfaceRecord)), withSpecificType(_Utils_ap(_final.t, newDecls)));
                    default:
                        return _List_Nil;
                }
            }
        }
    }, $author$project$GraphQL$Operations$GenerateSelection$genAliasedTypes = F2($author$project$GraphQL$Operations$GenerateSelection$genAliasedTypes_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$interfaceVariants_fn = function (namespace, unionCase, gathered) {
        var _v1 = $elm$core$List$filter_fn($author$project$GraphQL$Operations$GenerateSelection$removeTypename, unionCase.hT);
        if (!_v1.b) {
            return {
                t: gathered.t,
                gw: _List_Cons($mdgriffith$elm_codegen$Elm$variant($author$project$GraphQL$Operations$CanonicalAST$nameToString(unionCase.hi)), gathered.gw)
            };
        }
        else {
            var fields = _v1;
            var subfieldAliases = $author$project$GraphQL$Operations$GenerateSelection$generateTypesForFields_fn($author$project$GraphQL$Operations$GenerateSelection$genAliasedTypes(namespace), _List_Nil, fields);
            var record = $author$project$GraphQL$Operations$GenerateSelection$toAliasedFields_fn(namespace, _List_Nil, fields);
            var detailsName = $author$project$GraphQL$Operations$CanonicalAST$nameToString(unionCase.hh);
            var recordAlias = $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                g9: true,
                hj: $elm$core$Maybe$Just("necessary")
            }, $mdgriffith$elm_codegen$Elm$alias_fn(detailsName, record));
            return {
                t: _List_Cons($mdgriffith$elm_codegen$Elm$comment($author$project$GraphQL$Operations$CanonicalAST$nameToString(unionCase.h0)), _List_Cons(recordAlias, _Utils_ap(subfieldAliases, gathered.t))),
                gw: _List_Cons($mdgriffith$elm_codegen$Elm$Variant_fn($author$project$GraphQL$Operations$CanonicalAST$nameToString(unionCase.hi), _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, detailsName)
                ])), gathered.gw)
            };
        }
    }, $author$project$GraphQL$Operations$GenerateSelection$interfaceVariants = F3($author$project$GraphQL$Operations$GenerateSelection$interfaceVariants_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$unionVars_fn = function (namespace, unionCase, gathered) {
        var _v0 = $elm$core$List$filter_fn($author$project$GraphQL$Operations$GenerateSelection$removeTypename, unionCase.hT);
        if (!_v0.b) {
            return {
                t: gathered.t,
                gw: _List_Cons($mdgriffith$elm_codegen$Elm$variant($author$project$GraphQL$Operations$CanonicalAST$nameToString(unionCase.hi)), gathered.gw)
            };
        }
        else {
            var fields = _v0;
            var variantName = $author$project$GraphQL$Operations$CanonicalAST$nameToString(unionCase.hi);
            var subfieldAliases = $author$project$GraphQL$Operations$GenerateSelection$generateTypesForFields_fn($author$project$GraphQL$Operations$GenerateSelection$genAliasedTypes(namespace), _List_Nil, fields);
            var record = $author$project$GraphQL$Operations$GenerateSelection$toAliasedFields_fn(namespace, _List_Nil, fields);
            var detailsName = $author$project$GraphQL$Operations$CanonicalAST$nameToString(unionCase.hh);
            var recordAlias = $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                g9: true,
                hj: $elm$core$Maybe$Just("necessary")
            }, $mdgriffith$elm_codegen$Elm$alias_fn(detailsName, record));
            return {
                t: _List_Cons($mdgriffith$elm_codegen$Elm$comment($author$project$GraphQL$Operations$CanonicalAST$nameToString(unionCase.h0)), _List_Cons(recordAlias, _Utils_ap(subfieldAliases, gathered.t))),
                gw: _List_Cons($mdgriffith$elm_codegen$Elm$Variant_fn(variantName, _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, detailsName)
                ])), gathered.gw)
            };
        }
    }, $author$project$GraphQL$Operations$GenerateSelection$unionVars = F3($author$project$GraphQL$Operations$GenerateSelection$unionVars_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$aliasedTypes_fn = function (namespace, def) {
        var op = def;
        return $author$project$GraphQL$Operations$GenerateSelection$generateTypesForFields_fn($author$project$GraphQL$Operations$GenerateSelection$genAliasedTypes(namespace), _List_Nil, op.hc);
    }, $author$project$GraphQL$Operations$GenerateSelection$aliasedTypes = F2($author$project$GraphQL$Operations$GenerateSelection$aliasedTypes_fn);
    var $mdgriffith$elm_codegen$Elm$Op$BinOp_fn = function (a, b, c) {
        return { $: 0, a: a, b: b, c: c };
    }, $mdgriffith$elm_codegen$Elm$Op$BinOp = F3($mdgriffith$elm_codegen$Elm$Op$BinOp_fn);
    var $stil4m$elm_syntax$Elm$Syntax$Infix$Left = 0;
    var $stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication_fn = function (a, b, c, d) {
        return { $: 2, a: a, b: b, c: c, d: d };
    }, $stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication = F4($stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication_fn);
    var $mdgriffith$elm_codegen$Elm$Op$applyPipe_fn = function (_v0, infixAnnotation, l, r) {
        var symbol = _v0.a;
        var dir = _v0.b;
        return function (index) {
            var _v1 = $mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails_fn(index, l);
            var leftIndex = _v1.a;
            var left = _v1.b;
            var _v2 = $mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails_fn(leftIndex, r);
            var rightIndex = _v2.a;
            var right = _v2.b;
            var annotationIndex = $mdgriffith$elm_codegen$Internal$Index$next(rightIndex);
            return {
                a: $mdgriffith$elm_codegen$Internal$Compiler$applyType_fn(index, $elm$core$Result$Ok({ gJ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, f: $elm$core$Dict$empty, aK: infixAnnotation }), _List_fromArray([left, right])),
                _: $stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication_fn(symbol, dir, $mdgriffith$elm_codegen$Internal$Compiler$nodify(left._), $mdgriffith$elm_codegen$Internal$Compiler$nodify(right._)),
                d: _Utils_ap(left.d, right.d)
            };
        };
    }, $mdgriffith$elm_codegen$Elm$Op$applyPipe = F4($mdgriffith$elm_codegen$Elm$Op$applyPipe_fn);
    var $mdgriffith$elm_codegen$Internal$Types$function_fn = function (args, _return) {
        return $elm$core$List$foldr_fn(F2(function (ann, fn) {
            return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$FunctionTypeAnnotation_fn($mdgriffith$elm_codegen$Internal$Types$nodify(ann), $mdgriffith$elm_codegen$Internal$Types$nodify(fn));
        }), _return, args);
    }, $mdgriffith$elm_codegen$Internal$Types$function = F2($mdgriffith$elm_codegen$Internal$Types$function_fn);
    var $mdgriffith$elm_codegen$Internal$Types$formatValue = function (str) {
        var formatted = _Utils_eq($elm$core$String$toUpper(str), str) ? $elm$core$String$toLower(str) : _Utils_ap($elm$core$String$toLower($elm$core$String$left_fn(1, str)), $elm$core$String$dropLeft_fn(1, str));
        return $mdgriffith$elm_codegen$Internal$Format$sanitize(formatted);
    };
    var $mdgriffith$elm_codegen$Internal$Types$var = function (name) {
        return $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$GenericType($mdgriffith$elm_codegen$Internal$Types$formatValue(name));
    };
    var $mdgriffith$elm_codegen$Elm$Op$pipe_fn = function (r, l) {
        return $mdgriffith$elm_codegen$Elm$Op$applyPipe_fn($mdgriffith$elm_codegen$Elm$Op$BinOp_fn("|>", 0, 0), $mdgriffith$elm_codegen$Internal$Types$function_fn(_List_fromArray([
            $mdgriffith$elm_codegen$Internal$Types$var("a"),
            $mdgriffith$elm_codegen$Internal$Types$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Internal$Types$var("a")
            ]), $mdgriffith$elm_codegen$Internal$Types$var("b"))
        ]), $mdgriffith$elm_codegen$Internal$Types$var("b")), l, r);
    }, $mdgriffith$elm_codegen$Elm$Op$pipe = F2($mdgriffith$elm_codegen$Elm$Op$pipe_fn);
    var $author$project$Generate$Input$Encode$addEncodedVariablesHelper_fn = function (namespace, schema, argRecord, _var, inputObj) {
        var name = _var.c;
        var _v0 = _var.aK;
        if (_v0.$ === 7) {
            var type_ = _v0.a;
            return $mdgriffith$elm_codegen$Elm$Op$pipe_fn($mdgriffith$elm_codegen$Elm$apply_fn($author$project$Gen$GraphQL$Engine$values_.bS, _List_fromArray([
                $mdgriffith$elm_codegen$Elm$string(name),
                $mdgriffith$elm_codegen$Elm$string($author$project$GraphQL$Schema$typeToString(_var.aK)),
                $mdgriffith$elm_codegen$Elm$get_fn(name, argRecord),
                $mdgriffith$elm_codegen$Elm$fn_fn(_Utils_Tuple2("encode", $elm$core$Maybe$Nothing), function (x) {
                    return $author$project$Generate$Input$Encode$encode_fn(namespace, schema, type_, x);
                })
            ])), inputObj);
        }
        else {
            return $mdgriffith$elm_codegen$Elm$Op$pipe_fn($mdgriffith$elm_codegen$Elm$apply_fn($author$project$Gen$GraphQL$Engine$values_.bQ, _List_fromArray([
                $mdgriffith$elm_codegen$Elm$string(name),
                $mdgriffith$elm_codegen$Elm$string($author$project$GraphQL$Schema$typeToString(_var.aK)),
                $author$project$Generate$Input$Encode$encode_fn(namespace, schema, _var.aK, $mdgriffith$elm_codegen$Elm$get_fn(name, argRecord))
            ])), inputObj);
        }
    }, $author$project$Generate$Input$Encode$addEncodedVariablesHelper = F5($author$project$Generate$Input$Encode$addEncodedVariablesHelper_fn);
    var $author$project$Generate$Input$Encode$fullRecordToInputObject_fn = function (namespace, schema, args, argRecord) {
        return $elm$core$List$foldl_fn(A3($author$project$Generate$Input$Encode$addEncodedVariablesHelper, namespace, schema, argRecord), $author$project$Gen$GraphQL$Engine$inputObject("Input"), args);
    }, $author$project$Generate$Input$Encode$fullRecordToInputObject = F4($author$project$Generate$Input$Encode$fullRecordToInputObject_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$andMap_fn = function (decoder, builder) {
        return $mdgriffith$elm_codegen$Elm$Op$pipe_fn($mdgriffith$elm_codegen$Elm$apply_fn($author$project$Gen$GraphQL$Engine$values_.bY, _List_fromArray([decoder])), builder);
    }, $author$project$GraphQL$Operations$GenerateSelection$andMap = F2($author$project$GraphQL$Operations$GenerateSelection$andMap_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$Index_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $author$project$GraphQL$Operations$GenerateSelection$Index = F2($author$project$GraphQL$Operations$GenerateSelection$Index_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$child = function (_v0) {
        var top = _v0.a;
        var total = _v0.b;
        return $author$project$GraphQL$Operations$GenerateSelection$Index_fn(0, _List_Cons(top, total));
    };
    var $author$project$Gen$Json$Decode$bool = $mdgriffith$elm_codegen$Elm$value({
        a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$bool]))),
        b: _List_fromArray(["Json", "Decode"]),
        c: "bool"
    });
    var $author$project$Gen$Json$Decode$float = $mdgriffith$elm_codegen$Elm$value({
        a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float]))),
        b: _List_fromArray(["Json", "Decode"]),
        c: "float"
    });
    var $author$project$Gen$Json$Decode$int = $mdgriffith$elm_codegen$Elm$value({
        a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]))),
        b: _List_fromArray(["Json", "Decode"]),
        c: "int"
    });
    var $author$project$Gen$Json$Decode$list = function (listArg) {
        return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
            ])))),
            b: _List_fromArray(["Json", "Decode"]),
            c: "list"
        }), _List_fromArray([listArg]));
    };
    var $author$project$Gen$Json$Decode$nullable = function (nullableArg) {
        return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("a"))
            ])))),
            b: _List_fromArray(["Json", "Decode"]),
            c: "nullable"
        }), _List_fromArray([nullableArg]));
    };
    var $author$project$GraphQL$Operations$GenerateSelection$decodeScalarType_fn = function (namespace, type_) {
        switch (type_.$) {
            case 0:
                var scalarName = type_.a;
                var _v1 = $elm$core$String$toLower(scalarName);
                switch (_v1) {
                    case "int":
                        return $author$project$Gen$Json$Decode$int;
                    case "float":
                        return $author$project$Gen$Json$Decode$float;
                    case "string":
                        return $author$project$Gen$Json$Decode$string;
                    case "boolean":
                        return $author$project$Gen$Json$Decode$bool;
                    default:
                        var scal = _v1;
                        return $mdgriffith$elm_codegen$Elm$get_fn("decoder", $mdgriffith$elm_codegen$Elm$value({
                            a: $elm$core$Maybe$Nothing,
                            b: _List_fromArray([namespace.bv]),
                            c: $author$project$Utils$String$formatValue(scalarName)
                        }));
                }
            case 7:
                var inner = type_.a;
                return $author$project$Gen$Json$Decode$nullable($author$project$GraphQL$Operations$GenerateSelection$decodeScalarType_fn(namespace, inner));
            case 6:
                var inner = type_.a;
                return $author$project$Gen$Json$Decode$list($author$project$GraphQL$Operations$GenerateSelection$decodeScalarType_fn(namespace, inner));
            default:
                return $author$project$Gen$Json$Decode$succeed($mdgriffith$elm_codegen$Elm$string("DECODE UNKNOWN"));
        }
    }, $author$project$GraphQL$Operations$GenerateSelection$decodeScalarType = F2($author$project$GraphQL$Operations$GenerateSelection$decodeScalarType_fn);
    var $stil4m$elm_syntax$Elm$Syntax$Expression$Integer = function (a) {
        return { $: 7, a: a };
    };
    var $mdgriffith$elm_codegen$Internal$Types$int = $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed_fn($mdgriffith$elm_codegen$Internal$Types$nodify(_Utils_Tuple2(_List_Nil, "Int")), _List_Nil);
    var $mdgriffith$elm_codegen$Elm$int = function (intVal) {
        return function (_v0) {
            return {
                a: $elm$core$Result$Ok({ gJ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, f: $elm$core$Dict$empty, aK: $mdgriffith$elm_codegen$Internal$Types$int }),
                _: $stil4m$elm_syntax$Elm$Syntax$Expression$Integer(intVal),
                d: _List_Nil
            };
        };
    };
    var $author$project$GraphQL$Operations$GenerateSelection$isTopLevel = function (_v0) {
        var i = _v0.a;
        var tail = _v0.b;
        return $elm$core$List$isEmpty(tail);
    };
    var $author$project$GraphQL$Operations$GenerateSelection$decodeSingleField_fn = function (version, index, name, decoder, exp) {
        return $mdgriffith$elm_codegen$Elm$Op$pipe_fn($mdgriffith$elm_codegen$Elm$apply_fn($author$project$Gen$GraphQL$Engine$values_.gy, _List_fromArray([
            $author$project$GraphQL$Operations$GenerateSelection$isTopLevel(index) ? version : $mdgriffith$elm_codegen$Elm$int(0),
            $mdgriffith$elm_codegen$Elm$string(name),
            decoder
        ])), exp);
    }, $author$project$GraphQL$Operations$GenerateSelection$decodeSingleField = F5($author$project$GraphQL$Operations$GenerateSelection$decodeSingleField_fn);
    var $author$project$Gen$GraphQL$Engine$decodeNullable = function (decodeNullableArg) {
        return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Maybe", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("data")
                ]))
            ])))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "decodeNullable"
        }), _List_fromArray([decodeNullableArg]));
    };
    var $author$project$Generate$Input$decodeWrapper_fn = function (wrap, exp) {
        switch (wrap.$) {
            case 0:
                return exp;
            case 1:
                var inner = wrap.a;
                return $author$project$Gen$Json$Decode$list($author$project$Generate$Input$decodeWrapper_fn(inner, exp));
            default:
                var inner = wrap.a;
                return $author$project$Gen$GraphQL$Engine$decodeNullable($author$project$Generate$Input$decodeWrapper_fn(inner, exp));
        }
    }, $author$project$Generate$Input$decodeWrapper = F2($author$project$Generate$Input$decodeWrapper_fn);
    var $author$project$Gen$Json$Decode$field_fn = function (fieldArg, fieldArg0) {
        return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$string,
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray(["Json", "Decode"]), "Decoder", _List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$var("a")
            ])))),
            b: _List_fromArray(["Json", "Decode"]),
            c: "field"
        }), _List_fromArray([
            $mdgriffith$elm_codegen$Elm$string(fieldArg),
            fieldArg0
        ]));
    }, $author$project$Gen$Json$Decode$field = F2($author$project$Gen$Json$Decode$field_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$next = function (_v0) {
        var top = _v0.a;
        var total = _v0.b;
        return $author$project$GraphQL$Operations$GenerateSelection$Index_fn(top + 1, total);
    };
    var $author$project$GraphQL$Operations$GenerateSelection$decodeFieldHelper_fn = function (namespace, version, field, _v6) {
        var index = _v6.a;
        var exp = _v6.b;
        if (!field.$) {
            var details = field.a;
            return _Utils_Tuple2($author$project$GraphQL$Operations$GenerateSelection$next(index), $author$project$GraphQL$Operations$GenerateSelection$decodeSingleField_fn(version, index, $author$project$GraphQL$Operations$CanonicalAST$getAliasedName(details), $author$project$Generate$Input$decodeWrapper_fn(details.gF, $author$project$GraphQL$Operations$GenerateSelection$decodeSelection_fn(namespace, version, details, $author$project$GraphQL$Operations$GenerateSelection$child(index))), exp));
        }
        else {
            var fragment = field.a;
            return _Utils_Tuple2(index, $mdgriffith$elm_codegen$Elm$Op$pipe_fn($mdgriffith$elm_codegen$Elm$value({ a: $elm$core$Maybe$Nothing, b: fragment.dj.b, c: "decoder" }), exp));
        }
    }, $author$project$GraphQL$Operations$GenerateSelection$decodeFieldHelper = F4($author$project$GraphQL$Operations$GenerateSelection$decodeFieldHelper_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$decodeFields_fn = function (namespace, version, index, fields, exp) {
        return $elm$core$List$foldl_fn(A2($author$project$GraphQL$Operations$GenerateSelection$decodeFieldHelper, namespace, version), _Utils_Tuple2(index, exp), $elm$core$List$reverse(fields)).b;
    }, $author$project$GraphQL$Operations$GenerateSelection$decodeFields = F5($author$project$GraphQL$Operations$GenerateSelection$decodeFields_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$decodeInterface_fn = function (namespace, version, index, _interface, start) {
        var selection = $elm$core$List$filter_fn(A2($elm$core$Basics$composeL, $elm$core$Basics$not, $author$project$GraphQL$Operations$CanonicalAST$isTypeNameSelection), _interface.hT);
        var _v5 = _interface.gw;
        if (!_v5.b) {
            return $author$project$GraphQL$Operations$GenerateSelection$decodeFields_fn(namespace, version, $author$project$GraphQL$Operations$GenerateSelection$child(index), selection, start);
        }
        else {
            return $author$project$GraphQL$Operations$GenerateSelection$andMap_fn($author$project$GraphQL$Operations$GenerateSelection$decodeInterfaceSpecifics_fn(namespace, version, index, _interface), $author$project$GraphQL$Operations$GenerateSelection$decodeFields_fn(namespace, version, $author$project$GraphQL$Operations$GenerateSelection$child(index), selection, start));
        }
    }, $author$project$GraphQL$Operations$GenerateSelection$decodeInterface = F5($author$project$GraphQL$Operations$GenerateSelection$decodeInterface_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$decodeInterfaceSpecifics_fn = function (namespace, version, index, _interface) {
        return $author$project$Gen$Json$Decode$andThen_fn(function (val) {
            return $mdgriffith$elm_codegen$Elm$Case$string_fn(val, {
                gP: _Utils_ap($elm$core$List$map_fn(A4($author$project$GraphQL$Operations$GenerateSelection$interfacePattern, namespace, version, $author$project$GraphQL$Operations$GenerateSelection$child(index), _interface.hT), _interface.gw), $elm$core$List$map_fn(function (tag) {
                    return _Utils_Tuple2($author$project$GraphQL$Operations$CanonicalAST$nameToString(tag.h0), $author$project$Gen$Json$Decode$succeed($mdgriffith$elm_codegen$Elm$value({
                        a: $elm$core$Maybe$Nothing,
                        b: _List_Nil,
                        c: $author$project$GraphQL$Operations$GenerateSelection$unionVariantName(tag)
                    })));
                }, _interface.ff)),
                hG: $author$project$Gen$Json$Decode$fail("Unknown interface type")
            });
        }, $author$project$Gen$Json$Decode$field_fn("__typename", $author$project$Gen$Json$Decode$string));
    }, $author$project$GraphQL$Operations$GenerateSelection$decodeInterfaceSpecifics = F4($author$project$GraphQL$Operations$GenerateSelection$decodeInterfaceSpecifics_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$decodeSelection_fn = function (namespace, version, field, index) {
        var start = function () {
            var _v4 = field.hU;
            if (!_v4.$) {
                var fragment = _v4.a;
                return $author$project$Gen$Json$Decode$succeed($mdgriffith$elm_codegen$Elm$value({
                    a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$named_fn(fragment.b, fragment.c)),
                    b: fragment.b,
                    c: fragment.c
                }));
            }
            else {
                return $author$project$Gen$Json$Decode$succeed($mdgriffith$elm_codegen$Elm$val($author$project$GraphQL$Operations$CanonicalAST$nameToString(field.hg)));
            }
        }();
        return $mdgriffith$elm_codegen$Elm$withType_fn($author$project$Gen$Json$Decode$annotation_.gY($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, $author$project$GraphQL$Operations$CanonicalAST$nameToString(field.hg))), function () {
            var _v2 = field.hT;
            switch (_v2.$) {
                case 2:
                    var objSelection = _v2.a;
                    return $author$project$GraphQL$Operations$GenerateSelection$decodeFields_fn(namespace, version, $author$project$GraphQL$Operations$GenerateSelection$child(index), objSelection, start);
                case 0:
                    var type_ = _v2.a;
                    return $author$project$GraphQL$Operations$GenerateSelection$decodeScalarType_fn(namespace, type_);
                case 1:
                    var _enum = _v2.a;
                    return $mdgriffith$elm_codegen$Elm$value({
                        a: $elm$core$Maybe$Nothing,
                        b: _List_fromArray([
                            namespace.cQ,
                            "Enum",
                            $author$project$Utils$String$formatTypename(_enum.g3)
                        ]),
                        c: "decoder"
                    });
                case 3:
                    var union = _v2.a;
                    var _v3 = field.hU;
                    if (!_v3.$) {
                        var fragment = _v3.a;
                        return $mdgriffith$elm_codegen$Elm$value({ a: $elm$core$Maybe$Nothing, b: fragment.b, c: "decoder" });
                    }
                    else {
                        return $author$project$GraphQL$Operations$GenerateSelection$decodeUnion_fn(namespace, version, $author$project$GraphQL$Operations$GenerateSelection$child(index), union);
                    }
                default:
                    var _interface = _v2.a;
                    return $author$project$GraphQL$Operations$GenerateSelection$decodeInterface_fn(namespace, version, $author$project$GraphQL$Operations$GenerateSelection$child(index), _interface, start);
            }
        }());
    }, $author$project$GraphQL$Operations$GenerateSelection$decodeSelection = F4($author$project$GraphQL$Operations$GenerateSelection$decodeSelection_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$decodeUnion_fn = function (namespace, version, index, union) {
        return $author$project$Gen$Json$Decode$andThen_fn(function (typename) {
            return $mdgriffith$elm_codegen$Elm$Case$string_fn(typename, {
                gP: _Utils_ap($elm$core$List$map_fn(A3($author$project$GraphQL$Operations$GenerateSelection$unionPattern, namespace, version, $author$project$GraphQL$Operations$GenerateSelection$child(index)), union.gw), $elm$core$List$map_fn(function (tag) {
                    return _Utils_Tuple2($author$project$GraphQL$Operations$CanonicalAST$nameToString(tag.h0), $author$project$Gen$Json$Decode$succeed($mdgriffith$elm_codegen$Elm$value({
                        a: $elm$core$Maybe$Nothing,
                        b: _List_Nil,
                        c: $author$project$GraphQL$Operations$GenerateSelection$unionVariantName(tag)
                    })));
                }, union.ff)),
                hG: $author$project$Gen$Json$Decode$fail("Unknown union found")
            });
        }, $author$project$Gen$Json$Decode$field_fn("__typename", $author$project$Gen$Json$Decode$string));
    }, $author$project$GraphQL$Operations$GenerateSelection$decodeUnion = F4($author$project$GraphQL$Operations$GenerateSelection$decodeUnion_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$interfacePattern_fn = function (namespace, version, index, commonFields, _var) {
        var tagTypeName = $author$project$GraphQL$Operations$CanonicalAST$nameToString(_var.hi);
        var tag = $author$project$Utils$String$formatTypename($author$project$GraphQL$Operations$CanonicalAST$nameToString(_var.h0));
        var allFields = _var.hT;
        return _Utils_Tuple2(tag, function () {
            var _v1 = $elm$core$List$filter_fn($author$project$GraphQL$Operations$GenerateSelection$removeTypename, allFields);
            if (!_v1.b) {
                return $author$project$Gen$Json$Decode$succeed($mdgriffith$elm_codegen$Elm$value({ a: $elm$core$Maybe$Nothing, b: _List_Nil, c: tagTypeName }));
            }
            else {
                var fields = _v1;
                return A2($author$project$Gen$Json$Decode$call_.ei, $mdgriffith$elm_codegen$Elm$val(tagTypeName), $author$project$GraphQL$Operations$GenerateSelection$decodeFields_fn(namespace, version, $author$project$GraphQL$Operations$GenerateSelection$child(index), fields, $author$project$Gen$Json$Decode$succeed($mdgriffith$elm_codegen$Elm$val($author$project$GraphQL$Operations$CanonicalAST$nameToString(_var.hh)))));
            }
        }());
    }, $author$project$GraphQL$Operations$GenerateSelection$interfacePattern = F5($author$project$GraphQL$Operations$GenerateSelection$interfacePattern_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$unionPattern_fn = function (namespace, version, index, _var) {
        var tagTypeName = $author$project$GraphQL$Operations$CanonicalAST$nameToString(_var.hi);
        var tagDetailsName = $author$project$GraphQL$Operations$CanonicalAST$nameToString(_var.hh);
        var tag = $author$project$Utils$String$formatTypename($author$project$GraphQL$Operations$CanonicalAST$nameToString(_var.h0));
        return _Utils_Tuple2(tag, function () {
            var _v0 = $elm$core$List$filter_fn($author$project$GraphQL$Operations$GenerateSelection$removeTypename, _var.hT);
            if (!_v0.b) {
                return $author$project$Gen$Json$Decode$succeed($mdgriffith$elm_codegen$Elm$value({ a: $elm$core$Maybe$Nothing, b: _List_Nil, c: tagTypeName }));
            }
            else {
                var fields = _v0;
                return A2($author$project$Gen$Json$Decode$call_.ei, $mdgriffith$elm_codegen$Elm$value({ a: $elm$core$Maybe$Nothing, b: _List_Nil, c: tagTypeName }), $author$project$GraphQL$Operations$GenerateSelection$decodeFields_fn(namespace, version, $author$project$GraphQL$Operations$GenerateSelection$child(index), fields, $author$project$Gen$Json$Decode$succeed($mdgriffith$elm_codegen$Elm$value({ a: $elm$core$Maybe$Nothing, b: _List_Nil, c: tagDetailsName }))));
            }
        }());
    }, $author$project$GraphQL$Operations$GenerateSelection$unionPattern = F4($author$project$GraphQL$Operations$GenerateSelection$unionPattern_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$initIndex = $author$project$GraphQL$Operations$GenerateSelection$Index_fn(0, _List_Nil);
    var $author$project$GraphQL$Operations$GenerateSelection$responseName = "Response";
    var $author$project$GraphQL$Operations$GenerateSelection$generateDecoder_fn = function (version, namespace, def) {
        var op = def;
        return $author$project$GraphQL$Operations$GenerateSelection$decodeFields_fn(namespace, version, $author$project$GraphQL$Operations$GenerateSelection$initIndex, op.hc, $author$project$Gen$Json$Decode$succeed($mdgriffith$elm_codegen$Elm$value({ a: $elm$core$Maybe$Nothing, b: _List_Nil, c: $author$project$GraphQL$Operations$GenerateSelection$responseName })));
    }, $author$project$GraphQL$Operations$GenerateSelection$generateDecoder = F3($author$project$GraphQL$Operations$GenerateSelection$generateDecoder_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$generatePrimaryResultTypeAliased_fn = function (namespace, def) {
        var op = def;
        var record = $author$project$GraphQL$Operations$GenerateSelection$toAliasedFields_fn(namespace, _List_Nil, op.hc);
        return _List_fromArray([
            $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                g9: true,
                hj: $elm$core$Maybe$Just("necessary")
            }, $mdgriffith$elm_codegen$Elm$alias_fn($author$project$GraphQL$Operations$GenerateSelection$responseName, record))
        ]);
    }, $author$project$GraphQL$Operations$GenerateSelection$generatePrimaryResultTypeAliased = F2($author$project$GraphQL$Operations$GenerateSelection$generatePrimaryResultTypeAliased_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$opTypeName = function (op) {
        if (!op) {
            return "Query";
        }
        else {
            return "Mutation";
        }
    };
    var $author$project$GraphQL$Operations$GenerateSelection$getOpName = function (_v0) {
        var op = _v0;
        return $elm$core$Maybe$withDefault_fn($author$project$GraphQL$Operations$GenerateSelection$opTypeName(op.by), $elm$core$Maybe$map_fn($author$project$GraphQL$Operations$CanonicalAST$nameToString, op.c));
    };
    var $author$project$Gen$GraphQL$Engine$inputObjectToFieldList = function (inputObjectToFieldListArg) {
        return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "InputObject", _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$var("a")
                ]))
            ]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$tuple_fn($mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "VariableDetails", _List_Nil))))),
            b: _List_fromArray(["GraphQL", "Engine"]),
            c: "inputObjectToFieldList"
        }), _List_fromArray([inputObjectToFieldListArg]));
    };
    var $mdgriffith$elm_codegen$Internal$Compiler$getAnnotation = function (exp) {
        return exp.a;
    };
    var $mdgriffith$elm_codegen$Elm$maybe = function (maybeContent) {
        return function (index) {
            if (maybeContent.$ === 1) {
                return {
                    a: $elm$core$Result$Ok($mdgriffith$elm_codegen$Internal$Compiler$getInnerInference_fn(index, $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$var("a")))),
                    _: $stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue_fn(_List_Nil, "Nothing"),
                    d: _List_Nil
                };
            }
            else {
                var contentExp = maybeContent.a;
                var _v1 = $mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails_fn(index, contentExp);
                var content = _v1.b;
                return {
                    a: $elm$core$Result$map_fn(function (ann) {
                        return {
                            gJ: ann.gJ,
                            f: ann.f,
                            aK: $stil4m$elm_syntax$Elm$Syntax$TypeAnnotation$Typed_fn($mdgriffith$elm_codegen$Internal$Compiler$nodify(_Utils_Tuple2(_List_Nil, "Maybe")), _List_fromArray([
                                $mdgriffith$elm_codegen$Internal$Compiler$nodify(ann.aK)
                            ]))
                        };
                    }, $mdgriffith$elm_codegen$Internal$Compiler$getAnnotation(content)),
                    _: $stil4m$elm_syntax$Elm$Syntax$Expression$Application(_List_fromArray([
                        $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Expression$FunctionOrValue_fn(_List_Nil, "Just")),
                        $mdgriffith$elm_codegen$Internal$Compiler$nodify($stil4m$elm_syntax$Elm$Syntax$Expression$ParenthesizedExpression($mdgriffith$elm_codegen$Internal$Compiler$nodify(content._)))
                    ])),
                    d: $mdgriffith$elm_codegen$Internal$Compiler$getImports(content)
                };
            }
        };
    };
    var $mdgriffith$elm_codegen$Elm$just = function (content) {
        return $mdgriffith$elm_codegen$Elm$maybe($elm$core$Maybe$Just(content));
    };
    var $mdgriffith$elm_codegen$Elm$nothing = $mdgriffith$elm_codegen$Elm$maybe($elm$core$Maybe$Nothing);
    var $author$project$GraphQL$Operations$GenerateSelection$opValueName = function (op) {
        if (!op) {
            return "query";
        }
        else {
            return "mutation";
        }
    };
    var $author$project$Generate$Path$operation = function (_v0) {
        var name = _v0.c;
        var path = _v0.hH;
        var gqlDir = _v0.al;
        var pathFromElmRootToGqlFile = $elm$core$List$map_fn($author$project$Utils$String$formatTypename, $author$project$Generate$Path$removePrefix_fn(gqlDir, $elm$core$List$map_fn(A2($elm$core$Basics$composeR, A2($elm$core$String$replace, ".gql", ""), A2($elm$core$String$replace, ".graphql", "")), $elm$core$String$split_fn("/", path))));
        var fragName = $author$project$Utils$String$formatTypename(name);
        var filePathPieces = _Utils_ap(gqlDir, _Utils_ap(pathFromElmRootToGqlFile, _List_fromArray([fragName])));
        return {
            db: $elm$core$String$join_fn("/", filePathPieces) + ".elm",
            eB: _Utils_ap(pathFromElmRootToGqlFile, _List_fromArray([fragName]))
        };
    };
    var $author$project$GraphQL$Operations$CanonicalAST$operationLabel = function (_v0) {
        var def = _v0;
        var _v1 = def.c;
        if (_v1.$ === 1) {
            return $elm$core$Maybe$Nothing;
        }
        else {
            var str = _v1.a;
            return $elm$core$Maybe$Just(str);
        }
    };
    var $author$project$GraphQL$Operations$GenerateSelection$renderStandardComment = function (groups) {
        return $elm$core$List$isEmpty(groups) ? "" : $elm$core$List$foldl_fn_unwrapped(function (grouped, str) {
            return str + ("@docs " + ($elm$core$String$join_fn(", ", grouped.hs) + "\n\n"));
        }, "\n\n", groups);
    };
    var $author$project$GraphQL$Operations$GenerateSelection$replaceFilePath_fn = function (newPath, file) {
        return _Utils_update(file, { hH: newPath });
    }, $author$project$GraphQL$Operations$GenerateSelection$replaceFilePath = F2($author$project$GraphQL$Operations$GenerateSelection$replaceFilePath_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$toArgument = function (varDef) {
        var adjustedSchemaType = function () {
            var _v0 = varDef.aK;
            if (_v0.$ === 2) {
                return varDef.hR;
            }
            else {
                var _v1 = varDef.hR;
                if (_v1.$ === 7) {
                    var schemaType = _v1.a;
                    return schemaType;
                }
                else {
                    return varDef.hR;
                }
            }
        }();
        return {
            bd: $elm$core$Maybe$Nothing,
            c: $author$project$GraphQL$Operations$CanonicalAST$nameToString(varDef.bL.c),
            aK: adjustedSchemaType
        };
    };
    var $mdgriffith$elm_codegen$Elm$Annotation$char = $mdgriffith$elm_codegen$Elm$Annotation$typed_fn(_List_fromArray(["Char"]), "Char", _List_Nil);
    var $author$project$Gen$String$call_ = {
        bW: F2(function (allArg, allArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$char]), $mdgriffith$elm_codegen$Elm$Annotation$bool),
                    $mdgriffith$elm_codegen$Elm$Annotation$string
                ]), $mdgriffith$elm_codegen$Elm$Annotation$bool)),
                b: _List_fromArray(["String"]),
                c: "all"
            }), _List_fromArray([allArg, allArg0]));
        }),
        b_: F2(function (anyArg, anyArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$char]), $mdgriffith$elm_codegen$Elm$Annotation$bool),
                    $mdgriffith$elm_codegen$Elm$Annotation$string
                ]), $mdgriffith$elm_codegen$Elm$Annotation$bool)),
                b: _List_fromArray(["String"]),
                c: "any"
            }), _List_fromArray([anyArg, anyArg0]));
        }),
        b$: F2(function (appendArg, appendArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "append"
            }), _List_fromArray([appendArg, appendArg0]));
        }),
        cl: function (concatArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$string)
                ]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "concat"
            }), _List_fromArray([concatArg]));
        },
        co: F2(function (consArg, consArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$char, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "cons"
            }), _List_fromArray([consArg, consArg0]));
        }),
        cp: F2(function (containsArg, containsArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$bool)),
                b: _List_fromArray(["String"]),
                c: "contains"
            }), _List_fromArray([containsArg, containsArg0]));
        }),
        cE: F2(function (dropLeftArg, dropLeftArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "dropLeft"
            }), _List_fromArray([dropLeftArg, dropLeftArg0]));
        }),
        cF: F2(function (dropRightArg, dropRightArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "dropRight"
            }), _List_fromArray([dropRightArg, dropRightArg0]));
        }),
        cN: F2(function (endsWithArg, endsWithArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$bool)),
                b: _List_fromArray(["String"]),
                c: "endsWith"
            }), _List_fromArray([endsWithArg, endsWithArg0]));
        }),
        dc: F2(function (filterArg, filterArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$char]), $mdgriffith$elm_codegen$Elm$Annotation$bool),
                    $mdgriffith$elm_codegen$Elm$Annotation$string
                ]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "filter"
            }), _List_fromArray([filterArg, filterArg0]));
        }),
        dg: F3(function (foldlArg, foldlArg0, foldlArg1) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$char,
                        $mdgriffith$elm_codegen$Elm$Annotation$var("b")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
                    $mdgriffith$elm_codegen$Elm$Annotation$string
                ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))),
                b: _List_fromArray(["String"]),
                c: "foldl"
            }), _List_fromArray([foldlArg, foldlArg0, foldlArg1]));
        }),
        dh: F3(function (foldrArg, foldrArg0, foldrArg1) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$char,
                        $mdgriffith$elm_codegen$Elm$Annotation$var("b")
                    ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b")),
                    $mdgriffith$elm_codegen$Elm$Annotation$var("b"),
                    $mdgriffith$elm_codegen$Elm$Annotation$string
                ]), $mdgriffith$elm_codegen$Elm$Annotation$var("b"))),
                b: _List_fromArray(["String"]),
                c: "foldr"
            }), _List_fromArray([foldrArg, foldrArg0, foldrArg1]));
        }),
        du: function (fromCharArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$char]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "fromChar"
            }), _List_fromArray([fromCharArg]));
        },
        dv: function (fromFloatArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$float]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "fromFloat"
            }), _List_fromArray([fromFloatArg]));
        },
        dw: function (fromIntArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "fromInt"
            }), _List_fromArray([fromIntArg]));
        },
        dx: function (fromListArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$char)
                ]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "fromList"
            }), _List_fromArray([fromListArg]));
        },
        dO: F2(function (indexesArg, indexesArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$int))),
                b: _List_fromArray(["String"]),
                c: "indexes"
            }), _List_fromArray([indexesArg, indexesArg0]));
        }),
        dP: F2(function (indicesArg, indicesArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$int))),
                b: _List_fromArray(["String"]),
                c: "indices"
            }), _List_fromArray([indicesArg, indicesArg0]));
        }),
        d0: function (isEmptyArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$bool)),
                b: _List_fromArray(["String"]),
                c: "isEmpty"
            }), _List_fromArray([isEmptyArg]));
        },
        d3: F2(function (joinArg, joinArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$string,
                    $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$string)
                ]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "join"
            }), _List_fromArray([joinArg, joinArg0]));
        }),
        eb: F2(function (leftArg, leftArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "left"
            }), _List_fromArray([leftArg, leftArg0]));
        }),
        ec: function (lengthArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$int)),
                b: _List_fromArray(["String"]),
                c: "length"
            }), _List_fromArray([lengthArg]));
        },
        ee: function (linesArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$string))),
                b: _List_fromArray(["String"]),
                c: "lines"
            }), _List_fromArray([linesArg]));
        },
        ei: F2(function (mapArg, mapArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$char]), $mdgriffith$elm_codegen$Elm$Annotation$char),
                    $mdgriffith$elm_codegen$Elm$Annotation$string
                ]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "map"
            }), _List_fromArray([mapArg, mapArg0]));
        }),
        e1: F3(function (padArg, padArg0, padArg1) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$char, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "pad"
            }), _List_fromArray([padArg, padArg0, padArg1]));
        }),
        e2: F3(function (padLeftArg, padLeftArg0, padLeftArg1) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$char, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "padLeft"
            }), _List_fromArray([padLeftArg, padLeftArg0, padLeftArg1]));
        }),
        e3: F3(function (padRightArg, padRightArg0, padRightArg1) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$char, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "padRight"
            }), _List_fromArray([padRightArg, padRightArg0, padRightArg1]));
        }),
        fp: F2(function (repeatArg, repeatArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "repeat"
            }), _List_fromArray([repeatArg, repeatArg0]));
        }),
        fq: F3(function (replaceArg, replaceArg0, replaceArg1) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "replace"
            }), _List_fromArray([replaceArg, replaceArg0, replaceArg1]));
        }),
        ft: function (reverseArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "reverse"
            }), _List_fromArray([reverseArg]));
        },
        fu: F2(function (rightArg, rightArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "right"
            }), _List_fromArray([rightArg, rightArg0]));
        }),
        fN: F3(function (sliceArg, sliceArg0, sliceArg1) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$int, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "slice"
            }), _List_fromArray([sliceArg, sliceArg0, sliceArg1]));
        }),
        fS: F2(function (splitArg, splitArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$string))),
                b: _List_fromArray(["String"]),
                c: "split"
            }), _List_fromArray([splitArg, splitArg0]));
        }),
        fT: F2(function (startsWithArg, startsWithArg0) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string, $mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$bool)),
                b: _List_fromArray(["String"]),
                c: "startsWith"
            }), _List_fromArray([startsWithArg, startsWithArg0]));
        }),
        f$: function (toFloatArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$float))),
                b: _List_fromArray(["String"]),
                c: "toFloat"
            }), _List_fromArray([toFloatArg]));
        },
        f1: function (toIntArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$int))),
                b: _List_fromArray(["String"]),
                c: "toInt"
            }), _List_fromArray([toIntArg]));
        },
        f2: function (toListArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$char))),
                b: _List_fromArray(["String"]),
                c: "toList"
            }), _List_fromArray([toListArg]));
        },
        f3: function (toLowerArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "toLower"
            }), _List_fromArray([toLowerArg]));
        },
        f8: function (toUpperArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "toUpper"
            }), _List_fromArray([toUpperArg]));
        },
        ga: function (trimArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "trim"
            }), _List_fromArray([trimArg]));
        },
        gb: function (trimLeftArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "trimLeft"
            }), _List_fromArray([trimLeftArg]));
        },
        gc: function (trimRightArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$string)),
                b: _List_fromArray(["String"]),
                c: "trimRight"
            }), _List_fromArray([trimRightArg]));
        },
        gh: function (unconsArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$maybe($mdgriffith$elm_codegen$Elm$Annotation$tuple_fn($mdgriffith$elm_codegen$Elm$Annotation$char, $mdgriffith$elm_codegen$Elm$Annotation$string)))),
                b: _List_fromArray(["String"]),
                c: "uncons"
            }), _List_fromArray([unconsArg]));
        },
        gD: function (wordsArg) {
            return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
                a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$list($mdgriffith$elm_codegen$Elm$Annotation$string))),
                b: _List_fromArray(["String"]),
                c: "words"
            }), _List_fromArray([wordsArg]));
        }
    };
    var $author$project$GraphQL$Operations$CanonicalAST$deduplicateFragments = function (frags) {
        return $elm$core$Dict$values($elm$core$Dict$fromList($elm$core$List$map_fn(function (f) {
            return _Utils_Tuple2($author$project$GraphQL$Operations$CanonicalAST$nameToString(f.c), f);
        }, frags)));
    };
    var $author$project$GraphQL$Operations$CanonicalAST$getUsedFragments_fn = function (doc, frag) {
        var subFragNames = $elm$core$List$concatMap_fn($author$project$GraphQL$Operations$CanonicalAST$getUsedFragments(doc), $elm$core$List$filter_fn(function (subfrag) {
            return $elm$core$List$member_fn(subfrag.c, frag.dt);
        }, doc.hf));
        return _List_Cons($author$project$GraphQL$Operations$CanonicalAST$nameToString(frag.c), subFragNames);
    }, $author$project$GraphQL$Operations$CanonicalAST$getUsedFragments = F2($author$project$GraphQL$Operations$CanonicalAST$getUsedFragments_fn);
    var $stil4m$elm_syntax$Elm$Syntax$Infix$Right = 1;
    var $mdgriffith$elm_codegen$Internal$Types$appendable = $mdgriffith$elm_codegen$Internal$Types$var("appendable");
    var $mdgriffith$elm_codegen$Elm$Op$applyInfix_fn = function (_v0, infixAnnotation, l, r) {
        var symbol = _v0.a;
        var dir = _v0.b;
        return function (index) {
            var _v1 = $mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails_fn(index, l);
            var leftIndex = _v1.a;
            var left = _v1.b;
            var _v2 = $mdgriffith$elm_codegen$Internal$Compiler$toExpressionDetails_fn(leftIndex, r);
            var rightIndex = _v2.a;
            var right = _v2.b;
            var annotationIndex = $mdgriffith$elm_codegen$Internal$Index$next(rightIndex);
            return {
                a: $mdgriffith$elm_codegen$Internal$Compiler$applyType_fn(index, $elm$core$Result$Ok({ gJ: $mdgriffith$elm_codegen$Internal$Compiler$emptyAliases, f: $elm$core$Dict$empty, aK: infixAnnotation }), _List_fromArray([left, right])),
                _: $stil4m$elm_syntax$Elm$Syntax$Expression$OperatorApplication_fn(symbol, dir, $mdgriffith$elm_codegen$Internal$Compiler$nodify($mdgriffith$elm_codegen$Internal$Compiler$parens(left._)), $mdgriffith$elm_codegen$Internal$Compiler$nodify($mdgriffith$elm_codegen$Internal$Compiler$parens(right._))),
                d: _Utils_ap(left.d, right.d)
            };
        };
    }, $mdgriffith$elm_codegen$Elm$Op$applyInfix = F4($mdgriffith$elm_codegen$Elm$Op$applyInfix_fn);
    var $mdgriffith$elm_codegen$Elm$Op$append_a0 = $mdgriffith$elm_codegen$Elm$Op$BinOp_fn("++", 1, 5), $mdgriffith$elm_codegen$Elm$Op$append_a1 = $mdgriffith$elm_codegen$Internal$Types$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Internal$Types$appendable, $mdgriffith$elm_codegen$Internal$Types$appendable]), $mdgriffith$elm_codegen$Internal$Types$appendable), $mdgriffith$elm_codegen$Elm$Op$append = A2($mdgriffith$elm_codegen$Elm$Op$applyInfix, $mdgriffith$elm_codegen$Elm$Op$append_a0, $mdgriffith$elm_codegen$Elm$Op$append_a1);
    var $author$project$GraphQL$Operations$CanonicalAST$aliasedName = function (details) {
        var _v0 = details.gI;
        if (_v0.$ === 1) {
            return $author$project$GraphQL$Operations$CanonicalAST$nameToString(details.c);
        }
        else {
            var alias_ = _v0.a;
            return $author$project$GraphQL$Operations$CanonicalAST$nameToString(alias_) + (": " + $author$project$GraphQL$Operations$CanonicalAST$nameToString(details.c));
        }
    };
    var $author$project$GraphQL$Operations$CanonicalAST$brackets = function (str) {
        return "{" + (str + "}");
    };
    var $author$project$GraphQL$Operations$CanonicalAST$foldToString_fn = function (delimiter, fn, vals) {
        return $elm$core$List$foldl_fn_unwrapped(function (_var, rendered) {
            var val = fn(_var);
            if (rendered === "") {
                return val;
            }
            else {
                return _Utils_ap(val, _Utils_ap(delimiter, rendered));
            }
        }, "", vals);
    }, $author$project$GraphQL$Operations$CanonicalAST$foldToString = F3($author$project$GraphQL$Operations$CanonicalAST$foldToString_fn);
    var $author$project$GraphQL$Operations$CanonicalAST$argValToString = function (val) {
        switch (val.$) {
            case 0:
                var str = val.a;
                return "\"" + (str + "\"");
            case 1:
                var _int = val.a;
                return $elm$core$String$fromInt(_int);
            case 2:
                var dec = val.a;
                return $elm$core$String$fromFloat(dec);
            case 3:
                if (val.a) {
                    return "true";
                }
                else {
                    return "false";
                }
            case 4:
                return "null";
            case 5:
                var str = val.a;
                return str;
            case 6:
                var _var = val.a;
                return "$" + $author$project$GraphQL$Operations$AST$nameToString(_var.c);
            case 7:
                var keyVals = val.a;
                return $author$project$GraphQL$Operations$CanonicalAST$brackets($author$project$GraphQL$Operations$CanonicalAST$foldToString_fn(", ", function (_v1) {
                    var key = _v1.a;
                    var innerVal = _v1.b;
                    return $author$project$GraphQL$Operations$AST$nameToString(key) + (": " + $author$project$GraphQL$Operations$CanonicalAST$argValToString(innerVal));
                }, keyVals));
            default:
                var vals = val.a;
                return "[" + ($author$project$GraphQL$Operations$CanonicalAST$foldToString_fn(", ", $author$project$GraphQL$Operations$CanonicalAST$argValToString, vals) + "]");
        }
    };
    var $author$project$GraphQL$Operations$CanonicalAST$argToString = function (arg) {
        return $author$project$GraphQL$Operations$AST$nameToString(arg.c) + (": " + $author$project$GraphQL$Operations$CanonicalAST$argValToString(arg.bK));
    };
    var $author$project$GraphQL$Operations$CanonicalAST$renderArguments = function (args) {
        if (!args.b) {
            return "";
        }
        else {
            return "(" + ($author$project$GraphQL$Operations$CanonicalAST$foldToString_fn("\n", $author$project$GraphQL$Operations$CanonicalAST$argToString, args) + ")");
        }
    };
    var $author$project$GraphQL$Operations$CanonicalAST$fieldToString = function (field) {
        if (!field.$) {
            var details = field.a;
            return _Utils_ap($author$project$GraphQL$Operations$CanonicalAST$aliasedName(details), _Utils_ap($author$project$GraphQL$Operations$CanonicalAST$renderArguments(details.b6), $author$project$GraphQL$Operations$CanonicalAST$selectionToString(details.hT)));
        }
        else {
            var frag = field.a;
            return "..." + $author$project$GraphQL$Operations$CanonicalAST$nameToString(frag.dj.c);
        }
    };
    var $author$project$GraphQL$Operations$CanonicalAST$selectionGroupToString = function (selection) {
        if (!selection.b) {
            return "";
        }
        else {
            return " " + $author$project$GraphQL$Operations$CanonicalAST$brackets($author$project$GraphQL$Operations$CanonicalAST$foldToString_fn("\n", $author$project$GraphQL$Operations$CanonicalAST$fieldToString, selection));
        }
    };
    var $author$project$GraphQL$Operations$CanonicalAST$selectionToString = function (selection) {
        switch (selection.$) {
            case 2:
                var fields = selection.a;
                return $author$project$GraphQL$Operations$CanonicalAST$selectionGroupToString(fields);
            case 3:
                var details = selection.a;
                return $author$project$GraphQL$Operations$CanonicalAST$brackets(_Utils_ap($author$project$GraphQL$Operations$CanonicalAST$foldToString_fn("\n", $author$project$GraphQL$Operations$CanonicalAST$fieldToString, details.hT), _Utils_ap((!($elm$core$List$isEmpty(details.hT) && $elm$core$List$isEmpty(details.gw))) ? "\n" : "", $author$project$GraphQL$Operations$CanonicalAST$foldToString_fn("\n", $author$project$GraphQL$Operations$CanonicalAST$variantFragmentToString, details.gw))));
            case 0:
                var details = selection.a;
                return "";
            case 1:
                var details = selection.a;
                return "";
            default:
                var details = selection.a;
                return $author$project$GraphQL$Operations$CanonicalAST$brackets(_Utils_ap($author$project$GraphQL$Operations$CanonicalAST$foldToString_fn("\n", $author$project$GraphQL$Operations$CanonicalAST$fieldToString, details.hT), _Utils_ap((!($elm$core$List$isEmpty(details.hT) && $elm$core$List$isEmpty(details.gw))) ? "\n" : "", $author$project$GraphQL$Operations$CanonicalAST$foldToString_fn("\n", $author$project$GraphQL$Operations$CanonicalAST$variantFragmentToString, details.gw))));
        }
    };
    var $author$project$GraphQL$Operations$CanonicalAST$variantFragmentToString = function (instance) {
        return "... on " + ($author$project$GraphQL$Operations$CanonicalAST$nameToString(instance.h0) + (" " + $author$project$GraphQL$Operations$CanonicalAST$brackets($author$project$GraphQL$Operations$CanonicalAST$foldToString_fn("\n", $author$project$GraphQL$Operations$CanonicalAST$fieldToString, instance.hT))));
    };
    var $author$project$GraphQL$Operations$CanonicalAST$renderFragment_fn = function (version, frag) {
        var selection = function () {
            var _v0 = frag.hT;
            switch (_v0.$) {
                case 0:
                    var obj = _v0.a;
                    return $author$project$GraphQL$Operations$CanonicalAST$foldToString_fn("\n", $author$project$GraphQL$Operations$CanonicalAST$fieldToString, obj.hT);
                case 1:
                    var union = _v0.a;
                    return _Utils_ap($author$project$GraphQL$Operations$CanonicalAST$foldToString_fn("\n", $author$project$GraphQL$Operations$CanonicalAST$fieldToString, union.hT), _Utils_ap((!($elm$core$List$isEmpty(union.hT) && $elm$core$List$isEmpty(union.gw))) ? "\n" : "", $author$project$GraphQL$Operations$CanonicalAST$foldToString_fn("\n", $author$project$GraphQL$Operations$CanonicalAST$variantFragmentToString, union.gw)));
                default:
                    var _interface = _v0.a;
                    return _Utils_ap($author$project$GraphQL$Operations$CanonicalAST$foldToString_fn("\n", $author$project$GraphQL$Operations$CanonicalAST$fieldToString, _interface.hT), _Utils_ap((!($elm$core$List$isEmpty(_interface.hT) && $elm$core$List$isEmpty(_interface.gw))) ? "\n" : "", $author$project$GraphQL$Operations$CanonicalAST$foldToString_fn("\n", $author$project$GraphQL$Operations$CanonicalAST$variantFragmentToString, _interface.gw)));
            }
        }();
        var name = A2($author$project$Gen$GraphQL$Engine$call_.gz, version, $mdgriffith$elm_codegen$Elm$string($author$project$GraphQL$Operations$CanonicalAST$nameToString(frag.c)));
        var body = $mdgriffith$elm_codegen$Elm$string((" on " + $author$project$GraphQL$Operations$CanonicalAST$nameToString(frag.h6)) + (" {" + (selection + " }")));
        return $mdgriffith$elm_codegen$Elm$Op$applyInfix_fn($mdgriffith$elm_codegen$Elm$Op$append_a0, $mdgriffith$elm_codegen$Elm$Op$append_a1, $mdgriffith$elm_codegen$Elm$Op$applyInfix_fn($mdgriffith$elm_codegen$Elm$Op$append_a0, $mdgriffith$elm_codegen$Elm$Op$append_a1, $mdgriffith$elm_codegen$Elm$string("fragment "), name), body);
    }, $author$project$GraphQL$Operations$CanonicalAST$renderFragment = F2($author$project$GraphQL$Operations$CanonicalAST$renderFragment_fn);
    var $author$project$GraphQL$Operations$CanonicalAST$toFragmentRendererExpression_fn = function (version, doc, _v0) {
        var def = _v0;
        var fragmentNamesUsed = $elm$core$Set$fromList($elm$core$List$concatMap_fn(A2($elm$core$Basics$composeL, $author$project$GraphQL$Operations$CanonicalAST$getUsedFragments(doc), function ($) {
            return $.dj;
        }), def.dt));
        var allFrags = doc.hf;
        var fragmentsUsed = $elm$core$List$filter_fn(function (frag) {
            return $elm$core$Set$member_fn($author$project$GraphQL$Operations$CanonicalAST$nameToString(frag.c), fragmentNamesUsed);
        }, allFrags);
        return A2($author$project$Gen$String$call_.d3, $mdgriffith$elm_codegen$Elm$string("\n"), $mdgriffith$elm_codegen$Elm$list($elm$core$List$map_fn($author$project$GraphQL$Operations$CanonicalAST$renderFragment(version), $author$project$GraphQL$Operations$CanonicalAST$deduplicateFragments(fragmentsUsed))));
    }, $author$project$GraphQL$Operations$CanonicalAST$toFragmentRendererExpression = F3($author$project$GraphQL$Operations$CanonicalAST$toFragmentRendererExpression_fn);
    var $author$project$Generate$Input$Encode$toInputRecordAlias_fn = function (namespace, schema, name, varDefs) {
        var isOptionalVar = function (_var) {
            var _v1 = _var.aK;
            if (_v1.$ === 7) {
                var inner = _v1.a;
                return true;
            }
            else {
                return false;
            }
        };
        var docs = $elm$core$List$any_fn(isOptionalVar, varDefs) ? (" This input has optional args, which are wrapped in `" + (namespace.bv + (".Option`.\n\nFirst up, if it makes sense, you can make this argument required in your graphql query \nby adding ! to that variable definition at the top of the query.  This will make it easier to handle in Elm.\n\nIf the field is truly optional, here's how to wrap it.\n\n    - " + (namespace.bv + (".present myValue" + (" -- this field should be myValue\n    - " + (namespace.bv + (".absent" + (" -- do not include this field at all in the GraphQL\n    - " + (namespace.bv + (".null" + " -- include this field as a null value.  Not as common as .absent.\n"))))))))))) : "";
        return $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
            g9: false,
            hj: $elm$core$Maybe$Just("Input")
        }, $mdgriffith$elm_codegen$Internal$Compiler$documentation_fn(docs, $mdgriffith$elm_codegen$Elm$alias_fn(name, $mdgriffith$elm_codegen$Elm$Annotation$record($elm$core$List$reverse($elm$core$List$map_fn(function (_var) {
            var fieldName = _var.c;
            var _v0 = _var.aK;
            if (_v0.$ === 7) {
                var inner = _v0.a;
                return _Utils_Tuple2(fieldName, $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray([namespace.bv]), "Option", _List_fromArray([
                    $author$project$Generate$Input$Encode$toElmType_fn(namespace, schema, inner, $author$project$GraphQL$Schema$getWrap(inner))
                ])));
            }
            else {
                return _Utils_Tuple2(fieldName, $author$project$Generate$Input$Encode$toElmType_fn(namespace, schema, _var.aK, $author$project$GraphQL$Schema$getWrap(_var.aK)));
            }
        }, varDefs))))));
    }, $author$project$Generate$Input$Encode$toInputRecordAlias = F4($author$project$Generate$Input$Encode$toInputRecordAlias_fn);
    var $author$project$GraphQL$Operations$CanonicalAST$commit = function (cursor) {
        var _v0 = cursor.hZ;
        if (_v0 === "") {
            return cursor;
        }
        else {
            return _Utils_update(cursor, {
                g7: function () {
                    var _v1 = cursor.g7;
                    if (_v1.$ === 1) {
                        return $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$string(cursor.hZ));
                    }
                    else {
                        var existing = _v1.a;
                        return $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Op$applyInfix_fn($mdgriffith$elm_codegen$Elm$Op$append_a0, $mdgriffith$elm_codegen$Elm$Op$append_a1, existing, $mdgriffith$elm_codegen$Elm$string(cursor.hZ)));
                    }
                }(),
                hZ: ""
            });
        }
    };
    var $author$project$GraphQL$Operations$CanonicalAST$initCursor = function (version) {
        return { g0: 0, g7: $elm$core$Maybe$Nothing, hZ: "", ic: version };
    };
    var $author$project$GraphQL$Operations$CanonicalAST$addExp_fn = function (_new, cursor) {
        var committed = $author$project$GraphQL$Operations$CanonicalAST$commit(cursor);
        return _Utils_update(committed, {
            g7: function () {
                var _v0 = committed.g7;
                if (_v0.$ === 1) {
                    return $elm$core$Maybe$Just(_new);
                }
                else {
                    var existing = _v0.a;
                    return $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Op$applyInfix_fn($mdgriffith$elm_codegen$Elm$Op$append_a0, $mdgriffith$elm_codegen$Elm$Op$append_a1, existing, _new));
                }
            }()
        });
    }, $author$project$GraphQL$Operations$CanonicalAST$addExp = F2($author$project$GraphQL$Operations$CanonicalAST$addExp_fn);
    var $author$project$GraphQL$Operations$CanonicalAST$addLevelToCursor = function (cursor) {
        return _Utils_update(cursor, { g0: cursor.g0 + 1 });
    };
    var $author$project$GraphQL$Operations$CanonicalAST$addString_fn = function (str, cursor) {
        if (str === "") {
            return cursor;
        }
        else {
            return _Utils_update(cursor, {
                hZ: _Utils_ap(cursor.hZ, str)
            });
        }
    }, $author$project$GraphQL$Operations$CanonicalAST$addString = F2($author$project$GraphQL$Operations$CanonicalAST$addString_fn);
    var $author$project$GraphQL$Operations$CanonicalAST$aliasedNameExp_fn = function (details, cursor) {
        if (!cursor.g0) {
            var _v0 = details.gI;
            if (_v0.$ === 1) {
                return $author$project$GraphQL$Operations$CanonicalAST$addExp_fn(A2($author$project$Gen$GraphQL$Engine$call_.gx, cursor.ic, $mdgriffith$elm_codegen$Elm$string($author$project$GraphQL$Operations$CanonicalAST$nameToString(details.c))), cursor);
            }
            else {
                var alias_ = _v0.a;
                return $author$project$GraphQL$Operations$CanonicalAST$addString_fn(": " + $author$project$GraphQL$Operations$CanonicalAST$nameToString(details.c), $author$project$GraphQL$Operations$CanonicalAST$addExp_fn(A2($author$project$Gen$GraphQL$Engine$call_.gz, cursor.ic, $mdgriffith$elm_codegen$Elm$string($author$project$GraphQL$Operations$CanonicalAST$nameToString(alias_))), cursor));
            }
        }
        else {
            var _v1 = details.gI;
            if (_v1.$ === 1) {
                return $author$project$GraphQL$Operations$CanonicalAST$addString_fn($author$project$GraphQL$Operations$CanonicalAST$nameToString(details.c), cursor);
            }
            else {
                var alias_ = _v1.a;
                return $author$project$GraphQL$Operations$CanonicalAST$addString_fn($author$project$GraphQL$Operations$CanonicalAST$nameToString(alias_) + (": " + $author$project$GraphQL$Operations$CanonicalAST$nameToString(details.c)), cursor);
            }
        }
    }, $author$project$GraphQL$Operations$CanonicalAST$aliasedNameExp = F2($author$project$GraphQL$Operations$CanonicalAST$aliasedNameExp_fn);
    var $author$project$GraphQL$Operations$CanonicalAST$removeLevelToCursor = function (cursor) {
        return _Utils_update(cursor, { g0: cursor.g0 - 1 });
    };
    var $author$project$GraphQL$Operations$CanonicalAST$addArgValue_fn = function (val, cursor) {
        switch (val.$) {
            case 0:
                var str = val.a;
                return $author$project$GraphQL$Operations$CanonicalAST$addString_fn("\"" + (str + "\""), cursor);
            case 1:
                var _int = val.a;
                return $author$project$GraphQL$Operations$CanonicalAST$addString_fn($elm$core$String$fromInt(_int), cursor);
            case 2:
                var dec = val.a;
                return $author$project$GraphQL$Operations$CanonicalAST$addString_fn($elm$core$String$fromFloat(dec), cursor);
            case 3:
                if (val.a) {
                    return $author$project$GraphQL$Operations$CanonicalAST$addString_fn("true", cursor);
                }
                else {
                    return $author$project$GraphQL$Operations$CanonicalAST$addString_fn("false", cursor);
                }
            case 4:
                return $author$project$GraphQL$Operations$CanonicalAST$addString_fn("null", cursor);
            case 5:
                var str = val.a;
                return $author$project$GraphQL$Operations$CanonicalAST$addString_fn(str, cursor);
            case 6:
                var _var = val.a;
                return $author$project$GraphQL$Operations$CanonicalAST$addExp_fn(A2($author$project$Gen$GraphQL$Engine$call_.gz, cursor.ic, $mdgriffith$elm_codegen$Elm$string("$" + $author$project$GraphQL$Operations$AST$nameToString(_var.c))), cursor);
            case 7:
                var keyVals = val.a;
                return $author$project$GraphQL$Operations$CanonicalAST$addString_fn("}", $elm$core$List$foldr_fn(F2(function (_v1, _v2) {
                    var key = _v1.a;
                    var innerVal = _v1.b;
                    var afterFirst = _v2.a;
                    var curs = _v2.b;
                    return _Utils_Tuple2(true, $author$project$GraphQL$Operations$CanonicalAST$addArgValue_fn(innerVal, $author$project$GraphQL$Operations$CanonicalAST$addString_fn($author$project$GraphQL$Operations$AST$nameToString(key) + ": ", $author$project$GraphQL$Operations$CanonicalAST$addString_fn(afterFirst ? ", " : "", curs))));
                }), _Utils_Tuple2(false, $author$project$GraphQL$Operations$CanonicalAST$addString_fn("{", cursor)), keyVals).b);
            default:
                var vals = val.a;
                return $author$project$GraphQL$Operations$CanonicalAST$addString_fn("]", $elm$core$List$foldr_fn(F2(function (innerVal, _v3) {
                    var afterFirst = _v3.a;
                    var curs = _v3.b;
                    return _Utils_Tuple2(true, $author$project$GraphQL$Operations$CanonicalAST$addArgValue_fn(innerVal, $author$project$GraphQL$Operations$CanonicalAST$addString_fn(afterFirst ? ", " : "", curs)));
                }), _Utils_Tuple2(false, $author$project$GraphQL$Operations$CanonicalAST$addString_fn("[", cursor)), vals).b);
        }
    }, $author$project$GraphQL$Operations$CanonicalAST$addArgValue = F2($author$project$GraphQL$Operations$CanonicalAST$addArgValue_fn);
    var $author$project$GraphQL$Operations$CanonicalAST$renderArgumentsExp_fn = function (args, cursor) {
        if (!args.b) {
            return cursor;
        }
        else {
            return $author$project$GraphQL$Operations$CanonicalAST$addString_fn(")", $elm$core$List$foldr_fn(F2(function (arg, _v1) {
                var afterFirst = _v1.a;
                var curs = _v1.b;
                return _Utils_Tuple2(true, $author$project$GraphQL$Operations$CanonicalAST$addArgValue_fn(arg.bK, $author$project$GraphQL$Operations$CanonicalAST$addString_fn($author$project$GraphQL$Operations$AST$nameToString(arg.c) + ": ", $author$project$GraphQL$Operations$CanonicalAST$addString_fn(afterFirst ? ", " : "", curs))));
            }), _Utils_Tuple2(false, $author$project$GraphQL$Operations$CanonicalAST$addString_fn(" (", cursor)), args).b);
        }
    }, $author$project$GraphQL$Operations$CanonicalAST$renderArgumentsExp = F2($author$project$GraphQL$Operations$CanonicalAST$renderArgumentsExp_fn);
    var $author$project$GraphQL$Operations$CanonicalAST$renderField_fn = function (field, cursor) {
        if (field.$ === 1) {
            var frag = field.a;
            return $author$project$GraphQL$Operations$CanonicalAST$addExp_fn(A2($author$project$Gen$GraphQL$Engine$call_.gz, cursor.ic, $mdgriffith$elm_codegen$Elm$string($author$project$GraphQL$Operations$CanonicalAST$nameToString(frag.dj.c))), $author$project$GraphQL$Operations$CanonicalAST$addString_fn("\n...", cursor));
        }
        else {
            var details = field.a;
            return $author$project$GraphQL$Operations$CanonicalAST$renderSelection_fn(details.hT, $author$project$GraphQL$Operations$CanonicalAST$renderArgumentsExp_fn(details.b6, $author$project$GraphQL$Operations$CanonicalAST$aliasedNameExp_fn(details, cursor)));
        }
    }, $author$project$GraphQL$Operations$CanonicalAST$renderField = F2($author$project$GraphQL$Operations$CanonicalAST$renderField_fn);
    var $author$project$GraphQL$Operations$CanonicalAST$renderFields_fn = function (fields, cursor) {
        return $elm$core$List$foldr_fn(F2(function (sel, _v1) {
            var afterFirst = _v1.a;
            var c = _v1.b;
            return _Utils_Tuple2(true, $author$project$GraphQL$Operations$CanonicalAST$renderField_fn(sel, $author$project$GraphQL$Operations$CanonicalAST$addString_fn(afterFirst ? "\n" : "", c)));
        }), _Utils_Tuple2(false, cursor), fields).b;
    }, $author$project$GraphQL$Operations$CanonicalAST$renderFields = F2($author$project$GraphQL$Operations$CanonicalAST$renderFields_fn);
    var $author$project$GraphQL$Operations$CanonicalAST$renderSelection_fn = function (selection, cursor) {
        switch (selection.$) {
            case 0:
                var details = selection.a;
                return cursor;
            case 1:
                var details = selection.a;
                return cursor;
            case 2:
                var fields = selection.a;
                return $author$project$GraphQL$Operations$CanonicalAST$addString_fn(" }", $author$project$GraphQL$Operations$CanonicalAST$removeLevelToCursor($author$project$GraphQL$Operations$CanonicalAST$renderFields_fn(fields, $author$project$GraphQL$Operations$CanonicalAST$addLevelToCursor($author$project$GraphQL$Operations$CanonicalAST$addString_fn(" {", cursor)))));
            case 3:
                var details = selection.a;
                return $author$project$GraphQL$Operations$CanonicalAST$addString_fn(" }", $author$project$GraphQL$Operations$CanonicalAST$removeLevelToCursor(function (currentCursor) {
                    return $elm$core$List$foldr_fn($author$project$GraphQL$Operations$CanonicalAST$renderVariant, currentCursor, details.gw);
                }($author$project$GraphQL$Operations$CanonicalAST$addLevelToCursor($author$project$GraphQL$Operations$CanonicalAST$addString_fn((!($elm$core$List$isEmpty(details.hT) && $elm$core$List$isEmpty(details.gw))) ? "\n" : "", $author$project$GraphQL$Operations$CanonicalAST$removeLevelToCursor($author$project$GraphQL$Operations$CanonicalAST$renderFields_fn(details.hT, $author$project$GraphQL$Operations$CanonicalAST$addLevelToCursor($author$project$GraphQL$Operations$CanonicalAST$addString_fn(" {", cursor)))))))));
            default:
                var details = selection.a;
                return $author$project$GraphQL$Operations$CanonicalAST$addString_fn(" }", $author$project$GraphQL$Operations$CanonicalAST$removeLevelToCursor(function (currentCursor) {
                    return $elm$core$List$foldr_fn($author$project$GraphQL$Operations$CanonicalAST$renderVariant, currentCursor, details.gw);
                }($author$project$GraphQL$Operations$CanonicalAST$addLevelToCursor($author$project$GraphQL$Operations$CanonicalAST$addString_fn((!($elm$core$List$isEmpty(details.hT) && $elm$core$List$isEmpty(details.gw))) ? "\n" : "", $author$project$GraphQL$Operations$CanonicalAST$removeLevelToCursor($author$project$GraphQL$Operations$CanonicalAST$renderFields_fn(details.hT, $author$project$GraphQL$Operations$CanonicalAST$addLevelToCursor($author$project$GraphQL$Operations$CanonicalAST$addString_fn(" {", cursor)))))))));
        }
    }, $author$project$GraphQL$Operations$CanonicalAST$renderSelection = F2($author$project$GraphQL$Operations$CanonicalAST$renderSelection_fn);
    var $author$project$GraphQL$Operations$CanonicalAST$renderVariant_fn = function (instance, cursor) {
        return $author$project$GraphQL$Operations$CanonicalAST$addString_fn("}", $author$project$GraphQL$Operations$CanonicalAST$removeLevelToCursor($author$project$GraphQL$Operations$CanonicalAST$renderFields_fn(instance.hT, $author$project$GraphQL$Operations$CanonicalAST$addLevelToCursor($author$project$GraphQL$Operations$CanonicalAST$addString_fn("\n... on " + ($author$project$GraphQL$Operations$CanonicalAST$nameToString(instance.h0) + " {"), cursor)))));
    }, $author$project$GraphQL$Operations$CanonicalAST$renderVariant = F2($author$project$GraphQL$Operations$CanonicalAST$renderVariant_fn);
    var $author$project$GraphQL$Operations$CanonicalAST$toRendererExpression_fn = function (version, _v0) {
        var def = _v0;
        return function (cursor) {
            return $elm$core$Maybe$withDefault_fn($mdgriffith$elm_codegen$Elm$string(""), cursor.g7);
        }($author$project$GraphQL$Operations$CanonicalAST$commit($author$project$GraphQL$Operations$CanonicalAST$renderFields_fn(def.hc, $author$project$GraphQL$Operations$CanonicalAST$initCursor(version))));
    }, $author$project$GraphQL$Operations$CanonicalAST$toRendererExpression = F2($author$project$GraphQL$Operations$CanonicalAST$toRendererExpression_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$generateDefinition_fn = function (_v0, def) {
        var namespace = _v0.bv;
        var schema = _v0.hQ;
        var document = _v0.cC;
        var path = _v0.hH;
        var gqlDir = _v0.al;
        var op = def;
        var primaryResult = _List_Cons($mdgriffith$elm_codegen$Elm$comment(" Return data "), $author$project$GraphQL$Operations$GenerateSelection$generatePrimaryResultTypeAliased_fn(namespace, def));
        var opName = $author$project$GraphQL$Operations$GenerateSelection$getOpName(def);
        var paths = $author$project$Generate$Path$operation({
            al: gqlDir,
            c: $author$project$Utils$String$formatTypename(opName),
            hH: path
        });
        var decodersAndStuff = _List_fromArray([
            $mdgriffith$elm_codegen$Elm$declaration_fn("decoder_", $mdgriffith$elm_codegen$Elm$withType_fn($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$int]), $author$project$Gen$Json$Decode$annotation_.gY($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, $author$project$GraphQL$Operations$GenerateSelection$responseName))), $mdgriffith$elm_codegen$Elm$fn_fn(_Utils_Tuple2("version_", $elm$core$Maybe$Nothing), function (version) {
                return $author$project$GraphQL$Operations$GenerateSelection$generateDecoder_fn(version, namespace, def);
            }))),
            $mdgriffith$elm_codegen$Elm$declaration_fn("toPayload_", $mdgriffith$elm_codegen$Elm$fn_fn(_Utils_Tuple2("version_", $elm$core$Maybe$Nothing), function (version) {
                return $author$project$GraphQL$Operations$CanonicalAST$toRendererExpression_fn(version, def);
            })),
            $mdgriffith$elm_codegen$Elm$declaration_fn("toFragments_", $mdgriffith$elm_codegen$Elm$fn_fn(_Utils_Tuple2("version_", $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$int)), function (version) {
                return $author$project$GraphQL$Operations$CanonicalAST$toFragmentRendererExpression_fn(version, document, def);
            }))
        ]);
        var auxHelpers = $author$project$GraphQL$Operations$GenerateSelection$aliasedTypes_fn(namespace, def);
        var _arguments = $elm$core$List$map_fn($author$project$GraphQL$Operations$GenerateSelection$toArgument, op.ib);
        var input = function () {
            var _v4 = op.ib;
            if (!_v4.b) {
                return _List_Nil;
            }
            else {
                return _List_fromArray([
                    $author$project$Generate$Input$Encode$toInputRecordAlias_fn(namespace, schema, "Input", _arguments)
                ]);
            }
        }();
        var query = function () {
            var _v1 = op.ib;
            if (!_v1.b) {
                return $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                    g9: true,
                    hj: $elm$core$Maybe$Just("query")
                }, $mdgriffith$elm_codegen$Elm$declaration_fn($author$project$GraphQL$Operations$GenerateSelection$opValueName(op.by), $mdgriffith$elm_codegen$Elm$withType_fn($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray([namespace.bv]), $author$project$GraphQL$Operations$GenerateSelection$opTypeName(op.by), _List_fromArray([
                    $mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, $author$project$GraphQL$Operations$GenerateSelection$responseName)
                ])), A3($author$project$Gen$GraphQL$Engine$call_.cd, function () {
                    var _v2 = $author$project$GraphQL$Operations$CanonicalAST$operationLabel(def);
                    if (_v2.$ === 1) {
                        return $mdgriffith$elm_codegen$Elm$nothing;
                    }
                    else {
                        var label = _v2.a;
                        return $mdgriffith$elm_codegen$Elm$just($mdgriffith$elm_codegen$Elm$string(label));
                    }
                }(), $mdgriffith$elm_codegen$Elm$fn_fn(_Utils_Tuple2("version_", $elm$core$Maybe$Nothing), function (version) {
                    return $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
                        _Utils_Tuple2("args", $mdgriffith$elm_codegen$Elm$list(_List_Nil)),
                        _Utils_Tuple2("body", $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$val("toPayload_"), _List_fromArray([version]))),
                        _Utils_Tuple2("fragments", $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$val("toFragments_"), _List_fromArray([version])))
                    ]));
                }), $mdgriffith$elm_codegen$Elm$val("decoder_")))));
            }
            else {
                return $mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                    g9: true,
                    hj: $elm$core$Maybe$Just("query")
                }, $mdgriffith$elm_codegen$Elm$declaration_fn($author$project$GraphQL$Operations$GenerateSelection$opValueName(op.by), $mdgriffith$elm_codegen$Elm$fn_fn(_Utils_Tuple2("args", $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, "Input"))), function (args) {
                    var vars = $author$project$Gen$GraphQL$Engine$inputObjectToFieldList($author$project$Generate$Input$Encode$fullRecordToInputObject_fn(namespace, schema, _arguments, args));
                    return $mdgriffith$elm_codegen$Elm$withType_fn($mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_fromArray([namespace.bv]), $author$project$GraphQL$Operations$GenerateSelection$opTypeName(op.by), _List_fromArray([
                        $mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, $author$project$GraphQL$Operations$GenerateSelection$responseName)
                    ])), A3($author$project$Gen$GraphQL$Engine$call_.cd, function () {
                        var _v3 = $author$project$GraphQL$Operations$CanonicalAST$operationLabel(def);
                        if (_v3.$ === 1) {
                            return $mdgriffith$elm_codegen$Elm$nothing;
                        }
                        else {
                            var label = _v3.a;
                            return $mdgriffith$elm_codegen$Elm$just($mdgriffith$elm_codegen$Elm$string(label));
                        }
                    }(), $mdgriffith$elm_codegen$Elm$fn_fn(_Utils_Tuple2("version_", $elm$core$Maybe$Nothing), function (version) {
                        return $mdgriffith$elm_codegen$Elm$record(_List_fromArray([
                            _Utils_Tuple2("args", vars),
                            _Utils_Tuple2("body", $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$val("toPayload_"), _List_fromArray([version]))),
                            _Utils_Tuple2("fragments", $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$val("toFragments_"), _List_fromArray([version])))
                        ]));
                    }), $mdgriffith$elm_codegen$Elm$val("decoder_")));
                })));
            }
        }();
        return $author$project$GraphQL$Operations$GenerateSelection$replaceFilePath_fn(paths.db, $mdgriffith$elm_codegen$Elm$fileWith_fn(paths.eB, {
            gJ: _List_Nil,
            g1: function (docs) {
                return _List_fromArray([
                    "This file is generated from " + (path + (" using `elm-gql`" + ("\n\nPlease avoid modifying directly.\n" + $author$project$GraphQL$Operations$GenerateSelection$renderStandardComment(docs))))
                ]);
            }
        }, _Utils_ap(input, _List_Cons(query, _Utils_ap(primaryResult, _Utils_ap(auxHelpers, decodersAndStuff))))));
    }, $author$project$GraphQL$Operations$GenerateSelection$generateDefinition = F2($author$project$GraphQL$Operations$GenerateSelection$generateDefinition_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$generateFragmentDecoder_fn = function (namespace, frag) {
        var _v0 = frag.hT;
        switch (_v0.$) {
            case 0:
                var fragSelection = _v0.a;
                return $mdgriffith$elm_codegen$Elm$fn_fn(_Utils_Tuple2("start_", $elm$core$Maybe$Nothing), function (start) {
                    return $author$project$GraphQL$Operations$GenerateSelection$decodeFields_fn(namespace, $mdgriffith$elm_codegen$Elm$int(0), $author$project$GraphQL$Operations$GenerateSelection$initIndex, fragSelection.hT, start);
                });
            case 1:
                var fragSelection = _v0.a;
                return $mdgriffith$elm_codegen$Elm$withType_fn($author$project$Gen$Json$Decode$annotation_.gY($mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, $author$project$GraphQL$Operations$CanonicalAST$nameToString(frag.c))), $author$project$GraphQL$Operations$GenerateSelection$decodeUnion_fn(namespace, $mdgriffith$elm_codegen$Elm$int(0), $author$project$GraphQL$Operations$GenerateSelection$initIndex, fragSelection));
            default:
                var fragSelection = _v0.a;
                return $mdgriffith$elm_codegen$Elm$fn_fn(_Utils_Tuple2("start_", $elm$core$Maybe$Nothing), function (start) {
                    return $author$project$GraphQL$Operations$GenerateSelection$decodeInterface_fn(namespace, $mdgriffith$elm_codegen$Elm$int(0), $author$project$GraphQL$Operations$GenerateSelection$initIndex, fragSelection, start);
                });
        }
    }, $author$project$GraphQL$Operations$GenerateSelection$generateFragmentDecoder = F2($author$project$GraphQL$Operations$GenerateSelection$generateFragmentDecoder_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$generateFragmentTypes_fn = function (namespace, frag) {
        var name = $author$project$GraphQL$Operations$CanonicalAST$nameToString(frag.c);
        var _v0 = frag.hT;
        switch (_v0.$) {
            case 0:
                var selection = _v0.a.hT;
                var newDecls = $author$project$GraphQL$Operations$GenerateSelection$generateTypesForFields_fn($author$project$GraphQL$Operations$GenerateSelection$genAliasedTypes(namespace), _List_Nil, selection);
                var fieldResult = $author$project$GraphQL$Operations$GenerateSelection$toAliasedFields_fn(namespace, _List_Nil, selection);
                return _List_Cons($mdgriffith$elm_codegen$Elm$expose($mdgriffith$elm_codegen$Elm$alias_fn(name, fieldResult)), newDecls);
            case 1:
                var union = _v0.a;
                var newDecls = $author$project$GraphQL$Operations$GenerateSelection$generateTypesForFields_fn($author$project$GraphQL$Operations$GenerateSelection$genAliasedTypes(namespace), _List_Nil, union.hT);
                var ghostVariants = $elm$core$List$map_fn(A2($elm$core$Basics$composeL, $mdgriffith$elm_codegen$Elm$variant, $author$project$GraphQL$Operations$GenerateSelection$unionVariantName), union.ff);
                var _final = $elm$core$List$foldl_fn($author$project$GraphQL$Operations$GenerateSelection$unionVars(namespace), { t: _List_Nil, gw: _List_Nil }, union.gw);
                return _List_Cons($mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                    g9: true,
                    hj: $elm$core$Maybe$Just("unions")
                }, $mdgriffith$elm_codegen$Elm$customType_fn(name, _Utils_ap(_final.gw, ghostVariants))), _Utils_ap(_final.t, newDecls));
            default:
                var _interface = _v0.a;
                var selectingForVariants = function () {
                    var _v1 = _interface.gw;
                    if (!_v1.b) {
                        return false;
                    }
                    else {
                        return true;
                    }
                }();
                var newDecls = $author$project$GraphQL$Operations$GenerateSelection$generateTypesForFields_fn($author$project$GraphQL$Operations$GenerateSelection$genAliasedTypes(namespace), _List_Nil, _interface.hT);
                var interfaceRecord = $author$project$GraphQL$Operations$GenerateSelection$toAliasedFields_fn(namespace, selectingForVariants ? _List_fromArray([
                    _Utils_Tuple2("specifics_", $mdgriffith$elm_codegen$Elm$Annotation$named_fn(_List_Nil, name + "_Specifics"))
                ]) : _List_Nil, _interface.hT);
                var _final = $elm$core$List$foldl_fn($author$project$GraphQL$Operations$GenerateSelection$interfaceVariants(namespace), { t: _List_Nil, gw: _List_Nil }, _interface.gw);
                var withSpecificType = function (existingList) {
                    if (selectingForVariants) {
                        var ghostVariants = $elm$core$List$map_fn(A2($elm$core$Basics$composeL, $mdgriffith$elm_codegen$Elm$variant, $author$project$GraphQL$Operations$GenerateSelection$unionVariantName), _interface.ff);
                        return _List_Cons($mdgriffith$elm_codegen$Elm$alias_fn(name, interfaceRecord), _List_Cons($mdgriffith$elm_codegen$Internal$Compiler$exposeWith_fn({
                            g9: true,
                            hj: $elm$core$Maybe$Just("unions")
                        }, $mdgriffith$elm_codegen$Elm$customType_fn(name + "_Specifics", _Utils_ap(_final.gw, ghostVariants))), existingList));
                    }
                    else {
                        return _List_Cons($mdgriffith$elm_codegen$Elm$alias_fn(name, interfaceRecord), existingList);
                    }
                };
                return withSpecificType(_Utils_ap(_final.t, newDecls));
        }
    }, $author$project$GraphQL$Operations$GenerateSelection$generateFragmentTypes = F2($author$project$GraphQL$Operations$GenerateSelection$generateFragmentTypes_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$generateFragment_fn = function (_v0, frag) {
        var namespace = _v0.bv;
        var schema = _v0.hQ;
        var document = _v0.cC;
        var path = _v0.hH;
        var gqlDir = _v0.al;
        var paths = $author$project$Generate$Path$fragment({
            al: gqlDir,
            c: $author$project$Utils$String$formatTypename($author$project$GraphQL$Operations$CanonicalAST$nameToString(frag.c)),
            hH: path
        });
        var fragmentType = $author$project$GraphQL$Operations$GenerateSelection$generateFragmentTypes_fn(namespace, frag);
        var fragmentDecoders = $mdgriffith$elm_codegen$Elm$expose($mdgriffith$elm_codegen$Elm$declaration_fn("decoder", $author$project$GraphQL$Operations$GenerateSelection$generateFragmentDecoder_fn(namespace, frag)));
        return $author$project$GraphQL$Operations$GenerateSelection$replaceFilePath_fn(paths.db, $mdgriffith$elm_codegen$Elm$fileWith_fn(paths.eB, {
            gJ: _List_Nil,
            g1: function (docs) {
                return _List_fromArray([
                    "This file is generated from " + (path + (" using `elm-gql`" + ("\n\nPlease avoid modifying directly.\n\n" + $author$project$GraphQL$Operations$GenerateSelection$renderStandardComment(docs))))
                ]);
            }
        }, _Utils_ap(fragmentType, _List_fromArray([fragmentDecoders]))));
    }, $author$project$GraphQL$Operations$GenerateSelection$generateFragment = F2($author$project$GraphQL$Operations$GenerateSelection$generateFragment_fn);
    var $author$project$GraphQL$Operations$GenerateSelection$generate = function (opts) {
        return _Utils_ap($elm$core$List$map_fn($author$project$GraphQL$Operations$GenerateSelection$generateDefinition(opts), opts.cC.g_), $elm$core$List$map_fn($author$project$GraphQL$Operations$GenerateSelection$generateFragment(opts), opts.cC.hf));
    };
    var $author$project$GraphQL$Operations$AST$Document = function (definitions) {
        return { g_: definitions };
    };
    var $elm$parser$Parser$ExpectingEnd = { $: 10 };
    var $elm$parser$Parser$Advanced$Bad_fn = function (a, b) {
        return { $: 1, a: a, b: b };
    }, $elm$parser$Parser$Advanced$Bad = F2($elm$parser$Parser$Advanced$Bad_fn);
    var $elm$parser$Parser$Advanced$Good_fn = function (a, b, c) {
        return { $: 0, a: a, b: b, c: c };
    }, $elm$parser$Parser$Advanced$Good = F3($elm$parser$Parser$Advanced$Good_fn);
    var $elm$parser$Parser$Advanced$Parser = $elm$core$Basics$identity;
    var $elm$parser$Parser$Advanced$AddRight_fn = function (a, b) {
        return { $: 1, a: a, b: b };
    }, $elm$parser$Parser$Advanced$AddRight = F2($elm$parser$Parser$Advanced$AddRight_fn);
    var $elm$parser$Parser$Advanced$DeadEnd_fn = function (row, col, problem, contextStack) {
        return { gS: col, az: contextStack, hJ: problem, fv: row };
    }, $elm$parser$Parser$Advanced$DeadEnd = F4($elm$parser$Parser$Advanced$DeadEnd_fn);
    var $elm$parser$Parser$Advanced$Empty = { $: 0 };
    var $elm$parser$Parser$Advanced$fromState_fn = function (s, x) {
        return $elm$parser$Parser$Advanced$AddRight_fn($elm$parser$Parser$Advanced$Empty, $elm$parser$Parser$Advanced$DeadEnd_fn(s.fv, s.gS, x, s.g));
    }, $elm$parser$Parser$Advanced$fromState = F2($elm$parser$Parser$Advanced$fromState_fn);
    var $elm$parser$Parser$Advanced$end = function (x) {
        return function (s) {
            return _Utils_eq($elm$core$String$length(s.bE), s.aH) ? $elm$parser$Parser$Advanced$Good_fn(false, 0, s) : $elm$parser$Parser$Advanced$Bad_fn(false, $elm$parser$Parser$Advanced$fromState_fn(s, x));
        };
    };
    var $elm$parser$Parser$end = $elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd);
    var $elm$core$Basics$always_fn = function (a, _v0) {
        return a;
    }, $elm$core$Basics$always = F2($elm$core$Basics$always_fn);
    var $elm$parser$Parser$Advanced$map2_fn = function (func, _v0, _v1) {
        var parseA = _v0;
        var parseB = _v1;
        return function (s0) {
            var _v2 = parseA(s0);
            if (_v2.$ === 1) {
                var p = _v2.a;
                var x = _v2.b;
                return $elm$parser$Parser$Advanced$Bad_fn(p, x);
            }
            else {
                var p1 = _v2.a;
                var a = _v2.b;
                var s1 = _v2.c;
                var _v3 = parseB(s1);
                if (_v3.$ === 1) {
                    var p2 = _v3.a;
                    var x = _v3.b;
                    return $elm$parser$Parser$Advanced$Bad_fn(p1 || p2, x);
                }
                else {
                    var p2 = _v3.a;
                    var b = _v3.b;
                    var s2 = _v3.c;
                    return $elm$parser$Parser$Advanced$Good_fn(p1 || p2, A2(func, a, b), s2);
                }
            }
        };
    }, $elm$parser$Parser$Advanced$map2_fn_unwrapped = function (func, _v0, _v1) {
        var parseA = _v0;
        var parseB = _v1;
        return function (s0) {
            var _v2 = parseA(s0);
            if (_v2.$ === 1) {
                var p = _v2.a;
                var x = _v2.b;
                return $elm$parser$Parser$Advanced$Bad_fn(p, x);
            }
            else {
                var p1 = _v2.a;
                var a = _v2.b;
                var s1 = _v2.c;
                var _v3 = parseB(s1);
                if (_v3.$ === 1) {
                    var p2 = _v3.a;
                    var x = _v3.b;
                    return $elm$parser$Parser$Advanced$Bad_fn(p1 || p2, x);
                }
                else {
                    var p2 = _v3.a;
                    var b = _v3.b;
                    var s2 = _v3.c;
                    return $elm$parser$Parser$Advanced$Good_fn(p1 || p2, func(a, b), s2);
                }
            }
        };
    }, $elm$parser$Parser$Advanced$map2 = F3($elm$parser$Parser$Advanced$map2_fn);
    var $elm$parser$Parser$Advanced$ignorer_fn = function (keepParser, ignoreParser) {
        return $elm$parser$Parser$Advanced$map2_fn($elm$core$Basics$always, keepParser, ignoreParser);
    }, $elm$parser$Parser$Advanced$ignorer = F2($elm$parser$Parser$Advanced$ignorer_fn);
    var $elm$parser$Parser$ignorer = $elm$parser$Parser$Advanced$ignorer;
    var $elm$parser$Parser$Advanced$keeper_fn = function (parseFunc, parseArg) {
        return $elm$parser$Parser$Advanced$map2_fn($elm$core$Basics$apL, parseFunc, parseArg);
    }, $elm$parser$Parser$Advanced$keeper = F2($elm$parser$Parser$Advanced$keeper_fn);
    var $elm$parser$Parser$keeper = $elm$parser$Parser$Advanced$keeper;
    var $elm$parser$Parser$Advanced$loopHelp_fn = function (p, state, callback, s0) {
        loopHelp: while (true) {
            var _v0 = callback(state);
            var parse = _v0;
            var _v1 = parse(s0);
            if (!_v1.$) {
                var p1 = _v1.a;
                var step = _v1.b;
                var s1 = _v1.c;
                if (!step.$) {
                    var newState = step.a;
                    var $temp$p = p || p1, $temp$state = newState, $temp$callback = callback, $temp$s0 = s1;
                    p = $temp$p;
                    state = $temp$state;
                    callback = $temp$callback;
                    s0 = $temp$s0;
                    continue loopHelp;
                }
                else {
                    var result = step.a;
                    return $elm$parser$Parser$Advanced$Good_fn(p || p1, result, s1);
                }
            }
            else {
                var p1 = _v1.a;
                var x = _v1.b;
                return $elm$parser$Parser$Advanced$Bad_fn(p || p1, x);
            }
        }
    }, $elm$parser$Parser$Advanced$loopHelp = F4($elm$parser$Parser$Advanced$loopHelp_fn);
    var $elm$parser$Parser$Advanced$loop_fn = function (state, callback) {
        return function (s) {
            return $elm$parser$Parser$Advanced$loopHelp_fn(false, state, callback, s);
        };
    }, $elm$parser$Parser$Advanced$loop = F2($elm$parser$Parser$Advanced$loop_fn);
    var $elm$parser$Parser$Advanced$map_fn = function (func, _v0) {
        var parse = _v0;
        return function (s0) {
            var _v1 = parse(s0);
            if (!_v1.$) {
                var p = _v1.a;
                var a = _v1.b;
                var s1 = _v1.c;
                return $elm$parser$Parser$Advanced$Good_fn(p, func(a), s1);
            }
            else {
                var p = _v1.a;
                var x = _v1.b;
                return $elm$parser$Parser$Advanced$Bad_fn(p, x);
            }
        };
    }, $elm$parser$Parser$Advanced$map = F2($elm$parser$Parser$Advanced$map_fn);
    var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
    var $elm$parser$Parser$Advanced$Done = function (a) {
        return { $: 1, a: a };
    };
    var $elm$parser$Parser$Advanced$Loop = function (a) {
        return { $: 0, a: a };
    };
    var $elm$parser$Parser$toAdvancedStep = function (step) {
        if (!step.$) {
            var s = step.a;
            return $elm$parser$Parser$Advanced$Loop(s);
        }
        else {
            var a = step.a;
            return $elm$parser$Parser$Advanced$Done(a);
        }
    };
    var $elm$parser$Parser$loop_fn = function (state, callback) {
        return $elm$parser$Parser$Advanced$loop_fn(state, function (s) {
            return $elm$parser$Parser$Advanced$map_fn($elm$parser$Parser$toAdvancedStep, callback(s));
        });
    }, $elm$parser$Parser$loop = F2($elm$parser$Parser$loop_fn);
    var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
    var $elm$parser$Parser$Advanced$chompWhileHelp_fn = function (isGood, offset, row, col, s0) {
        chompWhileHelp: while (true) {
            var newOffset = _Parser_isSubChar_fn(isGood, offset, s0.bE);
            if (newOffset === -1) {
                return $elm$parser$Parser$Advanced$Good_fn(_Utils_cmp(s0.aH, offset) < 0, 0, { gS: col, g: s0.g, h: s0.h, aH: offset, fv: row, bE: s0.bE });
            }
            else {
                if (newOffset === -2) {
                    var $temp$isGood = isGood, $temp$offset = offset + 1, $temp$row = row + 1, $temp$col = 1, $temp$s0 = s0;
                    isGood = $temp$isGood;
                    offset = $temp$offset;
                    row = $temp$row;
                    col = $temp$col;
                    s0 = $temp$s0;
                    continue chompWhileHelp;
                }
                else {
                    var $temp$isGood = isGood, $temp$offset = newOffset, $temp$row = row, $temp$col = col + 1, $temp$s0 = s0;
                    isGood = $temp$isGood;
                    offset = $temp$offset;
                    row = $temp$row;
                    col = $temp$col;
                    s0 = $temp$s0;
                    continue chompWhileHelp;
                }
            }
        }
    }, $elm$parser$Parser$Advanced$chompWhileHelp = F5($elm$parser$Parser$Advanced$chompWhileHelp_fn);
    var $elm$parser$Parser$Advanced$chompWhile = function (isGood) {
        return function (s) {
            return $elm$parser$Parser$Advanced$chompWhileHelp_fn(isGood, s.aH, s.fv, s.gS, s);
        };
    };
    var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
    var $elm$parser$Parser$Advanced$succeed = function (a) {
        return function (s) {
            return $elm$parser$Parser$Advanced$Good_fn(false, a, s);
        };
    };
    var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
    var $elm$parser$Parser$ExpectingSymbol = function (a) {
        return { $: 8, a: a };
    };
    var $elm$parser$Parser$Advanced$Token_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $elm$parser$Parser$Advanced$Token = F2($elm$parser$Parser$Advanced$Token_fn);
    var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
    var $elm$parser$Parser$Advanced$token = function (_v0) {
        var str = _v0.a;
        var expecting = _v0.b;
        var progress = !$elm$core$String$isEmpty(str);
        return function (s) {
            var _v1 = _Parser_isSubString_fn(str, s.aH, s.fv, s.gS, s.bE);
            var newOffset = _v1.a;
            var newRow = _v1.b;
            var newCol = _v1.c;
            return newOffset === -1 ? $elm$parser$Parser$Advanced$Bad_fn(false, $elm$parser$Parser$Advanced$fromState_fn(s, expecting)) : $elm$parser$Parser$Advanced$Good_fn(progress, 0, { gS: newCol, g: s.g, h: s.h, aH: newOffset, fv: newRow, bE: s.bE });
        };
    };
    var $elm$parser$Parser$Advanced$symbol = $elm$parser$Parser$Advanced$token;
    var $elm$parser$Parser$symbol = function (str) {
        return $elm$parser$Parser$Advanced$symbol($elm$parser$Parser$Advanced$Token_fn(str, $elm$parser$Parser$ExpectingSymbol(str)));
    };
    var $author$project$GraphQL$Operations$Parse$comment = $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$succeed(0), $elm$parser$Parser$symbol("#")), $elm$parser$Parser$chompWhile(function (c) {
        return c !== "\n";
    })), $elm$parser$Parser$symbol("\n"));
    var $author$project$GraphQL$Operations$AST$Fragment = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GraphQL$Operations$AST$Operation = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$GraphQL$Operations$AST$FragmentDetails_fn = function (name, typeCondition, directives, selection) {
        return { aB: directives, c: name, hT: selection, h6: typeCondition };
    }, $author$project$GraphQL$Operations$AST$FragmentDetails = F4($author$project$GraphQL$Operations$AST$FragmentDetails_fn);
    var $author$project$GraphQL$Operations$AST$Directive_fn = function (name, _arguments) {
        return { b6: _arguments, c: name };
    }, $author$project$GraphQL$Operations$AST$Directive = F2($author$project$GraphQL$Operations$AST$Directive_fn);
    var $elm$parser$Parser$Optional = 1;
    var $author$project$GraphQL$Operations$AST$Argument_fn = function (name, value) {
        return { c: name, bK: value };
    }, $author$project$GraphQL$Operations$AST$Argument = F2($author$project$GraphQL$Operations$AST$Argument_fn);
    var $elm$parser$Parser$Advanced$lazy = function (thunk) {
        return function (s) {
            var _v0 = thunk(0);
            var parse = _v0;
            return parse(s);
        };
    };
    var $elm$parser$Parser$lazy = $elm$parser$Parser$Advanced$lazy;
    var $author$project$GraphQL$Operations$AST$Name = $elm$core$Basics$identity;
    var $author$project$GraphQL$Operations$Parse$keywords = $elm$core$Set$fromList(_List_fromArray(["query", "subscription", "mutation", "on", "fragment", "true", "false", "null"]));
    var $author$project$GraphQL$Operations$Parse$multiOr_fn = function (conds, val) {
        return $elm$core$List$foldl_fn_unwrapped(function (next, memo) {
            return memo ? memo : next(val);
        }, false, conds);
    }, $author$project$GraphQL$Operations$Parse$multiOr = F2($author$project$GraphQL$Operations$Parse$multiOr_fn);
    var $elm$parser$Parser$ExpectingVariable = { $: 7 };
    var $elm$parser$Parser$Advanced$varHelp_fn = function (isGood, offset, row, col, src, indent, context) {
        varHelp: while (true) {
            var newOffset = _Parser_isSubChar_fn(isGood, offset, src);
            if (newOffset === -1) {
                return { gS: col, g: context, h: indent, aH: offset, fv: row, bE: src };
            }
            else {
                if (newOffset === -2) {
                    var $temp$isGood = isGood, $temp$offset = offset + 1, $temp$row = row + 1, $temp$col = 1, $temp$src = src, $temp$indent = indent, $temp$context = context;
                    isGood = $temp$isGood;
                    offset = $temp$offset;
                    row = $temp$row;
                    col = $temp$col;
                    src = $temp$src;
                    indent = $temp$indent;
                    context = $temp$context;
                    continue varHelp;
                }
                else {
                    var $temp$isGood = isGood, $temp$offset = newOffset, $temp$row = row, $temp$col = col + 1, $temp$src = src, $temp$indent = indent, $temp$context = context;
                    isGood = $temp$isGood;
                    offset = $temp$offset;
                    row = $temp$row;
                    col = $temp$col;
                    src = $temp$src;
                    indent = $temp$indent;
                    context = $temp$context;
                    continue varHelp;
                }
            }
        }
    }, $elm$parser$Parser$Advanced$varHelp = F7($elm$parser$Parser$Advanced$varHelp_fn);
    var $elm$parser$Parser$Advanced$variable = function (i) {
        return function (s) {
            var firstOffset = _Parser_isSubChar_fn(i.bF, s.aH, s.bE);
            if (firstOffset === -1) {
                return $elm$parser$Parser$Advanced$Bad_fn(false, $elm$parser$Parser$Advanced$fromState_fn(s, i.cW));
            }
            else {
                var s1 = firstOffset === -2 ? $elm$parser$Parser$Advanced$varHelp_fn(i.hm, s.aH + 1, s.fv + 1, 1, s.bE, s.h, s.g) : $elm$parser$Parser$Advanced$varHelp_fn(i.hm, firstOffset, s.fv, s.gS + 1, s.bE, s.h, s.g);
                var name = _String_slice_fn(s.aH, s1.aH, s.bE);
                return $elm$core$Set$member_fn(name, i.hO) ? $elm$parser$Parser$Advanced$Bad_fn(false, $elm$parser$Parser$Advanced$fromState_fn(s, i.cW)) : $elm$parser$Parser$Advanced$Good_fn(true, name, s1);
            }
        };
    };
    var $elm$parser$Parser$variable = function (i) {
        return $elm$parser$Parser$Advanced$variable({ cW: $elm$parser$Parser$ExpectingVariable, hm: i.hm, hO: i.hO, bF: i.bF });
    };
    var $author$project$GraphQL$Operations$Parse$name = $elm$parser$Parser$Advanced$map_fn($elm$core$Basics$identity, $elm$parser$Parser$variable({
        hm: $author$project$GraphQL$Operations$Parse$multiOr(_List_fromArray([
            $elm$core$Char$isAlphaNum,
            $elm$core$Basics$eq("_")
        ])),
        hO: $author$project$GraphQL$Operations$Parse$keywords,
        bF: $author$project$GraphQL$Operations$Parse$multiOr(_List_fromArray([
            $elm$core$Char$isAlpha,
            $elm$core$Basics$eq("_")
        ]))
    }));
    var $elm$core$Char$fromCode = _Char_fromCode;
    var $author$project$GraphQL$Operations$Parse$chars = {
        bb: $elm$core$Char$fromCode(13)
    };
    var $author$project$GraphQL$Operations$Parse$ignoreChars = $elm$core$Set$fromList(_List_fromArray(["\t", "\n", $author$project$GraphQL$Operations$Parse$chars.bb, " ", ","]));
    var $author$project$GraphQL$Operations$Parse$ws = $elm$parser$Parser$chompWhile(function (c) {
        return $elm$core$Set$member_fn(c, $author$project$GraphQL$Operations$Parse$ignoreChars);
    });
    var $author$project$GraphQL$Operations$Parse$kvp_ = function (valueParser) {
        return $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$succeed($elm$core$Tuple$pair), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($author$project$GraphQL$Operations$Parse$name, $author$project$GraphQL$Operations$Parse$ws), $elm$parser$Parser$symbol(":")), $author$project$GraphQL$Operations$Parse$ws)), $elm$parser$Parser$lazy(valueParser));
    };
    var $author$project$GraphQL$Operations$AST$Var = function (a) {
        return { $: 6, a: a };
    };
    var $author$project$GraphQL$Operations$AST$Boolean = function (a) {
        return { $: 3, a: a };
    };
    var $elm$parser$Parser$ExpectingKeyword = function (a) {
        return { $: 9, a: a };
    };
    var $elm$parser$Parser$Advanced$keyword = function (_v0) {
        var kwd = _v0.a;
        var expecting = _v0.b;
        var progress = !$elm$core$String$isEmpty(kwd);
        return function (s) {
            var _v1 = _Parser_isSubString_fn(kwd, s.aH, s.fv, s.gS, s.bE);
            var newOffset = _v1.a;
            var newRow = _v1.b;
            var newCol = _v1.c;
            return (newOffset === -1 || (0 <= _Parser_isSubChar_fn(function (c) {
                return $elm$core$Char$isAlphaNum(c) || (c === "_");
            }, newOffset, s.bE))) ? $elm$parser$Parser$Advanced$Bad_fn(false, $elm$parser$Parser$Advanced$fromState_fn(s, expecting)) : $elm$parser$Parser$Advanced$Good_fn(progress, 0, { gS: newCol, g: s.g, h: s.h, aH: newOffset, fv: newRow, bE: s.bE });
        };
    };
    var $elm$parser$Parser$keyword = function (kwd) {
        return $elm$parser$Parser$Advanced$keyword($elm$parser$Parser$Advanced$Token_fn(kwd, $elm$parser$Parser$ExpectingKeyword(kwd)));
    };
    var $elm$parser$Parser$Advanced$Append_fn = function (a, b) {
        return { $: 2, a: a, b: b };
    }, $elm$parser$Parser$Advanced$Append = F2($elm$parser$Parser$Advanced$Append_fn);
    var $elm$parser$Parser$Advanced$oneOfHelp_fn = function (s0, bag, parsers) {
        oneOfHelp: while (true) {
            if (!parsers.b) {
                return $elm$parser$Parser$Advanced$Bad_fn(false, bag);
            }
            else {
                var parse = parsers.a;
                var remainingParsers = parsers.b;
                var _v1 = parse(s0);
                if (!_v1.$) {
                    var step = _v1;
                    return step;
                }
                else {
                    var step = _v1;
                    var p = step.a;
                    var x = step.b;
                    if (p) {
                        return step;
                    }
                    else {
                        var $temp$s0 = s0, $temp$bag = $elm$parser$Parser$Advanced$Append_fn(bag, x), $temp$parsers = remainingParsers;
                        s0 = $temp$s0;
                        bag = $temp$bag;
                        parsers = $temp$parsers;
                        continue oneOfHelp;
                    }
                }
            }
        }
    }, $elm$parser$Parser$Advanced$oneOfHelp = F3($elm$parser$Parser$Advanced$oneOfHelp_fn);
    var $elm$parser$Parser$Advanced$oneOf = function (parsers) {
        return function (s) {
            return $elm$parser$Parser$Advanced$oneOfHelp_fn(s, $elm$parser$Parser$Advanced$Empty, parsers);
        };
    };
    var $elm$parser$Parser$oneOf = $elm$parser$Parser$Advanced$oneOf;
    var $author$project$GraphQL$Operations$Parse$boolValue = $elm$parser$Parser$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$map_fn(function (_v0) {
            return $author$project$GraphQL$Operations$AST$Boolean(true);
        }, $elm$parser$Parser$keyword("true")),
        $elm$parser$Parser$Advanced$map_fn(function (_v1) {
            return $author$project$GraphQL$Operations$AST$Boolean(false);
        }, $elm$parser$Parser$keyword("false"))
    ]));
    var $author$project$GraphQL$Operations$AST$Enum = function (a) {
        return { $: 5, a: a };
    };
    var $author$project$GraphQL$Operations$Parse$enumValue = $elm$parser$Parser$Advanced$map_fn($author$project$GraphQL$Operations$AST$Enum, $author$project$GraphQL$Operations$Parse$name);
    var $author$project$GraphQL$Operations$AST$Decimal = function (a) {
        return { $: 2, a: a };
    };
    var $author$project$GraphQL$Operations$AST$Integer = function (a) {
        return { $: 1, a: a };
    };
    var $elm$parser$Parser$UnexpectedChar = { $: 11 };
    var $elm$parser$Parser$Advanced$chompIf_fn = function (isGood, expecting) {
        return function (s) {
            var newOffset = _Parser_isSubChar_fn(isGood, s.aH, s.bE);
            return newOffset === -1 ? $elm$parser$Parser$Advanced$Bad_fn(false, $elm$parser$Parser$Advanced$fromState_fn(s, expecting)) : (newOffset === -2 ? $elm$parser$Parser$Advanced$Good_fn(true, 0, { gS: 1, g: s.g, h: s.h, aH: s.aH + 1, fv: s.fv + 1, bE: s.bE }) : $elm$parser$Parser$Advanced$Good_fn(true, 0, { gS: s.gS + 1, g: s.g, h: s.h, aH: newOffset, fv: s.fv, bE: s.bE }));
        };
    }, $elm$parser$Parser$Advanced$chompIf = F2($elm$parser$Parser$Advanced$chompIf_fn);
    var $elm$parser$Parser$chompIf = function (isGood) {
        return $elm$parser$Parser$Advanced$chompIf_fn(isGood, $elm$parser$Parser$UnexpectedChar);
    };
    var $elm$parser$Parser$Advanced$mapChompedString_fn = function (func, _v0) {
        var parse = _v0;
        return function (s0) {
            var _v1 = parse(s0);
            if (_v1.$ === 1) {
                var p = _v1.a;
                var x = _v1.b;
                return $elm$parser$Parser$Advanced$Bad_fn(p, x);
            }
            else {
                var p = _v1.a;
                var a = _v1.b;
                var s1 = _v1.c;
                return $elm$parser$Parser$Advanced$Good_fn(p, A2(func, _String_slice_fn(s0.aH, s1.aH, s0.bE), a), s1);
            }
        };
    }, $elm$parser$Parser$Advanced$mapChompedString_fn_unwrapped = function (func, _v0) {
        var parse = _v0;
        return function (s0) {
            var _v1 = parse(s0);
            if (_v1.$ === 1) {
                var p = _v1.a;
                var x = _v1.b;
                return $elm$parser$Parser$Advanced$Bad_fn(p, x);
            }
            else {
                var p = _v1.a;
                var a = _v1.b;
                var s1 = _v1.c;
                return $elm$parser$Parser$Advanced$Good_fn(p, func(_String_slice_fn(s0.aH, s1.aH, s0.bE), a), s1);
            }
        };
    }, $elm$parser$Parser$Advanced$mapChompedString = F2($elm$parser$Parser$Advanced$mapChompedString_fn);
    var $elm$parser$Parser$Advanced$getChompedString = function (parser) {
        return $elm$parser$Parser$Advanced$mapChompedString_fn($elm$core$Basics$always, parser);
    };
    var $elm$parser$Parser$getChompedString = $elm$parser$Parser$Advanced$getChompedString;
    var $elm$core$String$toFloat = _String_toFloat;
    var $elm$core$String$toInt = _String_toInt;
    var $author$project$GraphQL$Operations$Parse$intOrFloat = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$succeed(F2(function (firstPart, maybeSecond) {
        if (maybeSecond.$ === 1) {
            return $author$project$GraphQL$Operations$AST$Integer($elm$core$Maybe$withDefault_fn(0, $elm$core$String$toInt(firstPart)));
        }
        else {
            var second = maybeSecond.a;
            return $author$project$GraphQL$Operations$AST$Decimal($elm$core$Maybe$withDefault_fn(0, $elm$core$String$toFloat(_Utils_ap(firstPart, second))));
        }
    })), $elm$parser$Parser$getChompedString($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$succeed($elm$core$Basics$identity), $elm$parser$Parser$chompIf($elm$core$Char$isDigit)), $elm$parser$Parser$chompWhile($elm$core$Char$isDigit)))), $elm$parser$Parser$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$map_fn($elm$core$Maybe$Just, $elm$parser$Parser$getChompedString($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$succeed(0), $elm$parser$Parser$chompIf(function (c) {
            return c === ".";
        })), $elm$parser$Parser$chompWhile($elm$core$Char$isDigit)))),
        $elm$parser$Parser$succeed($elm$core$Maybe$Nothing)
    ])));
    var $author$project$GraphQL$Operations$AST$ListValue = function (a) {
        return { $: 8, a: a };
    };
    var $elm$parser$Parser$Advanced$andThen_fn = function (callback, _v0) {
        var parseA = _v0;
        return function (s0) {
            var _v1 = parseA(s0);
            if (_v1.$ === 1) {
                var p = _v1.a;
                var x = _v1.b;
                return $elm$parser$Parser$Advanced$Bad_fn(p, x);
            }
            else {
                var p1 = _v1.a;
                var a = _v1.b;
                var s1 = _v1.c;
                var _v2 = callback(a);
                var parseB = _v2;
                var _v3 = parseB(s1);
                if (_v3.$ === 1) {
                    var p2 = _v3.a;
                    var x = _v3.b;
                    return $elm$parser$Parser$Advanced$Bad_fn(p1 || p2, x);
                }
                else {
                    var p2 = _v3.a;
                    var b = _v3.b;
                    var s2 = _v3.c;
                    return $elm$parser$Parser$Advanced$Good_fn(p1 || p2, b, s2);
                }
            }
        };
    }, $elm$parser$Parser$Advanced$andThen = F2($elm$parser$Parser$Advanced$andThen_fn);
    var $elm$parser$Parser$Advanced$revAlways_fn = function (_v0, b) {
        return b;
    }, $elm$parser$Parser$Advanced$revAlways = F2($elm$parser$Parser$Advanced$revAlways_fn);
    var $elm$parser$Parser$Advanced$skip_fn = function (iParser, kParser) {
        return $elm$parser$Parser$Advanced$map2_fn($elm$parser$Parser$Advanced$revAlways, iParser, kParser);
    }, $elm$parser$Parser$Advanced$skip = F2($elm$parser$Parser$Advanced$skip_fn);
    var $elm$parser$Parser$Advanced$sequenceEndForbidden_fn = function (ender, ws, parseItem, sep, revItems) {
        var chompRest = function (item) {
            return $elm$parser$Parser$Advanced$sequenceEndForbidden_fn(ender, ws, parseItem, sep, _List_Cons(item, revItems));
        };
        return $elm$parser$Parser$Advanced$skip_fn(ws, $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$skip_fn(sep, $elm$parser$Parser$Advanced$skip_fn(ws, $elm$parser$Parser$Advanced$map_fn(function (item) {
                return $elm$parser$Parser$Advanced$Loop(_List_Cons(item, revItems));
            }, parseItem))),
            $elm$parser$Parser$Advanced$map_fn(function (_v0) {
                return $elm$parser$Parser$Advanced$Done($elm$core$List$reverse(revItems));
            }, ender)
        ])));
    }, $elm$parser$Parser$Advanced$sequenceEndForbidden = F5($elm$parser$Parser$Advanced$sequenceEndForbidden_fn);
    var $elm$parser$Parser$Advanced$sequenceEndMandatory_fn = function (ws, parseItem, sep, revItems) {
        return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$map_fn(function (item) {
                return $elm$parser$Parser$Advanced$Loop(_List_Cons(item, revItems));
            }, $elm$parser$Parser$Advanced$ignorer_fn(parseItem, $elm$parser$Parser$Advanced$ignorer_fn(ws, $elm$parser$Parser$Advanced$ignorer_fn(sep, ws)))),
            $elm$parser$Parser$Advanced$map_fn(function (_v0) {
                return $elm$parser$Parser$Advanced$Done($elm$core$List$reverse(revItems));
            }, $elm$parser$Parser$Advanced$succeed(0))
        ]));
    }, $elm$parser$Parser$Advanced$sequenceEndMandatory = F4($elm$parser$Parser$Advanced$sequenceEndMandatory_fn);
    var $elm$parser$Parser$Advanced$sequenceEndOptional_fn = function (ender, ws, parseItem, sep, revItems) {
        var parseEnd = $elm$parser$Parser$Advanced$map_fn(function (_v0) {
            return $elm$parser$Parser$Advanced$Done($elm$core$List$reverse(revItems));
        }, ender);
        return $elm$parser$Parser$Advanced$skip_fn(ws, $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$skip_fn(sep, $elm$parser$Parser$Advanced$skip_fn(ws, $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
                $elm$parser$Parser$Advanced$map_fn(function (item) {
                    return $elm$parser$Parser$Advanced$Loop(_List_Cons(item, revItems));
                }, parseItem),
                parseEnd
            ])))),
            parseEnd
        ])));
    }, $elm$parser$Parser$Advanced$sequenceEndOptional = F5($elm$parser$Parser$Advanced$sequenceEndOptional_fn);
    var $elm$parser$Parser$Advanced$sequenceEnd_fn = function (ender, ws, parseItem, sep, trailing) {
        var chompRest = function (item) {
            switch (trailing) {
                case 0:
                    return $elm$parser$Parser$Advanced$loop_fn(_List_fromArray([item]), A4($elm$parser$Parser$Advanced$sequenceEndForbidden, ender, ws, parseItem, sep));
                case 1:
                    return $elm$parser$Parser$Advanced$loop_fn(_List_fromArray([item]), A4($elm$parser$Parser$Advanced$sequenceEndOptional, ender, ws, parseItem, sep));
                default:
                    return $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$skip_fn(ws, $elm$parser$Parser$Advanced$skip_fn(sep, $elm$parser$Parser$Advanced$skip_fn(ws, $elm$parser$Parser$Advanced$loop_fn(_List_fromArray([item]), A3($elm$parser$Parser$Advanced$sequenceEndMandatory, ws, parseItem, sep))))), ender);
            }
        };
        return $elm$parser$Parser$Advanced$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$andThen_fn(chompRest, parseItem),
            $elm$parser$Parser$Advanced$map_fn(function (_v0) {
                return _List_Nil;
            }, ender)
        ]));
    }, $elm$parser$Parser$Advanced$sequenceEnd = F5($elm$parser$Parser$Advanced$sequenceEnd_fn);
    var $elm$parser$Parser$Advanced$sequence = function (i) {
        return $elm$parser$Parser$Advanced$skip_fn($elm$parser$Parser$Advanced$token(i.bF), $elm$parser$Parser$Advanced$skip_fn(i.a1, $elm$parser$Parser$Advanced$sequenceEnd_fn($elm$parser$Parser$Advanced$token(i.bg), i.a1, i.aS, $elm$parser$Parser$Advanced$token(i.a0), i.a5)));
    };
    var $elm$parser$Parser$Advanced$Forbidden = 0;
    var $elm$parser$Parser$Advanced$Mandatory = 2;
    var $elm$parser$Parser$Advanced$Optional = 1;
    var $elm$parser$Parser$toAdvancedTrailing = function (trailing) {
        switch (trailing) {
            case 0:
                return 0;
            case 1:
                return 1;
            default:
                return 2;
        }
    };
    var $elm$parser$Parser$Expecting = function (a) {
        return { $: 0, a: a };
    };
    var $elm$parser$Parser$toToken = function (str) {
        return $elm$parser$Parser$Advanced$Token_fn(str, $elm$parser$Parser$Expecting(str));
    };
    var $elm$parser$Parser$sequence = function (i) {
        return $elm$parser$Parser$Advanced$sequence({
            bg: $elm$parser$Parser$toToken(i.bg),
            aS: i.aS,
            a0: $elm$parser$Parser$toToken(i.a0),
            a1: i.a1,
            bF: $elm$parser$Parser$toToken(i.bF),
            a5: $elm$parser$Parser$toAdvancedTrailing(i.a5)
        });
    };
    var $author$project$GraphQL$Operations$Parse$listValue = function (valueParser) {
        return $elm$parser$Parser$Advanced$map_fn($author$project$GraphQL$Operations$AST$ListValue, $elm$parser$Parser$sequence({
            bg: "]",
            aS: $elm$parser$Parser$lazy(valueParser),
            a0: "",
            a1: $author$project$GraphQL$Operations$Parse$ws,
            bF: "[",
            a5: 1
        }));
    };
    var $author$project$GraphQL$Operations$AST$Null = { $: 4 };
    var $author$project$GraphQL$Operations$Parse$nullValue = $elm$parser$Parser$Advanced$map_fn(function (_v0) {
        return $author$project$GraphQL$Operations$AST$Null;
    }, $elm$parser$Parser$keyword("null"));
    var $author$project$GraphQL$Operations$AST$Object = function (a) {
        return { $: 7, a: a };
    };
    var $author$project$GraphQL$Operations$Parse$objectValue = function (valueParser) {
        return $elm$parser$Parser$Advanced$map_fn($author$project$GraphQL$Operations$AST$Object, $elm$parser$Parser$sequence({
            bg: "}",
            aS: $author$project$GraphQL$Operations$Parse$kvp_(valueParser),
            a0: "",
            a1: $author$project$GraphQL$Operations$Parse$ws,
            bF: "{",
            a5: 1
        }));
    };
    var $author$project$GraphQL$Operations$AST$Str = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GraphQL$Operations$Parse$stringValue = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$succeed($author$project$GraphQL$Operations$AST$Str), $elm$parser$Parser$symbol("\"")), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$getChompedString($elm$parser$Parser$chompWhile(function (c) {
        return (!_Utils_eq(c, $author$project$GraphQL$Operations$Parse$chars.bb)) && ((c !== "\n") && (c !== "\""));
    })), $elm$parser$Parser$symbol("\"")));
    var $author$project$GraphQL$Operations$AST$Variable = function (name) {
        return { c: name };
    };
    var $author$project$GraphQL$Operations$Parse$variable = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$succeed($author$project$GraphQL$Operations$AST$Variable), $elm$parser$Parser$symbol("$")), $author$project$GraphQL$Operations$Parse$name);
    function $author$project$GraphQL$Operations$Parse$cyclic$value() {
        return $elm$parser$Parser$oneOf(_List_fromArray([
            $author$project$GraphQL$Operations$Parse$boolValue,
            $author$project$GraphQL$Operations$Parse$nullValue,
            $author$project$GraphQL$Operations$Parse$intOrFloat,
            $author$project$GraphQL$Operations$Parse$stringValue,
            $author$project$GraphQL$Operations$Parse$enumValue,
            $elm$parser$Parser$Advanced$map_fn($author$project$GraphQL$Operations$AST$Var, $author$project$GraphQL$Operations$Parse$variable),
            $author$project$GraphQL$Operations$Parse$listValue(function (_v0) {
                return $author$project$GraphQL$Operations$Parse$cyclic$value();
            }),
            $author$project$GraphQL$Operations$Parse$objectValue(function (_v1) {
                return $author$project$GraphQL$Operations$Parse$cyclic$value();
            })
        ]));
    }
    var $author$project$GraphQL$Operations$Parse$value = $author$project$GraphQL$Operations$Parse$cyclic$value();
    $author$project$GraphQL$Operations$Parse$cyclic$value = function () {
        return $author$project$GraphQL$Operations$Parse$value;
    };
    var $author$project$GraphQL$Operations$Parse$kvp = $author$project$GraphQL$Operations$Parse$kvp_(function (_v0) {
        return $author$project$GraphQL$Operations$Parse$value;
    });
    var $author$project$GraphQL$Operations$Parse$argument = $elm$parser$Parser$Advanced$map_fn(function (_v0) {
        var key = _v0.a;
        var v = _v0.b;
        return $author$project$GraphQL$Operations$AST$Argument_fn(key, v);
    }, $author$project$GraphQL$Operations$Parse$kvp);
    var $author$project$GraphQL$Operations$Parse$arguments = $elm$parser$Parser$sequence({ bg: ")", aS: $author$project$GraphQL$Operations$Parse$argument, a0: "", a1: $author$project$GraphQL$Operations$Parse$ws, bF: "(", a5: 1 });
    var $author$project$GraphQL$Operations$Parse$argumentsOpt = $elm$parser$Parser$oneOf(_List_fromArray([
        $author$project$GraphQL$Operations$Parse$arguments,
        $elm$parser$Parser$succeed(_List_Nil)
    ]));
    var $author$project$GraphQL$Operations$Parse$directive = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$succeed($author$project$GraphQL$Operations$AST$Directive), $elm$parser$Parser$symbol("@")), $author$project$GraphQL$Operations$Parse$ws), $elm$parser$Parser$Advanced$ignorer_fn($author$project$GraphQL$Operations$Parse$name, $author$project$GraphQL$Operations$Parse$ws)), $author$project$GraphQL$Operations$Parse$argumentsOpt);
    var $elm$parser$Parser$Done = function (a) {
        return { $: 1, a: a };
    };
    var $elm$parser$Parser$Loop = function (a) {
        return { $: 0, a: a };
    };
    var $elm$parser$Parser$Advanced$getOffset = function (s) {
        return $elm$parser$Parser$Advanced$Good_fn(false, s.aH, s);
    };
    var $elm$parser$Parser$getOffset = $elm$parser$Parser$Advanced$getOffset;
    var $author$project$GraphQL$Operations$Parse$ifProgress_fn = function (onSucceed, parser) {
        return $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$succeed(F3(function (oldOffset, parsed, newOffset) {
            return _Utils_eq(oldOffset, newOffset) ? $elm$parser$Parser$Done(onSucceed(parsed)) : $elm$parser$Parser$Loop(parsed);
        })), $elm$parser$Parser$getOffset), parser), $elm$parser$Parser$getOffset);
    }, $author$project$GraphQL$Operations$Parse$ifProgress = F2($author$project$GraphQL$Operations$Parse$ifProgress_fn);
    var $author$project$GraphQL$Operations$Parse$directivesHelper = function (dirs) {
        return $author$project$GraphQL$Operations$Parse$ifProgress_fn($elm$core$List$reverse, $elm$parser$Parser$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$map_fn(function (d) {
                return _List_Cons(d, dirs);
            }, $author$project$GraphQL$Operations$Parse$directive),
            $elm$parser$Parser$Advanced$map_fn(function (_v0) {
                return dirs;
            }, $author$project$GraphQL$Operations$Parse$ws)
        ])));
    };
    var $author$project$GraphQL$Operations$Parse$directives = $elm$parser$Parser$loop_fn(_List_Nil, $author$project$GraphQL$Operations$Parse$directivesHelper);
    var $author$project$GraphQL$Operations$AST$Field = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GraphQL$Operations$AST$FragmentSpread_fn = function (name, directives) {
        return { aB: directives, c: name };
    }, $author$project$GraphQL$Operations$AST$FragmentSpread = F2($author$project$GraphQL$Operations$AST$FragmentSpread_fn);
    var $author$project$GraphQL$Operations$AST$FragmentSpreadSelection = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$GraphQL$Operations$AST$InlineFragment_fn = function (tag, directives, selection) {
        return { aB: directives, hT: selection, h0: tag };
    }, $author$project$GraphQL$Operations$AST$InlineFragment = F3($author$project$GraphQL$Operations$AST$InlineFragment_fn);
    var $author$project$GraphQL$Operations$AST$InlineFragmentSelection = function (a) {
        return { $: 2, a: a };
    };
    var $author$project$GraphQL$Operations$Parse$aliasedName = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$succeed(F2(function (nameOrAlias, maybeActualName) {
        if (maybeActualName.$ === 1) {
            return _Utils_Tuple2($elm$core$Maybe$Nothing, nameOrAlias);
        }
        else {
            var actualName = maybeActualName.a;
            return _Utils_Tuple2($elm$core$Maybe$Just(nameOrAlias), actualName);
        }
    })), $author$project$GraphQL$Operations$Parse$name), $elm$parser$Parser$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$succeed($elm$core$Maybe$Just), $elm$parser$Parser$chompIf(function (c) {
            return c === ":";
        })), $author$project$GraphQL$Operations$Parse$ws), $author$project$GraphQL$Operations$Parse$name),
        $elm$parser$Parser$succeed($elm$core$Maybe$Nothing)
    ])));
    var $author$project$GraphQL$Operations$Parse$loopItems_fn = function (contentParser, items) {
        return $author$project$GraphQL$Operations$Parse$ifProgress_fn($elm$core$List$reverse, $elm$parser$Parser$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$map_fn(function (d) {
                return _List_Cons(d, items);
            }, contentParser),
            $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$succeed(items), $author$project$GraphQL$Operations$Parse$comment),
            $elm$parser$Parser$Advanced$map_fn(function (_v0) {
                return items;
            }, $author$project$GraphQL$Operations$Parse$ws)
        ])));
    }, $author$project$GraphQL$Operations$Parse$loopItems = F2($author$project$GraphQL$Operations$Parse$loopItems_fn);
    function $author$project$GraphQL$Operations$Parse$cyclic$field_() {
        return $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$succeed(F4(function (_v1, args, dirs, sels) {
            var alias_ = _v1.a;
            var foundName = _v1.b;
            return { gI: alias_, b6: args, aB: dirs, c: foundName, hT: sels };
        })), $elm$parser$Parser$Advanced$ignorer_fn($author$project$GraphQL$Operations$Parse$aliasedName, $author$project$GraphQL$Operations$Parse$ws)), $elm$parser$Parser$Advanced$ignorer_fn($author$project$GraphQL$Operations$Parse$argumentsOpt, $author$project$GraphQL$Operations$Parse$ws)), $elm$parser$Parser$Advanced$ignorer_fn($author$project$GraphQL$Operations$Parse$directives, $author$project$GraphQL$Operations$Parse$ws)), $elm$parser$Parser$oneOf(_List_fromArray([
            $author$project$GraphQL$Operations$Parse$cyclic$selectionSet(),
            $elm$parser$Parser$succeed(_List_Nil)
        ])));
    }
    function $author$project$GraphQL$Operations$Parse$cyclic$inlineOrSpread_() {
        return $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$succeed($elm$core$Basics$identity), $elm$parser$Parser$symbol("...")), $author$project$GraphQL$Operations$Parse$ws), $elm$parser$Parser$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$map_fn($author$project$GraphQL$Operations$AST$InlineFragmentSelection, $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$succeed($author$project$GraphQL$Operations$AST$InlineFragment), $elm$parser$Parser$keyword("on")), $author$project$GraphQL$Operations$Parse$ws), $elm$parser$Parser$Advanced$ignorer_fn($author$project$GraphQL$Operations$Parse$name, $author$project$GraphQL$Operations$Parse$ws)), $elm$parser$Parser$Advanced$ignorer_fn($author$project$GraphQL$Operations$Parse$directives, $author$project$GraphQL$Operations$Parse$ws)), $author$project$GraphQL$Operations$Parse$cyclic$selectionSet())),
            $elm$parser$Parser$Advanced$map_fn($author$project$GraphQL$Operations$AST$FragmentSpreadSelection, $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$succeed($author$project$GraphQL$Operations$AST$FragmentSpread), $elm$parser$Parser$Advanced$ignorer_fn($author$project$GraphQL$Operations$Parse$name, $author$project$GraphQL$Operations$Parse$ws)), $author$project$GraphQL$Operations$Parse$directives))
        ])));
    }
    function $author$project$GraphQL$Operations$Parse$cyclic$selectionSet() {
        return $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$succeed($elm$core$Basics$identity), $elm$parser$Parser$symbol("{")), $author$project$GraphQL$Operations$Parse$ws), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$loop_fn(_List_Nil, $author$project$GraphQL$Operations$Parse$loopItems($elm$parser$Parser$lazy(function (_v0) {
            return $elm$parser$Parser$oneOf(_List_fromArray([
                $elm$parser$Parser$Advanced$map_fn($author$project$GraphQL$Operations$AST$Field, $author$project$GraphQL$Operations$Parse$cyclic$field_()),
                $author$project$GraphQL$Operations$Parse$cyclic$inlineOrSpread_()
            ]));
        }))), $author$project$GraphQL$Operations$Parse$ws), $elm$parser$Parser$symbol("}")));
    }
    var $author$project$GraphQL$Operations$Parse$field_ = $author$project$GraphQL$Operations$Parse$cyclic$field_();
    $author$project$GraphQL$Operations$Parse$cyclic$field_ = function () {
        return $author$project$GraphQL$Operations$Parse$field_;
    };
    var $author$project$GraphQL$Operations$Parse$inlineOrSpread_ = $author$project$GraphQL$Operations$Parse$cyclic$inlineOrSpread_();
    $author$project$GraphQL$Operations$Parse$cyclic$inlineOrSpread_ = function () {
        return $author$project$GraphQL$Operations$Parse$inlineOrSpread_;
    };
    var $author$project$GraphQL$Operations$Parse$selectionSet = $author$project$GraphQL$Operations$Parse$cyclic$selectionSet();
    $author$project$GraphQL$Operations$Parse$cyclic$selectionSet = function () {
        return $author$project$GraphQL$Operations$Parse$selectionSet;
    };
    var $author$project$GraphQL$Operations$Parse$fragment = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$succeed($author$project$GraphQL$Operations$AST$FragmentDetails), $elm$parser$Parser$keyword("fragment")), $author$project$GraphQL$Operations$Parse$ws), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($author$project$GraphQL$Operations$Parse$name, $author$project$GraphQL$Operations$Parse$ws), $elm$parser$Parser$keyword("on")), $author$project$GraphQL$Operations$Parse$ws)), $elm$parser$Parser$Advanced$ignorer_fn($author$project$GraphQL$Operations$Parse$name, $author$project$GraphQL$Operations$Parse$ws)), $elm$parser$Parser$Advanced$ignorer_fn($author$project$GraphQL$Operations$Parse$directives, $author$project$GraphQL$Operations$Parse$ws)), $author$project$GraphQL$Operations$Parse$selectionSet);
    var $author$project$GraphQL$Operations$AST$OperationDetails_fn = function (operationType, name, variableDefinitions, directives, fields) {
        return { aB: directives, hc: fields, c: name, by: operationType, ib: variableDefinitions };
    }, $author$project$GraphQL$Operations$AST$OperationDetails = F5($author$project$GraphQL$Operations$AST$OperationDetails_fn);
    var $author$project$GraphQL$Operations$Parse$nameOpt = $elm$parser$Parser$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$map_fn($elm$core$Maybe$Just, $author$project$GraphQL$Operations$Parse$name),
        $elm$parser$Parser$succeed($elm$core$Maybe$Nothing)
    ]));
    var $author$project$GraphQL$Operations$AST$Mutation = 1;
    var $author$project$GraphQL$Operations$AST$Query = 0;
    var $author$project$GraphQL$Operations$Parse$operationType = $elm$parser$Parser$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$map_fn(function (_v0) {
            return 0;
        }, $elm$parser$Parser$keyword("query")),
        $elm$parser$Parser$Advanced$map_fn(function (_v1) {
            return 1;
        }, $elm$parser$Parser$keyword("mutation"))
    ]));
    var $author$project$GraphQL$Operations$AST$VariableDefinition_fn = function (variable, type_, defaultValue) {
        return { gZ: defaultValue, aK: type_, bL: variable };
    }, $author$project$GraphQL$Operations$AST$VariableDefinition = F3($author$project$GraphQL$Operations$AST$VariableDefinition_fn);
    var $author$project$GraphQL$Operations$Parse$defaultValue = $elm$parser$Parser$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$map_fn($elm$core$Maybe$Just, $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$succeed($elm$core$Basics$identity), $elm$parser$Parser$symbol("=")), $author$project$GraphQL$Operations$Parse$ws), $author$project$GraphQL$Operations$Parse$value)),
        $elm$parser$Parser$succeed($elm$core$Maybe$Nothing)
    ]));
    var $author$project$GraphQL$Operations$AST$List_ = function (a) {
        return { $: 1, a: a };
    };
    var $author$project$GraphQL$Operations$AST$Nullable = function (a) {
        return { $: 2, a: a };
    };
    var $author$project$GraphQL$Operations$AST$Type_ = function (a) {
        return { $: 0, a: a };
    };
    var $author$project$GraphQL$Operations$Parse$listType = function (typeParser) {
        return $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$succeed($elm$core$Basics$identity), $elm$parser$Parser$symbol("[")), $author$project$GraphQL$Operations$Parse$ws), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$lazy(typeParser), $author$project$GraphQL$Operations$Parse$ws), $elm$parser$Parser$symbol("]")));
    };
    function $author$project$GraphQL$Operations$Parse$cyclic$type_() {
        return $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$succeed(F2(function (base, isRequired) {
            return isRequired ? base : $author$project$GraphQL$Operations$AST$Nullable(base);
        })), $elm$parser$Parser$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$map_fn($author$project$GraphQL$Operations$AST$Type_, $author$project$GraphQL$Operations$Parse$name),
            $elm$parser$Parser$Advanced$map_fn($author$project$GraphQL$Operations$AST$List_, $author$project$GraphQL$Operations$Parse$listType(function (_v0) {
                return $author$project$GraphQL$Operations$Parse$cyclic$type_();
            }))
        ]))), $elm$parser$Parser$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$succeed(true), $elm$parser$Parser$symbol("!")),
            $elm$parser$Parser$succeed(false)
        ])));
    }
    var $author$project$GraphQL$Operations$Parse$type_ = $author$project$GraphQL$Operations$Parse$cyclic$type_();
    $author$project$GraphQL$Operations$Parse$cyclic$type_ = function () {
        return $author$project$GraphQL$Operations$Parse$type_;
    };
    var $author$project$GraphQL$Operations$Parse$variableDefinition = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$succeed($author$project$GraphQL$Operations$AST$VariableDefinition), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($author$project$GraphQL$Operations$Parse$variable, $author$project$GraphQL$Operations$Parse$ws), $elm$parser$Parser$symbol(":")), $author$project$GraphQL$Operations$Parse$ws)), $elm$parser$Parser$Advanced$ignorer_fn($author$project$GraphQL$Operations$Parse$type_, $author$project$GraphQL$Operations$Parse$ws)), $author$project$GraphQL$Operations$Parse$defaultValue);
    var $author$project$GraphQL$Operations$Parse$variableDefinitions = $elm$parser$Parser$oneOf(_List_fromArray([
        $elm$parser$Parser$sequence({ bg: ")", aS: $author$project$GraphQL$Operations$Parse$variableDefinition, a0: "", a1: $author$project$GraphQL$Operations$Parse$ws, bF: "(", a5: 1 }),
        $elm$parser$Parser$succeed(_List_Nil)
    ]));
    var $author$project$GraphQL$Operations$Parse$operation = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$succeed($author$project$GraphQL$Operations$AST$OperationDetails), $elm$parser$Parser$Advanced$ignorer_fn($author$project$GraphQL$Operations$Parse$operationType, $author$project$GraphQL$Operations$Parse$ws)), $elm$parser$Parser$Advanced$ignorer_fn($author$project$GraphQL$Operations$Parse$nameOpt, $author$project$GraphQL$Operations$Parse$ws)), $elm$parser$Parser$Advanced$ignorer_fn($author$project$GraphQL$Operations$Parse$variableDefinitions, $author$project$GraphQL$Operations$Parse$ws)), $elm$parser$Parser$Advanced$ignorer_fn($author$project$GraphQL$Operations$Parse$directives, $author$project$GraphQL$Operations$Parse$ws)), $author$project$GraphQL$Operations$Parse$selectionSet);
    var $author$project$GraphQL$Operations$Parse$definition = $elm$parser$Parser$oneOf(_List_fromArray([
        $elm$parser$Parser$Advanced$map_fn($author$project$GraphQL$Operations$AST$Fragment, $author$project$GraphQL$Operations$Parse$fragment),
        $elm$parser$Parser$Advanced$map_fn($author$project$GraphQL$Operations$AST$Operation, $author$project$GraphQL$Operations$Parse$operation)
    ]));
    var $author$project$GraphQL$Operations$Parse$loopDefinitions = function (defs) {
        return $author$project$GraphQL$Operations$Parse$ifProgress_fn($elm$core$List$reverse, $elm$parser$Parser$oneOf(_List_fromArray([
            $elm$parser$Parser$Advanced$map_fn(function (_v0) {
                return defs;
            }, $author$project$GraphQL$Operations$Parse$comment),
            $elm$parser$Parser$Advanced$map_fn(function (d) {
                return _List_Cons(d, defs);
            }, $author$project$GraphQL$Operations$Parse$definition),
            $elm$parser$Parser$Advanced$map_fn(function (_v1) {
                return defs;
            }, $author$project$GraphQL$Operations$Parse$ws)
        ])));
    };
    var $author$project$GraphQL$Operations$Parse$document = $elm$parser$Parser$Advanced$keeper_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$succeed($author$project$GraphQL$Operations$AST$Document), $author$project$GraphQL$Operations$Parse$ws), $elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$Advanced$ignorer_fn($elm$parser$Parser$loop_fn(_List_Nil, $author$project$GraphQL$Operations$Parse$loopDefinitions), $author$project$GraphQL$Operations$Parse$ws), $elm$parser$Parser$end));
    var $elm$parser$Parser$DeadEnd_fn = function (row, col, problem) {
        return { gS: col, hJ: problem, fv: row };
    }, $elm$parser$Parser$DeadEnd = F3($elm$parser$Parser$DeadEnd_fn);
    var $elm$parser$Parser$problemToDeadEnd = function (p) {
        return $elm$parser$Parser$DeadEnd_fn(p.fv, p.gS, p.hJ);
    };
    var $elm$parser$Parser$Advanced$bagToList_fn = function (bag, list) {
        bagToList: while (true) {
            switch (bag.$) {
                case 0:
                    return list;
                case 1:
                    var bag1 = bag.a;
                    var x = bag.b;
                    var $temp$bag = bag1, $temp$list = _List_Cons(x, list);
                    bag = $temp$bag;
                    list = $temp$list;
                    continue bagToList;
                default:
                    var bag1 = bag.a;
                    var bag2 = bag.b;
                    var $temp$bag = bag1, $temp$list = $elm$parser$Parser$Advanced$bagToList_fn(bag2, list);
                    bag = $temp$bag;
                    list = $temp$list;
                    continue bagToList;
            }
        }
    }, $elm$parser$Parser$Advanced$bagToList = F2($elm$parser$Parser$Advanced$bagToList_fn);
    var $elm$parser$Parser$Advanced$run_fn = function (_v0, src) {
        var parse = _v0;
        var _v1 = parse({ gS: 1, g: _List_Nil, h: 1, aH: 0, fv: 1, bE: src });
        if (!_v1.$) {
            var value = _v1.b;
            return $elm$core$Result$Ok(value);
        }
        else {
            var bag = _v1.b;
            return $elm$core$Result$Err($elm$parser$Parser$Advanced$bagToList_fn(bag, _List_Nil));
        }
    }, $elm$parser$Parser$Advanced$run = F2($elm$parser$Parser$Advanced$run_fn);
    var $elm$parser$Parser$run_fn = function (parser, source) {
        var _v0 = $elm$parser$Parser$Advanced$run_fn(parser, source);
        if (!_v0.$) {
            var a = _v0.a;
            return $elm$core$Result$Ok(a);
        }
        else {
            var problems = _v0.a;
            return $elm$core$Result$Err($elm$core$List$map_fn($elm$parser$Parser$problemToDeadEnd, problems));
        }
    }, $elm$parser$Parser$run = F2($elm$parser$Parser$run_fn);
    var $author$project$GraphQL$Operations$Parse$parse = function (doc) {
        return $elm$parser$Parser$run_fn($author$project$GraphQL$Operations$Parse$document, doc);
    };
    var $author$project$Generate$parseAndValidateQuery_fn = function (namespace, schema, flags, gql) {
        var _v0 = $author$project$GraphQL$Operations$Parse$parse(gql.bE);
        if (_v0.$ === 1) {
            var err = _v0.a;
            return $elm$core$Result$Err({
                bd: $author$project$GraphQL$Operations$Parse$errorToString(err),
                bI: $author$project$Generate$formatTitle_fn("UNABLE TO PARSE QUERY", gql.hH)
            });
        }
        else {
            var query = _v0.a;
            var _v1 = $author$project$GraphQL$Operations$Canonicalize$canonicalize_fn(schema, { al: flags.al, hH: gql.hH }, query);
            if (_v1.$ === 1) {
                var errors = _v1.a;
                return $elm$core$Result$Err({
                    bd: $elm$core$String$join_fn($author$project$GraphQL$Operations$Canonicalize$cyan("\n-------------------\n\n"), $elm$core$List$map_fn($author$project$GraphQL$Operations$Canonicalize$errorToString, errors)),
                    bI: $author$project$Generate$formatTitle_fn("ELM GQL", gql.hH)
                });
            }
            else {
                var canAST = _v1.a;
                return $elm$core$Result$Ok($author$project$GraphQL$Operations$GenerateSelection$generate({ cC: canAST, al: flags.al, bv: namespace, hH: gql.hH, hQ: schema }));
            }
        }
    }, $author$project$Generate$parseAndValidateQuery = F4($author$project$Generate$parseAndValidateQuery_fn);
    var $author$project$Generate$parseGql_fn = function (namespace, schema, flagDetails, gql, rendered) {
        parseGql: while (true) {
            if (!gql.b) {
                return $elm$core$Result$Ok(rendered);
            }
            else {
                var top = gql.a;
                var remaining = gql.b;
                var _v1 = $author$project$Generate$parseAndValidateQuery_fn(namespace, schema, flagDetails, top);
                if (!_v1.$) {
                    var parsedFiles = _v1.a;
                    var $temp$namespace = namespace, $temp$schema = schema, $temp$flagDetails = flagDetails, $temp$gql = remaining, $temp$rendered = _Utils_ap(rendered, parsedFiles);
                    namespace = $temp$namespace;
                    schema = $temp$schema;
                    flagDetails = $temp$flagDetails;
                    gql = $temp$gql;
                    rendered = $temp$rendered;
                    continue parseGql;
                }
                else {
                    var err = _v1.a;
                    return $elm$core$Result$Err(err);
                }
            }
        }
    }, $author$project$Generate$parseGql = F5($author$project$Generate$parseGql_fn);
    var $author$project$Gen$GraphQL$Mock$schemaFromString = function (schemaFromStringArg) {
        return $mdgriffith$elm_codegen$Elm$apply_fn($mdgriffith$elm_codegen$Elm$value({
            a: $elm$core$Maybe$Just($mdgriffith$elm_codegen$Elm$Annotation$function_fn(_List_fromArray([$mdgriffith$elm_codegen$Elm$Annotation$string]), $mdgriffith$elm_codegen$Elm$Annotation$namedWith_fn(_List_Nil, "Schema", _List_Nil))),
            b: _List_fromArray(["GraphQL", "Mock"]),
            c: "schemaFromString"
        }), _List_fromArray([
            $mdgriffith$elm_codegen$Elm$string(schemaFromStringArg)
        ]));
    };
    var $author$project$Generate$saveSchemaAsElm_fn = function (namespace, val) {
        return $mdgriffith$elm_codegen$Elm$file_fn(_List_fromArray([namespace.bv, "Meta", "Schema"]), _List_fromArray([
            $mdgriffith$elm_codegen$Elm$expose($mdgriffith$elm_codegen$Elm$declaration_fn("schema", $author$project$Gen$GraphQL$Mock$schemaFromString(_Json_encode_fn(4, val))))
        ]));
    }, $author$project$Generate$saveSchemaAsElm = F2($author$project$Generate$saveSchemaAsElm_fn);
    var $author$project$Generate$saveSchemaAsJson_fn = function (namespace, val) {
        return {
            gW: _Json_encode_fn(4, val),
            hH: namespace.bv + ("/" + "schema.json"),
            ie: _List_Nil
        };
    }, $author$project$Generate$saveSchemaAsJson = F2($author$project$Generate$saveSchemaAsJson_fn);
    var $author$project$Generate$generatePlatform_fn = function (namespaceStr, schema, schemaAsJson, flagDetails) {
        var namespace = {
            cQ: $elm$core$Maybe$withDefault_fn(namespaceStr, flagDetails.bh),
            bv: namespaceStr
        };
        var parsedGqlQueries = $author$project$Generate$parseGql_fn(namespace, schema, flagDetails, flagDetails.bm, _List_Nil);
        if (parsedGqlQueries.$ === 1) {
            var err = parsedGqlQueries.a;
            return $author$project$Gen$error(_List_fromArray([err]));
        }
        else {
            var gqlFiles = parsedGqlQueries.a;
            if (flagDetails.bl) {
                var schemaFiles = _List_Cons($author$project$Generate$saveSchemaAsElm_fn(namespace, schemaAsJson), _List_Cons($author$project$Generate$saveSchemaAsJson_fn(namespace, schemaAsJson), _Utils_ap($author$project$Generate$Enums$generateFiles_fn(namespace, schema), $author$project$Generate$InputObjects$generateFiles_fn(namespace, schema))));
                var all = _Utils_ap($elm$core$List$map_fn($author$project$Generate$addOutputDir(flagDetails.bf), schemaFiles), gqlFiles);
                return $author$project$Gen$files(flagDetails.bp ? _List_Cons($author$project$Generate$addOutputDir_fn(_List_fromArray(["src"]), $author$project$Generate$Root$generate_fn(namespace, schema)), all) : all);
            }
            else {
                return $author$project$Gen$files(gqlFiles);
            }
        }
    }, $author$project$Generate$generatePlatform = F4($author$project$Generate$generatePlatform_fn);
    var $elm$json$Json$Decode$decodeString = _Json_runOnString;
    var $elm$http$Http$BadStatus__fn = function (a, b) {
        return { $: 3, a: a, b: b };
    }, $elm$http$Http$BadStatus_ = F2($elm$http$Http$BadStatus__fn);
    var $elm$http$Http$BadUrl_ = function (a) {
        return { $: 0, a: a };
    };
    var $elm$http$Http$GoodStatus__fn = function (a, b) {
        return { $: 4, a: a, b: b };
    }, $elm$http$Http$GoodStatus_ = F2($elm$http$Http$GoodStatus__fn);
    var $elm$http$Http$NetworkError_ = { $: 2 };
    var $elm$http$Http$Receiving = function (a) {
        return { $: 1, a: a };
    };
    var $elm$http$Http$Sending = function (a) {
        return { $: 0, a: a };
    };
    var $elm$http$Http$Timeout_ = { $: 1 };
    var $elm$core$Maybe$isJust = function (maybe) {
        if (!maybe.$) {
            return true;
        }
        else {
            return false;
        }
    };
    var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
    var $elm$http$Http$expectStringResponse_fn = function (toMsg, toResult) {
        return _Http_expect_fn("", $elm$core$Basics$identity, A2($elm$core$Basics$composeR, toResult, toMsg));
    }, $elm$http$Http$expectStringResponse = F2($elm$http$Http$expectStringResponse_fn);
    var $elm$http$Http$BadBody = function (a) {
        return { $: 4, a: a };
    };
    var $elm$http$Http$BadStatus = function (a) {
        return { $: 3, a: a };
    };
    var $elm$http$Http$BadUrl = function (a) {
        return { $: 0, a: a };
    };
    var $elm$http$Http$NetworkError = { $: 2 };
    var $elm$http$Http$Timeout = { $: 1 };
    var $elm$http$Http$resolve_fn = function (toResult, response) {
        switch (response.$) {
            case 0:
                var url = response.a;
                return $elm$core$Result$Err($elm$http$Http$BadUrl(url));
            case 1:
                return $elm$core$Result$Err($elm$http$Http$Timeout);
            case 2:
                return $elm$core$Result$Err($elm$http$Http$NetworkError);
            case 3:
                var metadata = response.a;
                return $elm$core$Result$Err($elm$http$Http$BadStatus(metadata.hX));
            default:
                var body = response.b;
                return $elm$core$Result$mapError_fn($elm$http$Http$BadBody, toResult(body));
        }
    }, $elm$http$Http$resolve = F2($elm$http$Http$resolve_fn);
    var $elm$http$Http$expectJson_fn = function (toMsg, decoder) {
        return $elm$http$Http$expectStringResponse_fn(toMsg, $elm$http$Http$resolve(function (string) {
            return $elm$core$Result$mapError_fn($elm$json$Json$Decode$errorToString, _Json_runOnString_fn(decoder, string));
        }));
    }, $elm$http$Http$expectJson = F2($elm$http$Http$expectJson_fn);
    var $elm$http$Http$Header_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $elm$http$Http$Header = F2($elm$http$Http$Header_fn);
    var $elm$http$Http$header = $elm$http$Http$Header;
    var $author$project$GraphQL$Schema$introspection = "\nquery IntrospectionQuery {\n    __schema {\n      queryType {\n        name\n      }\n      mutationType {\n        name\n      }\n      subscriptionType {\n        name\n      }\n      types {\n        ...FullType\n      }\n    }\n  }\n  fragment FullType on __Type {\n    kind\n    name\n    description\n    fields(includeDeprecated: true) {\n      name\n      description\n      args {\n        ...InputValue\n      }\n      type {\n        ...TypeRef\n      }\n      isDeprecated\n      deprecationReason\n    }\n    inputFields {\n      ...InputValue\n    }\n    interfaces {\n      ...TypeRef\n    }\n    enumValues(includeDeprecated: true) {\n      name\n      description\n      isDeprecated\n      deprecationReason\n    }\n    possibleTypes {\n      ...TypeRef\n    }\n  }\n  fragment InputValue on __InputValue {\n    name\n    description\n    type {\n      ...TypeRef\n    }\n    defaultValue\n  }\n  fragment TypeRef on __Type {\n    kind\n    name\n    ofType {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n";
    var $elm$http$Http$jsonBody = function (value) {
        return _Http_pair_fn("application/json", _Json_encode_fn(0, value));
    };
    var $elm$http$Http$Request = function (a) {
        return { $: 1, a: a };
    };
    var $elm$http$Http$State_fn = function (reqs, subs) {
        return { at: reqs, av: subs };
    }, $elm$http$Http$State = F2($elm$http$Http$State_fn);
    var $elm$core$Task$succeed = _Scheduler_succeed;
    var $elm$http$Http$init = $elm$core$Task$succeed($elm$http$Http$State_fn($elm$core$Dict$empty, _List_Nil));
    var $elm$core$Task$andThen = _Scheduler_andThen;
    var $elm$core$Process$kill = _Scheduler_kill;
    var $elm$core$Platform$sendToApp = _Platform_sendToApp;
    var $elm$core$Process$spawn = _Scheduler_spawn;
    var $elm$http$Http$updateReqs_fn = function (router, cmds, reqs) {
        updateReqs: while (true) {
            if (!cmds.b) {
                return $elm$core$Task$succeed(reqs);
            }
            else {
                var cmd = cmds.a;
                var otherCmds = cmds.b;
                if (!cmd.$) {
                    var tracker = cmd.a;
                    var _v2 = $elm$core$Dict$get_fn(tracker, reqs);
                    if (_v2.$ === 1) {
                        var $temp$router = router, $temp$cmds = otherCmds, $temp$reqs = reqs;
                        router = $temp$router;
                        cmds = $temp$cmds;
                        reqs = $temp$reqs;
                        continue updateReqs;
                    }
                    else {
                        var pid = _v2.a;
                        return _Scheduler_andThen_fn(function (_v3) {
                            return $elm$http$Http$updateReqs_fn(router, otherCmds, $elm$core$Dict$remove_fn(tracker, reqs));
                        }, $elm$core$Process$kill(pid));
                    }
                }
                else {
                    var req = cmd.a;
                    return _Scheduler_andThen_fn(function (pid) {
                        var _v4 = req.a4;
                        if (_v4.$ === 1) {
                            return $elm$http$Http$updateReqs_fn(router, otherCmds, reqs);
                        }
                        else {
                            var tracker = _v4.a;
                            return $elm$http$Http$updateReqs_fn(router, otherCmds, $elm$core$Dict$insert_fn(tracker, pid, reqs));
                        }
                    }, $elm$core$Process$spawn(_Http_toTask_fn(router, $elm$core$Platform$sendToApp(router), req)));
                }
            }
        }
    }, $elm$http$Http$updateReqs = F3($elm$http$Http$updateReqs_fn);
    var $elm$http$Http$onEffects_fn = function (router, cmds, subs, state) {
        return _Scheduler_andThen_fn(function (reqs) {
            return $elm$core$Task$succeed($elm$http$Http$State_fn(reqs, subs));
        }, $elm$http$Http$updateReqs_fn(router, cmds, state.at));
    }, $elm$http$Http$onEffects = F4($elm$http$Http$onEffects_fn);
    var $elm$http$Http$maybeSend_fn = function (router, desiredTracker, progress, _v0) {
        var actualTracker = _v0.a;
        var toMsg = _v0.b;
        return _Utils_eq(desiredTracker, actualTracker) ? $elm$core$Maybe$Just(_Platform_sendToApp_fn(router, toMsg(progress))) : $elm$core$Maybe$Nothing;
    }, $elm$http$Http$maybeSend = F4($elm$http$Http$maybeSend_fn);
    var $elm$core$Task$map2_fn = function (func, taskA, taskB) {
        return _Scheduler_andThen_fn(function (a) {
            return _Scheduler_andThen_fn(function (b) {
                return $elm$core$Task$succeed(A2(func, a, b));
            }, taskB);
        }, taskA);
    }, $elm$core$Task$map2_fn_unwrapped = function (func, taskA, taskB) {
        return _Scheduler_andThen_fn(function (a) {
            return _Scheduler_andThen_fn(function (b) {
                return $elm$core$Task$succeed(func(a, b));
            }, taskB);
        }, taskA);
    }, $elm$core$Task$map2 = F3($elm$core$Task$map2_fn);
    var $elm$core$Task$sequence = function (tasks) {
        return $elm$core$List$foldr_fn($elm$core$Task$map2($elm$core$List$cons), $elm$core$Task$succeed(_List_Nil), tasks);
    };
    var $elm$http$Http$onSelfMsg_fn = function (router, _v0, state) {
        var tracker = _v0.a;
        var progress = _v0.b;
        return _Scheduler_andThen_fn(function (_v1) {
            return $elm$core$Task$succeed(state);
        }, $elm$core$Task$sequence($elm$core$List$filterMap_fn(A3($elm$http$Http$maybeSend, router, tracker, progress), state.av)));
    }, $elm$http$Http$onSelfMsg = F3($elm$http$Http$onSelfMsg_fn);
    var $elm$http$Http$Cancel = function (a) {
        return { $: 0, a: a };
    };
    var $elm$http$Http$cmdMap_fn = function (func, cmd) {
        if (!cmd.$) {
            var tracker = cmd.a;
            return $elm$http$Http$Cancel(tracker);
        }
        else {
            var r = cmd.a;
            return $elm$http$Http$Request({
                gK: r.gK,
                gM: r.gM,
                g8: _Http_mapExpect_fn(func, r.g8),
                U: r.U,
                ht: r.ht,
                R: r.R,
                a4: r.a4,
                V: r.V
            });
        }
    }, $elm$http$Http$cmdMap = F2($elm$http$Http$cmdMap_fn);
    var $elm$http$Http$MySub_fn = function (a, b) {
        return { $: 0, a: a, b: b };
    }, $elm$http$Http$MySub = F2($elm$http$Http$MySub_fn);
    var $elm$http$Http$subMap_fn = function (func, _v0) {
        var tracker = _v0.a;
        var toMsg = _v0.b;
        return $elm$http$Http$MySub_fn(tracker, A2($elm$core$Basics$composeR, toMsg, func));
    }, $elm$http$Http$subMap = F2($elm$http$Http$subMap_fn);
    _Platform_effectManagers["Http"] = _Platform_createManager($elm$http$Http$init, $elm$http$Http$onEffects, $elm$http$Http$onSelfMsg, $elm$http$Http$cmdMap, $elm$http$Http$subMap);
    var $elm$http$Http$command = _Platform_leaf("Http");
    var $elm$http$Http$subscription = _Platform_leaf("Http");
    var $elm$http$Http$request = function (r) {
        return $elm$http$Http$command($elm$http$Http$Request({ gK: false, gM: r.gM, g8: r.g8, U: r.U, ht: r.ht, R: r.R, a4: r.a4, V: r.V }));
    };
    var $author$project$GraphQL$Schema$getJsonValue_fn = function (headers, url, toMsg) {
        return $elm$http$Http$request({
            gM: $elm$http$Http$jsonBody($elm$json$Json$Encode$object(_List_fromArray([
                _Utils_Tuple2("query", $elm$json$Json$Encode$string($author$project$GraphQL$Schema$introspection))
            ]))),
            g8: $elm$http$Http$expectJson_fn(toMsg, $elm$json$Json$Decode$value),
            U: $elm$core$List$map_fn(function (_v0) {
                var key = _v0.a;
                var val = _v0.b;
                return $elm$http$Http$Header_fn(key, val);
            }, headers),
            ht: "POST",
            R: $elm$core$Maybe$Nothing,
            a4: $elm$core$Maybe$Nothing,
            V: url
        });
    }, $author$project$GraphQL$Schema$getJsonValue = F3($author$project$GraphQL$Schema$getJsonValue_fn);
    var $author$project$Generate$httpErrorToString = function (err) {
        switch (err.$) {
            case 0:
                var msg = err.a;
                return "Bad Url: " + msg;
            case 1:
                return "Timeout";
            case 2:
                return "Network Error";
            case 3:
                var status = err.a;
                return "Bad Status: " + $elm$core$String$fromInt(status);
            default:
                var msg = err.a;
                return "Bad Body: " + msg;
        }
    };
    var $elm$core$Platform$Sub$batch = _Platform_batch;
    var $elm$core$Platform$Sub$none = $elm$core$Platform$Sub$batch(_List_Nil);
    var $author$project$Generate$parseSingleHeader_fn = function (headerString, result) {
        if (result.$ === 1) {
            var err = result.a;
            return $elm$core$Result$Err(err);
        }
        else {
            var headers = result.a;
            var _v1 = $elm$core$String$split_fn(":", headerString);
            if (!_v1.b) {
                return $elm$core$Result$Err({ bd: "I received the header '" + (headerString + ("' but I wasn't able parse it." + "\nHeaders should be provided \n\n    --header 'Authorization: bearer TOKEN'\n")), bI: "Unknown Header Format" });
            }
            else {
                var key = _v1.a;
                var remaining = _v1.b;
                return $elm$core$Result$Ok(_List_Cons(_Utils_Tuple2($elm$core$String$trim(key), $elm$core$String$join_fn(",", remaining)), headers));
            }
        }
    }, $author$project$Generate$parseSingleHeader = F2($author$project$Generate$parseSingleHeader_fn);
    var $author$project$Generate$parseHeaders = function (headers) {
        return $elm$core$Result$map_fn($elm$core$List$reverse, $elm$core$List$foldl_fn($author$project$Generate$parseSingleHeader, $elm$core$Result$Ok(_List_Nil), headers));
    };
    var $elm$core$Platform$worker = _Platform_worker;
    var $author$project$Generate$main_a0 = {
        aQ: function (json) {
            var decoded = _Json_run_fn($author$project$Generate$flagsDecoder, json);
            if (decoded.$ === 1) {
                var err = decoded.a;
                return _Utils_Tuple2({ aj: json, an: $author$project$Generate$InputError, bv: "Api" }, $author$project$Gen$error(_List_fromArray([
                    {
                        bd: $elm$json$Json$Decode$errorToString(err),
                        bI: "Error decoding flags"
                    }
                ])));
            }
            else {
                var input = decoded.a;
                if (input.$ === 1) {
                    return _Utils_Tuple2({ aj: json, an: $author$project$Generate$InputError, bv: "Api" }, $author$project$Gen$error(_List_fromArray([
                        { bd: "", bI: "Error decoding flags" }
                    ])));
                }
                else {
                    var flags = input.a;
                    var _v2 = flags.hQ;
                    if (!_v2.$) {
                        var url = _v2.a;
                        var _v3 = $author$project$Generate$parseHeaders(flags.bn);
                        if (_v3.$ === 1) {
                            var error = _v3.a;
                            return _Utils_Tuple2({ aj: json, an: $author$project$Generate$InputError, bv: flags.bv }, $author$project$Gen$error(_List_fromArray([error])));
                        }
                        else {
                            var headers = _v3.a;
                            return _Utils_Tuple2({ aj: json, an: input, bv: flags.bv }, $author$project$GraphQL$Schema$getJsonValue_fn(headers, url, $author$project$Generate$SchemaReceived(flags)));
                        }
                    }
                    else {
                        var schemaAsJson = _v2.a;
                        var schema = _v2.b;
                        return _Utils_Tuple2({ aj: json, an: input, bv: flags.bv }, $author$project$Generate$generatePlatform_fn(flags.bv, schema, schemaAsJson, flags));
                    }
                }
            }
        },
        a2: function (_v4) {
            return $elm$core$Platform$Sub$none;
        },
        a8: F2(function (msg, model) {
            if (!msg.b.$) {
                var flagDetails = msg.a;
                var schemaJsonValue = msg.b.a;
                var _v6 = _Json_run_fn($author$project$GraphQL$Schema$decoder, schemaJsonValue);
                if (!_v6.$) {
                    var schema = _v6.a;
                    return _Utils_Tuple2(model, $author$project$Generate$generatePlatform_fn(model.bv, schema, schemaJsonValue, flagDetails));
                }
                else {
                    var decodingError = _v6.a;
                    return _Utils_Tuple2(model, $author$project$Gen$error(_List_fromArray([
                        {
                            bd: "Something went wrong with decoding the schema.\n\n    " + $elm$json$Json$Decode$errorToString(decodingError),
                            bI: "Error decoding schema"
                        }
                    ])));
                }
            }
            else {
                var flagDetails = msg.a;
                var err = msg.b.a;
                return _Utils_Tuple2(model, $author$project$Gen$error(_List_fromArray([
                    {
                        bd: "Something went wrong with retrieving the schema.\n\n    " + $author$project$Generate$httpErrorToString(err),
                        bI: "Error retrieving schema"
                    }
                ])));
            }
        })
    }, $author$project$Generate$main = $elm$core$Platform$worker($author$project$Generate$main_a0);
    _Platform_export({ "Generate": { "init": $author$project$Generate$main($elm$json$Json$Decode$value)(0) } });
}(this));
